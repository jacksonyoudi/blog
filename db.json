{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon_live.png","path":"favicon_live.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","path":"medias/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo_live.png","path":"medias/logo_live.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/mj-moon.png","path":"medias/mj-moon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/0.jpg","path":"medias/banner/backup/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/1.jpg","path":"medias/banner/backup/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/2.jpg","path":"medias/banner/backup/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/3.jpg","path":"medias/banner/backup/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/4.jpg","path":"medias/banner/backup/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/5.jpg","path":"medias/banner/backup/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/6.jpg","path":"medias/banner/backup/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/7.jpg","path":"medias/banner/backup/7.jpg","modified":0,"renderable":1},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/robots-protocol.md","hash":"404d645a62330d1bcb5c924aaac4ff01855dd729","modified":1627738615570},{"_id":"source/404/index.md","hash":"a5d1dc898bce568c76c405e15c033ad1e951c16c","modified":1627736426025},{"_id":"source/_posts/go-mod-use.md","hash":"34c81cdf6a60af91d8d135d73e618a784a4fafd5","modified":1627736426026},{"_id":"source/_posts/iterm.md","hash":"9104abecec619dd92a718c87605e8279ecdb3126","modified":1627736426027},{"_id":"source/contact/index.md","hash":"e516402841f678b98e082830375940ebab6b4fb8","modified":1627736426028},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1627736426026},{"_id":"source/categories/index.md","hash":"8068af7643e0db9e5a7cf148b54c2229421d8bcf","modified":1627736426027},{"_id":"source/about/index.md","hash":"52310f769e4fefab3c831bc5bae7def8af8af193","modified":1627736426027},{"_id":"source/tags/index.md","hash":"7b891f845a41250138ad54652c7ca4e2c5a4bd32","modified":1627736426028},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1627736507756},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1627736507755},{"_id":"themes/hexo-theme-matery/README.md","hash":"ddaf6310154e314385d63041da61c418055314f6","modified":1627736507904},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"6013123fd47d481ce0a64fc75c5a39bb1948046b","modified":1627736507904},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"bb583b880bebd29bdba0487068db60b37c2fdebf","modified":1627736507903},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"6fb0903b32d3d2518576aae0b1a5d03ea720fcf4","modified":1627736507903},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a2267aed16d52f4adeb13f555d36d076855387af","modified":1627736507904},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1627736507757},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1627736507761},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"c134429dce107518dc141410f3a9ae4e9ae8d118","modified":1627736507905},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1627736507760},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1627736507758},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1627736507757},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1627736507774},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"a777733e03d954ac265a3d0523245bd191732130","modified":1627736507759},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"51e5369ec6b017cc702a8d957fc052c59dd4c3d7","modified":1627736507759},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"f421840a8076ebe6a53c85483d6a8e8634af9cc0","modified":1627736507758},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1627736507760},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1627736507757},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1627736507758},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1627736507760},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1627736507779},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1627736507777},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1627736507778},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1627736507776},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1627736507777},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1627736507780},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1627736507778},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1627736507776},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1627736507776},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1627736507775},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1627736507775},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1627736507779},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1627736507778},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1627736507779},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1627736507774},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1627736507766},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1627736507766},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1627736507771},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1627736507771},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1627736507763},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1627736507763},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1627736507762},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"5ad05cdc0544d77f0058b9faeb1742628b61d002","modified":1627736507770},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1627736507762},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1627736507764},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1627736507768},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1627736507765},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1627736507767},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1627736507770},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"85f0ef1c390694a1661e77f44a3ed76555099385","modified":1627736507773},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1627736507768},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1627736507764},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1627736507772},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1627736507772},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1627736507767},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1627736507769},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1627736507762},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"4002adc615f6d3959993dcb62004a07adfc3fe4f","modified":1627736507768},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1627736507765},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1627736507770},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1627736507773},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1627736507773},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1627736507766},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1627736507769},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1627736507763},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1627736507771},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1627736507764},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1627736507782},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1627736507782},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1627736507783},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"56820b957f9ddc5adc1aed56793053b470ede4ca","modified":1627736507781},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1627736507782},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1627736507784},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1627736507783},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1627736507785},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1627736507784},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1627736507805},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1627736507808},{"_id":"themes/hexo-theme-matery/source/medias/mj-moon.png","hash":"a4225a52d5655dfa69f639d0a3dfb24336aae403","modified":1627736507801},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1627736507894},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1627736507856},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1627736507893},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1627736507865},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1627736507852},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1627736507852},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1627736507865},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1627736507853},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1627736507853},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1627736507861},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1627736507862},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1627736507861},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1627736507862},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1627736507854},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1627736507859},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1627736507857},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1627736507875},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1627736507864},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1627736507876},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1627736507875},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1627736507872},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1627736507855},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1627736507873},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1627736507866},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1627736507873},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1627736507878},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1627736507874},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1627736507877},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1627736507863},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1627736507804},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1627736507804},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1627736507803},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1627736507805},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1627736507792},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1627736507791},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1627736507790},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1627736507791},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1627736507798},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1627736507794},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1627736507793},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1627736507795},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1627736507799},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1627736507797},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1627736507797},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1627736507871},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1627736507788},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1627736507871},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1627736507871},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1627736507870},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1627736507869},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1627736507869},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1627736507869},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1627736507870},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1627736507868},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1627736507867},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1627736507896},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1627736507896},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1627736507895},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1627736507892},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1627736507888},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1627736507890},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1627736507884},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1627736507897},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1627736507901},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1627736507900},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1627736507897},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/6.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1627736507827},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1627736507858},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1627736507874},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1627736507866},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1627736507860},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1627736507800},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1627736507799},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1627736507792},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1627736507791},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1627736507789},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1627736507790},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1627736507796},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1627736507795},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1627736507794},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1627736507796},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1627736507798},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1627736507789},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1627736507880},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1627736507888},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1627736507892},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1627736507892},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1627736507891},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1627736507890},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1627736507891},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1627736507831},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1627736507828},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1627736507830},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1627736507807},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1627736507876},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1627736507877},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1627736507859},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"db1ee4c5ca3745b7171dfe56f3d6776d29e0c544","modified":1627736507847},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1627736507882},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1627736507884},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1627736507881},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1627736507830},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1627736507825},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/7.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1627736507826},{"_id":"themes/hexo-theme-matery/source/favicon_live.png","hash":"973d210ae3340b98a3be67c25654ee21818de1da","modified":1627736507786},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","hash":"973d210ae3340b98a3be67c25654ee21818de1da","modified":1627736507803},{"_id":"themes/hexo-theme-matery/source/medias/logo_live.png","hash":"973d210ae3340b98a3be67c25654ee21818de1da","modified":1627736507800},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"ed4e1d2a2ad6a6cd6446d4420c7afd452e69ac54","modified":1627736507849},{"_id":"themes/hexo-theme-matery/source/medias/banner/backup/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1627736507825},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1627736507863},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1627736507885},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1627736507879},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1627736507857},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1627736507889},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"f1472f594c00a3256b64cac766ad0a378670667f","modified":1627736507837},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"e159172c1d1e99b73a04a8960ca60534183065eb","modified":1627736507822},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"de78ad42e04500ccd1383e7b6ffe663ce291e742","modified":1627736507834},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"eccbc172019d7eb44f3df7ddbaf697de916db1f5","modified":1627736507812},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"8e60fedd689ae611de80fb4f40f1aacea15c79e3","modified":1627736507843},{"_id":"source/_posts/img.png","hash":"06d417ae054024723d9986cf66ff1464e9e3c1db","modified":1627827828003},{"_id":"public/search.xml","hash":"b28868ed9491ba5b46ea3c056f489bcb12827cce","modified":1627829803511},{"_id":"public/404/index.html","hash":"cff036e7c71359c59ed3aff2acfc85129192b7e1","modified":1627739021791},{"_id":"public/about/index.html","hash":"ed9e7403603868104a7116bfffd8e2c495b6b1f2","modified":1627829506581},{"_id":"public/contact/index.html","hash":"81eda9f1e553e6d74d01a09420369af849e93812","modified":1627739021791},{"_id":"public/categories/index.html","hash":"c928ecb5bbb871e6945bf9e76d2c31edeccf1f00","modified":1627829506581},{"_id":"public/tags/index.html","hash":"356700fa34617d107acc486f16993e882358f869","modified":1627829506581},{"_id":"public/2021/07/31/robots-protocol/index.html","hash":"492330f45949425bb229fae6f032f03c5e8d425c","modified":1627781580994},{"_id":"public/2021/07/31/hello-world/index.html","hash":"0d478b495ab280bc13827b0a96698477d61c846d","modified":1627740389770},{"_id":"public/2021/07/31/iterm/index.html","hash":"2eeade34961afc8d5a19c556fa81ee3489b1d6a1","modified":1627740389770},{"_id":"public/2021/07/31/go-mod-use/index.html","hash":"18705fe069e170cf7507fca5b412b4e678906aad","modified":1627740389770},{"_id":"public/archives/index.html","hash":"21b4d65212cc8da5e43a6c67d967426e97cf2486","modified":1627829803511},{"_id":"public/archives/2021/index.html","hash":"ab0611ad680c5f0737c9f9b2f6bb4488047739ef","modified":1627829803511},{"_id":"public/archives/2021/07/index.html","hash":"e1f7ab72cfc6c27af75d7a256fe81f1d8ac5dd1e","modified":1627829506581},{"_id":"public/index.html","hash":"9e573005628377899fb7d96f3e24bb21a6780550","modified":1627829803511},{"_id":"public/categories/工具/index.html","hash":"1fa507f269c06f63885cdefcbb056b4f310b99ec","modified":1627829506581},{"_id":"public/categories/技术/index.html","hash":"b989c1ecb33f8ca1166e45054e46794a6d08ce6e","modified":1627829803511},{"_id":"public/tags/mac/index.html","hash":"f222e3fb777563761ae328a3063df24c83922c25","modified":1627829506581},{"_id":"public/tags/zsh/index.html","hash":"1b849136ca58ecebe658004ace0f6fd4703250e0","modified":1627829506581},{"_id":"public/tags/powerlevel10k/index.html","hash":"672e15c89449f48d82bc6f37af51add74de62717","modified":1627829506581},{"_id":"public/tags/dracula/index.html","hash":"0dd5ef8f32d71b03aa9a359d42dd1e8052f097c5","modified":1627829506581},{"_id":"public/tags/crawler/index.html","hash":"8eb3bdc21a15caa2b66c4d17dc5c015e16353c8b","modified":1627829506581},{"_id":"public/tags/爬虫/index.html","hash":"1d84061657eee4b8680780214014fd7c1b0f3668","modified":1627829506581},{"_id":"public/tags/robots/index.html","hash":"f35784a08675bb8409af1865da954d6a860f3e95","modified":1627829506581},{"_id":"public/tags/go/index.html","hash":"de64892c32b9286295b95b85e0195d714967c0d3","modified":1627829803511},{"_id":"public/tags/tool/index.html","hash":"e91d09e5ab488d487406ec3c77f410eeb46072f6","modified":1627829506581},{"_id":"public/tags/language/index.html","hash":"e3619efa6bb049f3fe7d3c8bf72d38ce43e0c024","modified":1627829506581},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1627739021791},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1627739021791},{"_id":"public/medias/mj-moon.png","hash":"a4225a52d5655dfa69f639d0a3dfb24336aae403","modified":1627739021791},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1627739021791},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1627739021791},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1627739021791},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1627739021791},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1627739021791},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1627739021791},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1627739021791},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1627739021791},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1627739021791},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1627739021791},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1627739021791},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1627739021791},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1627739021791},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1627739021791},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1627739021791},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1627739021791},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1627739021791},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1627739021791},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1627739021791},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1627739021791},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1627739021791},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1627739021791},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1627739021791},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1627739021791},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1627739021791},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1627739021791},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1627739021791},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1627739021791},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1627739021791},{"_id":"public/medias/banner/backup/6.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1627739021791},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1627739021791},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1627739021791},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1627739021791},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1627739021791},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1627739021791},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1627739021791},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1627739021791},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1627739021791},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1627739021791},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1627739021791},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1627739021791},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1627739021791},{"_id":"public/medias/banner/backup/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1627739021791},{"_id":"public/medias/banner/backup/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1627739021791},{"_id":"public/medias/banner/backup/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1627739021791},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1627739021791},{"_id":"public/medias/banner/1.jpg","hash":"db1ee4c5ca3745b7171dfe56f3d6776d29e0c544","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1627739021791},{"_id":"public/medias/banner/backup/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1627739021791},{"_id":"public/medias/banner/backup/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1627739021791},{"_id":"public/medias/banner/backup/7.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1627739021791},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1627739021791},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1627739021791},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1627739021791},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1627739021791},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1627739021791},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1627739021791},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1627739021791},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1627739021791},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1627739021791},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1627739021791},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1627739021791},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1627739021791},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1627739021791},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1627739021791},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1627739021791},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1627739021791},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1627739021791},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1627739021791},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1627739021791},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1627739021791},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1627739021791},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1627739021791},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1627739021791},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1627739021791},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1627739021791},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1627739021791},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1627739021791},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1627739021791},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1627739021791},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1627739021791},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1627739021791},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1627739021791},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1627739021791},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1627739021791},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1627739021791},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1627739021791},{"_id":"public/favicon_live.png","hash":"973d210ae3340b98a3be67c25654ee21818de1da","modified":1627739021791},{"_id":"public/medias/avatar.png","hash":"973d210ae3340b98a3be67c25654ee21818de1da","modified":1627739021791},{"_id":"public/medias/logo_live.png","hash":"973d210ae3340b98a3be67c25654ee21818de1da","modified":1627739021791},{"_id":"public/medias/banner/0.jpg","hash":"ed4e1d2a2ad6a6cd6446d4420c7afd452e69ac54","modified":1627739021791},{"_id":"public/medias/banner/backup/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1627739021791},{"_id":"public/css/matery.css","hash":"56820b957f9ddc5adc1aed56793053b470ede4ca","modified":1627739021791},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1627739021791},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1627739021791},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1627739021791},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1627739021791},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1627739021791},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1627739021791},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1627739021791},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1627739021791},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1627739021791},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1627739021791},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1627739021791},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1627739021791},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1627739021791},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1627739021791},{"_id":"public/medias/banner/2.jpg","hash":"f1472f594c00a3256b64cac766ad0a378670667f","modified":1627739021791},{"_id":"public/medias/banner/5.jpg","hash":"e159172c1d1e99b73a04a8960ca60534183065eb","modified":1627739021791},{"_id":"public/medias/banner/6.jpg","hash":"de78ad42e04500ccd1383e7b6ffe663ce291e742","modified":1627739021791},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1627739021791},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1627739021791},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1627739021791},{"_id":"public/medias/banner/4.jpg","hash":"eccbc172019d7eb44f3df7ddbaf697de916db1f5","modified":1627739021791},{"_id":"public/medias/banner/3.jpg","hash":"8e60fedd689ae611de80fb4f40f1aacea15c79e3","modified":1627739021791},{"_id":"source/_posts/spark-load-to-es.md","hash":"c86da0c2296fc3410db746a37bbff7d334d40291","modified":1627781539522},{"_id":"public/2021/08/01/spark-load-to-es/index.html","hash":"0de5cfd055b9e632aaa58cb2ef26cb1a1830545b","modified":1627827021939},{"_id":"public/archives/2021/08/index.html","hash":"e0a551a6f91ed006d323beaf2b7b40593f410464","modified":1627829803511},{"_id":"public/categories/大数据/index.html","hash":"d18fa9ee99838a0cae7985de726812d87dc80f26","modified":1627829506581},{"_id":"public/tags/spark/index.html","hash":"205580477476aa4bbe72786b6eff54eceae452de","modified":1627829506581},{"_id":"public/tags/es/index.html","hash":"6fcc95de5f51567f5c1b0ae864d24c077758b534","modified":1627829506581},{"_id":"public/tags/大数据/index.html","hash":"16d9a5f5e370e5cbf06bd49b356dd45efd0605c7","modified":1627829506581},{"_id":"source/_posts/colly.md","hash":"0be39f64a795bfdb887b3207451e3d9a15b188b1","modified":1627826998381},{"_id":"public/2021/08/01/colly/index.html","hash":"736da1f74de888b2a067f02804a53d191f82614e","modified":1627828355010},{"_id":"public/tags/colly/index.html","hash":"66a7ff231d742ed63c9cff18d217a99b7c685c56","modified":1627829506581},{"_id":"source/_posts/maven.md","hash":"dfcabed1670aa1f51ca7d07b57421f26f6c91f73","modified":1627828298575},{"_id":"source/_posts/img_1.png","hash":"be83072272064264f3368f73916aa643b6cfe14d","modified":1627827891603},{"_id":"public/categories/工具软件/index.html","hash":"7aa38c8070c1a6cb48f054b4dc497f9bb16b0a9d","modified":1627829506581},{"_id":"public/2021/08/01/maven/index.html","hash":"3b4e1a621b945311cc188eaf3184f6194f20326c","modified":1627829803511},{"_id":"public/tags/java/index.html","hash":"5a7b01bf175b3cd3e8e0f1291f0b17f9cd7fc96e","modified":1627829506581},{"_id":"public/tags/package-manager/index.html","hash":"3b3081879f333e3e2c602011b4e86f4a3e52d67d","modified":1627829506581},{"_id":"public/tags/maven/index.html","hash":"4ad8c2e5d3d8e454c3ed0e6403f4dc749bda8a6b","modified":1627829506581},{"_id":"source/_posts/supervisor.md","hash":"63a9aad836a7a0dfe2f2aa11438c408e56fe7799","modified":1627829794903},{"_id":"public/2021/08/01/supervisor/index.html","hash":"41f1368ccc2bdff4d5cc894ef027e23fb7918664","modified":1627829803511},{"_id":"public/tags/supervisor/index.html","hash":"f42eaf03c0246f0be43058eb6e7852efbc0a97ca","modified":1627829803511},{"_id":"public/tags/源码/index.html","hash":"895c0af1b4827e5f7982054b19bba415dfaa3dae","modified":1627829803511},{"_id":"public/tags/python/index.html","hash":"e7eef93b32029b676a412749029a26535cf76dd8","modified":1627829803511},{"_id":"source/robots.txt","hash":"24f769fd8ecc7b202d24313cd8ffd23fb63c4594","modified":1627830756598},{"_id":"public/baidusitemap.xml","hash":"8a731c9cf796307081b403a66987aec552b242dc","modified":1627830662251},{"_id":"public/sitemap.xml","hash":"445ab8d9ce1cef7db6a64af4786fe3f5e609c741","modified":1627830662251},{"_id":"public/robots.txt","hash":"24f769fd8ecc7b202d24313cd8ffd23fb63c4594","modified":1627830924309},{"_id":"public/baidu_urls.txt","hash":"e54489d9ecd248ded6abf31eefd5e03c3e6a4a6d","modified":1627830924309}],"Category":[{"name":"工具","_id":"ckrrtsc5j0003b6uq6dlfd74k"},{"name":"技术","_id":"ckrrtsc5r000ib6uqg5as4zyq"},{"name":"大数据","_id":"ckrsiz6ml00016guqd276gf34"},{"name":"工具软件","_id":"ckrtasa9n0001dbuq8cri3x1n"}],"Data":[],"Page":[{"title":"404","date":"2021-07-31T01:25:04.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2021-07-31 09:25:04\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2021-07-31T13:00:26.025Z","path":"404/index.html","comments":1,"_id":"ckrrtsc580000b6uq23z28lei","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2021-07-31T01:23:02.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-07-31 09:23:02\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2021-07-31T13:00:26.027Z","path":"about/index.html","comments":1,"_id":"ckrrtsc5i0002b6uq1ijddmna","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"contact","date":"2021-07-31T01:24:05.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2021-07-31 09:24:05\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2021-07-31T13:00:26.028Z","path":"contact/index.html","comments":1,"_id":"ckrrtsc5l0005b6uq20zbdor9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-07-31T01:21:46.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-07-31 09:21:46\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2021-07-31T13:00:26.027Z","path":"categories/index.html","comments":1,"_id":"ckrrtsc5m0006b6uq4fkv74zz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-07-31T01:22:35.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-07-31 09:22:35\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2021-07-31T13:00:26.028Z","path":"tags/index.html","comments":1,"_id":"ckrrtsc5m0007b6uqfxiqbgum","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"(效率工具)程序员必备终端及美化","date":"2021-07-31T09:21:07.000Z","img":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Wbh9jA.jpg","top":true,"hide":false,"cover":true,"coverImg":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/1zZOJy.jpg","toc":true,"mathjax":false,"summary":"mac下终端工具iterm2 + oh my zsh + powerlevel10k","keywords":["mac","zsh","powerlevel10k","dracula"],"_content":"\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/QicdYL.jpg)\n\n作为一个合格的程序员，CLI是必备的技能。 工欲善其事，必先利其器。一个顺手并且提高效率的终端是必须的。 平时很多人会私信或评论中问我关于我的终端相关的内容，今天我整理出来。分享给大家。\n\n#### 需要安装的软件\n> 1. iterm2\n> 2. dracula\n> 3. zsh\n> 3. Oh My ZSH\n> 4. powerlevel10k\n\n\n上面👆给出了需要安装的软件包， 下面就按安装的顺序一个一个介绍\n\n### 一、iterm2\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Wbh9jA.jpg)\n\n这个就不多介绍， 我相信只要是使用mac的程序员，这个都是知道的， 当然，也有一个其他类似的产品。 后面安装的和iterm2没有强依赖。 这只是一个终端， 没有最好，适合你的就是最好的。 顺便提一下， 我自己的💻使用touch bar的， 是支持touch bar，一些很炫的操作可以在touch bar上操作。但是，我一直使用公司的笔记本，使用快捷键进行操作， 效率更高。\n\n[官网](https://www.iterm2.com/)\n\n#### 1. 安装\n1). 方式一\n[下载地址](https://www.iterm2.com/downloads.html)， 下载后，点击安装就可以了\n\n2). 方式二\n```bash\nbrew cask install iterm2   \n```\nbrew使用，这里就不介绍了\n\n\n#### 2. 使用\n[文档](https://www.iterm2.com/documentation.html)\n这里顺便介绍一下，主要是快捷键, 自己对着文档，学习一下， 因为重点不在这。\n`CMD + 单击` 可以实现跳转\n\n### 二、 安装配置dracula主题\n这个也有两种方式\n1. 使用git\n   `git clone https://github.com/dracula/iterm.git`\n2. 直接下载，解压\n   下载地址 [GitHub .zip download](https://github.com/dracula/iterm/archive/master.zip)\n\n*使用主题*\n配置过程如下\n>1. 打开 iTerm2 > Preferences > Profiles > Colors Tab， 选择color\n>2. 点击下面的`Color Presets`,展开\n>3. 选择`import`, 将上面👆下载的文件导入\n>4. 选择`Dracula.itermcolors`文件导入\n>5. 导入以后，重新选择 `Color Presets`，选择 `dracula`就可以了\n    具体如下：\n    ![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/FLOTC9.jpg)\n\n\n\n\n### 三、Oh My ZSH\n[Oh My ZSH]([https://ohmyz.sh/](https://ohmyz.sh/)\n)\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/1zZOJy.jpg)\n\n1. 先安装 zsh\n   下面只给命令\n ```bash\n\n# 安装\nbrew install zsh zsh-completions\n\n# 切换shell\nchsh -s /bin/zsh\n```\n\n2. 安装Oh My ZSH\n   下面选一种\n```bash\n sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n # or\n sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n如果感兴趣，可以看下脚本内容，定义了安装目录什么的，和常见的安装shell没有区别。\n\n3. 关闭iterm2, 然后再打开，就生效了\n4. 配置 一个插件\n   配置在 `.zshrc`文件中，配置很简单\n   可以使用的插件以及描述 [github](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins)\n\n\n### 四、powerlevel10k\n[github地址](https://github.com/romkatv/powerlevel10k)\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/DUuyUe.jpg)\n\n\n1. 安装主题\n   也有很多种方式， 这里使用git\n```bash\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n```\n在 `.zshrc`中配置主题生效，退出， 就可以生效\n```bash\nZSH_THEME=\"powerlevel10k/powerlevel10k\"\n```\n如果你还没有安装字体，那么可以使用下面的命令来安装所需字体。\n一些需要字体安装的文档 [install-a-powerline-font](https://github.com/bhilburn/powerlevel9k/wiki/Install-Instructions#step-2-install-a-powerline-font)\n```bash\n# clone\ngit clone https://github.com/powerline/fonts.git\n# install\ncd fonts\n./install.sh\n# clean-up a bit\ncd ..\nrm -rf fonts\n```\n\n字体安装完毕之后，打开 Shell 你会发现字体依然没有生效，这是因为你没有选择对应的字体。在设置中选择你想要的支持字体。\n如果有一些特殊的图标不能正常显示， 可能需要安装 [awesome-terminal-fonts](https://github.com/gabrielelana/awesome-terminal-fonts)字体\n\n\n还有一些图标，比如github,gitlab, git,linux的一些图标在`/Users/youdi/.oh-my-zsh/custom/themes/powerlevel9k/functions/icons.zsh`中修改。\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Mob8Xk.jpg)\n\n#### 其他\n我使用 `colorls`,是ruby的的工具,\n[安装]([https://github.com/athityakumar/colorls](https://github.com/athityakumar/colorls))\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/vjJGRU.jpg)\n\n另外一个查看性能的工具 `gotop`, 你肯定用过 `top`,`htop`\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/8cEKLj.jpg)\n\n\n[源码]([https://github.com/cjbassi/gotop](https://github.com/cjbassi/gotop)\n), 类似的 top的工具很多，各个语言版本的都有， 我比较喜欢编译型语言的版本。\n","source":"_posts/iterm.md","raw":"---\ntitle: (效率工具)程序员必备终端及美化\ndate: 2021-07-31 17:21:07\nimg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Wbh9jA.jpg\ntop: true\nhide: false\ncover: true\ncoverImg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/1zZOJy.jpg\ntoc: true\nmathjax: false\nsummary: mac下终端工具iterm2 + oh my zsh + powerlevel10k\ncategories: \n- 工具\nkeywords:\n-  mac\n-  zsh\n- powerlevel10k\n- dracula\n\ntags:\n-  mac\n-  zsh\n- powerlevel10k\n- dracula\n    \n---\n\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/QicdYL.jpg)\n\n作为一个合格的程序员，CLI是必备的技能。 工欲善其事，必先利其器。一个顺手并且提高效率的终端是必须的。 平时很多人会私信或评论中问我关于我的终端相关的内容，今天我整理出来。分享给大家。\n\n#### 需要安装的软件\n> 1. iterm2\n> 2. dracula\n> 3. zsh\n> 3. Oh My ZSH\n> 4. powerlevel10k\n\n\n上面👆给出了需要安装的软件包， 下面就按安装的顺序一个一个介绍\n\n### 一、iterm2\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Wbh9jA.jpg)\n\n这个就不多介绍， 我相信只要是使用mac的程序员，这个都是知道的， 当然，也有一个其他类似的产品。 后面安装的和iterm2没有强依赖。 这只是一个终端， 没有最好，适合你的就是最好的。 顺便提一下， 我自己的💻使用touch bar的， 是支持touch bar，一些很炫的操作可以在touch bar上操作。但是，我一直使用公司的笔记本，使用快捷键进行操作， 效率更高。\n\n[官网](https://www.iterm2.com/)\n\n#### 1. 安装\n1). 方式一\n[下载地址](https://www.iterm2.com/downloads.html)， 下载后，点击安装就可以了\n\n2). 方式二\n```bash\nbrew cask install iterm2   \n```\nbrew使用，这里就不介绍了\n\n\n#### 2. 使用\n[文档](https://www.iterm2.com/documentation.html)\n这里顺便介绍一下，主要是快捷键, 自己对着文档，学习一下， 因为重点不在这。\n`CMD + 单击` 可以实现跳转\n\n### 二、 安装配置dracula主题\n这个也有两种方式\n1. 使用git\n   `git clone https://github.com/dracula/iterm.git`\n2. 直接下载，解压\n   下载地址 [GitHub .zip download](https://github.com/dracula/iterm/archive/master.zip)\n\n*使用主题*\n配置过程如下\n>1. 打开 iTerm2 > Preferences > Profiles > Colors Tab， 选择color\n>2. 点击下面的`Color Presets`,展开\n>3. 选择`import`, 将上面👆下载的文件导入\n>4. 选择`Dracula.itermcolors`文件导入\n>5. 导入以后，重新选择 `Color Presets`，选择 `dracula`就可以了\n    具体如下：\n    ![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/FLOTC9.jpg)\n\n\n\n\n### 三、Oh My ZSH\n[Oh My ZSH]([https://ohmyz.sh/](https://ohmyz.sh/)\n)\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/1zZOJy.jpg)\n\n1. 先安装 zsh\n   下面只给命令\n ```bash\n\n# 安装\nbrew install zsh zsh-completions\n\n# 切换shell\nchsh -s /bin/zsh\n```\n\n2. 安装Oh My ZSH\n   下面选一种\n```bash\n sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n # or\n sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\"\n```\n如果感兴趣，可以看下脚本内容，定义了安装目录什么的，和常见的安装shell没有区别。\n\n3. 关闭iterm2, 然后再打开，就生效了\n4. 配置 一个插件\n   配置在 `.zshrc`文件中，配置很简单\n   可以使用的插件以及描述 [github](https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins)\n\n\n### 四、powerlevel10k\n[github地址](https://github.com/romkatv/powerlevel10k)\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/DUuyUe.jpg)\n\n\n1. 安装主题\n   也有很多种方式， 这里使用git\n```bash\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n```\n在 `.zshrc`中配置主题生效，退出， 就可以生效\n```bash\nZSH_THEME=\"powerlevel10k/powerlevel10k\"\n```\n如果你还没有安装字体，那么可以使用下面的命令来安装所需字体。\n一些需要字体安装的文档 [install-a-powerline-font](https://github.com/bhilburn/powerlevel9k/wiki/Install-Instructions#step-2-install-a-powerline-font)\n```bash\n# clone\ngit clone https://github.com/powerline/fonts.git\n# install\ncd fonts\n./install.sh\n# clean-up a bit\ncd ..\nrm -rf fonts\n```\n\n字体安装完毕之后，打开 Shell 你会发现字体依然没有生效，这是因为你没有选择对应的字体。在设置中选择你想要的支持字体。\n如果有一些特殊的图标不能正常显示， 可能需要安装 [awesome-terminal-fonts](https://github.com/gabrielelana/awesome-terminal-fonts)字体\n\n\n还有一些图标，比如github,gitlab, git,linux的一些图标在`/Users/youdi/.oh-my-zsh/custom/themes/powerlevel9k/functions/icons.zsh`中修改。\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Mob8Xk.jpg)\n\n#### 其他\n我使用 `colorls`,是ruby的的工具,\n[安装]([https://github.com/athityakumar/colorls](https://github.com/athityakumar/colorls))\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/vjJGRU.jpg)\n\n另外一个查看性能的工具 `gotop`, 你肯定用过 `top`,`htop`\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/8cEKLj.jpg)\n\n\n[源码]([https://github.com/cjbassi/gotop](https://github.com/cjbassi/gotop)\n), 类似的 top的工具很多，各个语言版本的都有， 我比较喜欢编译型语言的版本。\n","slug":"iterm","published":1,"updated":"2021-07-31T13:00:26.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrrtsc5f0001b6uq7r6l1grp","content":"<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/QicdYL.jpg\"></p>\n<p>作为一个合格的程序员，CLI是必备的技能。 工欲善其事，必先利其器。一个顺手并且提高效率的终端是必须的。 平时很多人会私信或评论中问我关于我的终端相关的内容，今天我整理出来。分享给大家。</p>\n<h4 id=\"需要安装的软件\"><a href=\"#需要安装的软件\" class=\"headerlink\" title=\"需要安装的软件\"></a>需要安装的软件</h4><blockquote>\n<ol>\n<li>iterm2</li>\n<li>dracula</li>\n<li>zsh</li>\n<li>Oh My ZSH</li>\n<li>powerlevel10k</li>\n</ol>\n</blockquote>\n<p>上面👆给出了需要安装的软件包， 下面就按安装的顺序一个一个介绍</p>\n<h3 id=\"一、iterm2\"><a href=\"#一、iterm2\" class=\"headerlink\" title=\"一、iterm2\"></a>一、iterm2</h3><p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Wbh9jA.jpg\"></p>\n<p>这个就不多介绍， 我相信只要是使用mac的程序员，这个都是知道的， 当然，也有一个其他类似的产品。 后面安装的和iterm2没有强依赖。 这只是一个终端， 没有最好，适合你的就是最好的。 顺便提一下， 我自己的💻使用touch bar的， 是支持touch bar，一些很炫的操作可以在touch bar上操作。但是，我一直使用公司的笔记本，使用快捷键进行操作， 效率更高。</p>\n<p><a href=\"https://www.iterm2.com/\">官网</a></p>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h4><p>1). 方式一<br><a href=\"https://www.iterm2.com/downloads.html\">下载地址</a>， 下载后，点击安装就可以了</p>\n<p>2). 方式二</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew cask <span class=\"token function\">install</span> iterm2   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>brew使用，这里就不介绍了</p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h4><p><a href=\"https://www.iterm2.com/documentation.html\">文档</a><br>这里顺便介绍一下，主要是快捷键, 自己对着文档，学习一下， 因为重点不在这。<br><code>CMD + 单击</code> 可以实现跳转</p>\n<h3 id=\"二、-安装配置dracula主题\"><a href=\"#二、-安装配置dracula主题\" class=\"headerlink\" title=\"二、 安装配置dracula主题\"></a>二、 安装配置dracula主题</h3><p>这个也有两种方式</p>\n<ol>\n<li>使用git<br><code>git clone https://github.com/dracula/iterm.git</code></li>\n<li>直接下载，解压<br>下载地址 <a href=\"https://github.com/dracula/iterm/archive/master.zip\">GitHub .zip download</a></li>\n</ol>\n<p><em>使用主题</em><br>配置过程如下</p>\n<blockquote>\n<ol>\n<li>打开 iTerm2 &gt; Preferences &gt; Profiles &gt; Colors Tab， 选择color</li>\n<li>点击下面的<code>Color Presets</code>,展开</li>\n<li>选择<code>import</code>, 将上面👆下载的文件导入</li>\n<li>选择<code>Dracula.itermcolors</code>文件导入</li>\n<li>导入以后，重新选择 <code>Color Presets</code>，选择 <code>dracula</code>就可以了<br> 具体如下：<br> <img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/FLOTC9.jpg\"></li>\n</ol>\n</blockquote>\n<h3 id=\"三、Oh-My-ZSH\"><a href=\"#三、Oh-My-ZSH\" class=\"headerlink\" title=\"三、Oh My ZSH\"></a>三、Oh My ZSH</h3><p><a href=\"%5Bhttps://ohmyz.sh/%5D(https://ohmyz.sh/)\">Oh My ZSH</a><br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/1zZOJy.jpg\"></p>\n<ol>\n<li><p>先安装 zsh<br>下面只给命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token comment\"># 安装</span>\nbrew <span class=\"token function\">install</span> <span class=\"token function\">zsh</span> zsh-completions\n\n<span class=\"token comment\"># 切换shell</span>\nchsh -s /bin/zsh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>安装Oh My ZSH<br>下面选一种</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sh</span> -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span>\n<span class=\"token comment\"># or</span>\n<span class=\"token function\">sh</span> -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">wget</span> https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>如果感兴趣，可以看下脚本内容，定义了安装目录什么的，和常见的安装shell没有区别。</p>\n</li>\n<li><p>关闭iterm2, 然后再打开，就生效了</p>\n</li>\n<li><p>配置 一个插件<br>配置在 <code>.zshrc</code>文件中，配置很简单<br>可以使用的插件以及描述 <a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins\">github</a></p>\n</li>\n</ol>\n<h3 id=\"四、powerlevel10k\"><a href=\"#四、powerlevel10k\" class=\"headerlink\" title=\"四、powerlevel10k\"></a>四、powerlevel10k</h3><p><a href=\"https://github.com/romkatv/powerlevel10k\">github地址</a></p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/DUuyUe.jpg\"></p>\n<ol>\n<li>安装主题<br>也有很多种方式， 这里使用git<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone --depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> https://github.com/romkatv/powerlevel10k.git <span class=\"token variable\">${ZSH_CUSTOM<span class=\"token operator\">:-</span>$HOME<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom}</span>/themes/powerlevel10k<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n在 <code>.zshrc</code>中配置主题生效，退出， 就可以生效<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">ZSH_THEME</span><span class=\"token operator\">=</span><span class=\"token string\">\"powerlevel10k/powerlevel10k\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n如果你还没有安装字体，那么可以使用下面的命令来安装所需字体。<br>一些需要字体安装的文档 <a href=\"https://github.com/bhilburn/powerlevel9k/wiki/Install-Instructions#step-2-install-a-powerline-font\">install-a-powerline-font</a><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># clone</span>\n<span class=\"token function\">git</span> clone https://github.com/powerline/fonts.git\n<span class=\"token comment\"># install</span>\n<span class=\"token builtin class-name\">cd</span> fonts\n./install.sh\n<span class=\"token comment\"># clean-up a bit</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token function\">rm</span> -rf fonts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>字体安装完毕之后，打开 Shell 你会发现字体依然没有生效，这是因为你没有选择对应的字体。在设置中选择你想要的支持字体。<br>如果有一些特殊的图标不能正常显示， 可能需要安装 <a href=\"https://github.com/gabrielelana/awesome-terminal-fonts\">awesome-terminal-fonts</a>字体</p>\n<p>还有一些图标，比如github,gitlab, git,linux的一些图标在<code>/Users/youdi/.oh-my-zsh/custom/themes/powerlevel9k/functions/icons.zsh</code>中修改。</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Mob8Xk.jpg\"></p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>我使用 <code>colorls</code>,是ruby的的工具,<br><a href=\"%5Bhttps://github.com/athityakumar/colorls%5D(https://github.com/athityakumar/colorls)\">安装</a><br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/vjJGRU.jpg\"></p>\n<p>另外一个查看性能的工具 <code>gotop</code>, 你肯定用过 <code>top</code>,<code>htop</code><br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/8cEKLj.jpg\"></p>\n<p><a href=\"%5Bhttps://github.com/cjbassi/gotop%5D(https://github.com/cjbassi/gotop)\">源码</a>, 类似的 top的工具很多，各个语言版本的都有， 我比较喜欢编译型语言的版本。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/QicdYL.jpg\"></p>\n<p>作为一个合格的程序员，CLI是必备的技能。 工欲善其事，必先利其器。一个顺手并且提高效率的终端是必须的。 平时很多人会私信或评论中问我关于我的终端相关的内容，今天我整理出来。分享给大家。</p>\n<h4 id=\"需要安装的软件\"><a href=\"#需要安装的软件\" class=\"headerlink\" title=\"需要安装的软件\"></a>需要安装的软件</h4><blockquote>\n<ol>\n<li>iterm2</li>\n<li>dracula</li>\n<li>zsh</li>\n<li>Oh My ZSH</li>\n<li>powerlevel10k</li>\n</ol>\n</blockquote>\n<p>上面👆给出了需要安装的软件包， 下面就按安装的顺序一个一个介绍</p>\n<h3 id=\"一、iterm2\"><a href=\"#一、iterm2\" class=\"headerlink\" title=\"一、iterm2\"></a>一、iterm2</h3><p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Wbh9jA.jpg\"></p>\n<p>这个就不多介绍， 我相信只要是使用mac的程序员，这个都是知道的， 当然，也有一个其他类似的产品。 后面安装的和iterm2没有强依赖。 这只是一个终端， 没有最好，适合你的就是最好的。 顺便提一下， 我自己的💻使用touch bar的， 是支持touch bar，一些很炫的操作可以在touch bar上操作。但是，我一直使用公司的笔记本，使用快捷键进行操作， 效率更高。</p>\n<p><a href=\"https://www.iterm2.com/\">官网</a></p>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h4><p>1). 方式一<br><a href=\"https://www.iterm2.com/downloads.html\">下载地址</a>， 下载后，点击安装就可以了</p>\n<p>2). 方式二</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew cask <span class=\"token function\">install</span> iterm2   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>brew使用，这里就不介绍了</p>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h4><p><a href=\"https://www.iterm2.com/documentation.html\">文档</a><br>这里顺便介绍一下，主要是快捷键, 自己对着文档，学习一下， 因为重点不在这。<br><code>CMD + 单击</code> 可以实现跳转</p>\n<h3 id=\"二、-安装配置dracula主题\"><a href=\"#二、-安装配置dracula主题\" class=\"headerlink\" title=\"二、 安装配置dracula主题\"></a>二、 安装配置dracula主题</h3><p>这个也有两种方式</p>\n<ol>\n<li>使用git<br><code>git clone https://github.com/dracula/iterm.git</code></li>\n<li>直接下载，解压<br>下载地址 <a href=\"https://github.com/dracula/iterm/archive/master.zip\">GitHub .zip download</a></li>\n</ol>\n<p><em>使用主题</em><br>配置过程如下</p>\n<blockquote>\n<ol>\n<li>打开 iTerm2 &gt; Preferences &gt; Profiles &gt; Colors Tab， 选择color</li>\n<li>点击下面的<code>Color Presets</code>,展开</li>\n<li>选择<code>import</code>, 将上面👆下载的文件导入</li>\n<li>选择<code>Dracula.itermcolors</code>文件导入</li>\n<li>导入以后，重新选择 <code>Color Presets</code>，选择 <code>dracula</code>就可以了<br> 具体如下：<br> <img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/FLOTC9.jpg\"></li>\n</ol>\n</blockquote>\n<h3 id=\"三、Oh-My-ZSH\"><a href=\"#三、Oh-My-ZSH\" class=\"headerlink\" title=\"三、Oh My ZSH\"></a>三、Oh My ZSH</h3><p><a href=\"%5Bhttps://ohmyz.sh/%5D(https://ohmyz.sh/)\">Oh My ZSH</a><br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/1zZOJy.jpg\"></p>\n<ol>\n<li><p>先安装 zsh<br>下面只给命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token comment\"># 安装</span>\nbrew <span class=\"token function\">install</span> <span class=\"token function\">zsh</span> zsh-completions\n\n<span class=\"token comment\"># 切换shell</span>\nchsh -s /bin/zsh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>安装Oh My ZSH<br>下面选一种</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sh</span> -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span>\n<span class=\"token comment\"># or</span>\n<span class=\"token function\">sh</span> -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">wget</span> https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -<span class=\"token variable\">)</span></span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>如果感兴趣，可以看下脚本内容，定义了安装目录什么的，和常见的安装shell没有区别。</p>\n</li>\n<li><p>关闭iterm2, 然后再打开，就生效了</p>\n</li>\n<li><p>配置 一个插件<br>配置在 <code>.zshrc</code>文件中，配置很简单<br>可以使用的插件以及描述 <a href=\"https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins\">github</a></p>\n</li>\n</ol>\n<h3 id=\"四、powerlevel10k\"><a href=\"#四、powerlevel10k\" class=\"headerlink\" title=\"四、powerlevel10k\"></a>四、powerlevel10k</h3><p><a href=\"https://github.com/romkatv/powerlevel10k\">github地址</a></p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/DUuyUe.jpg\"></p>\n<ol>\n<li>安装主题<br>也有很多种方式， 这里使用git<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone --depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> https://github.com/romkatv/powerlevel10k.git <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:-</span>$HOME<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/themes/powerlevel10k<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n在 <code>.zshrc</code>中配置主题生效，退出， 就可以生效<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">ZSH_THEME</span><span class=\"token operator\">=</span><span class=\"token string\">\"powerlevel10k/powerlevel10k\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n如果你还没有安装字体，那么可以使用下面的命令来安装所需字体。<br>一些需要字体安装的文档 <a href=\"https://github.com/bhilburn/powerlevel9k/wiki/Install-Instructions#step-2-install-a-powerline-font\">install-a-powerline-font</a><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># clone</span>\n<span class=\"token function\">git</span> clone https://github.com/powerline/fonts.git\n<span class=\"token comment\"># install</span>\n<span class=\"token builtin class-name\">cd</span> fonts\n./install.sh\n<span class=\"token comment\"># clean-up a bit</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token function\">rm</span> -rf fonts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>字体安装完毕之后，打开 Shell 你会发现字体依然没有生效，这是因为你没有选择对应的字体。在设置中选择你想要的支持字体。<br>如果有一些特殊的图标不能正常显示， 可能需要安装 <a href=\"https://github.com/gabrielelana/awesome-terminal-fonts\">awesome-terminal-fonts</a>字体</p>\n<p>还有一些图标，比如github,gitlab, git,linux的一些图标在<code>/Users/youdi/.oh-my-zsh/custom/themes/powerlevel9k/functions/icons.zsh</code>中修改。</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Mob8Xk.jpg\"></p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>我使用 <code>colorls</code>,是ruby的的工具,<br><a href=\"%5Bhttps://github.com/athityakumar/colorls%5D(https://github.com/athityakumar/colorls)\">安装</a><br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/vjJGRU.jpg\"></p>\n<p>另外一个查看性能的工具 <code>gotop</code>, 你肯定用过 <code>top</code>,<code>htop</code><br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/8cEKLj.jpg\"></p>\n<p><a href=\"%5Bhttps://github.com/cjbassi/gotop%5D(https://github.com/cjbassi/gotop)\">源码</a>, 类似的 top的工具很多，各个语言版本的都有， 我比较喜欢编译型语言的版本。</p>\n"},{"title":"爬虫的\"盗亦有道\"-Robots协议","date":"2021-07-31T13:09:03.000Z","img":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/k6GFvZ.jpg","top":true,"hide":false,"cover":true,"coverImg":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/ik61te.jpg","toc":true,"mathjax":false,"summary":"Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol）","keywords":["爬虫","crawler","robots"],"_content":"\n\n## 网络爬虫的君子协议\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/3tqLVS.jpg)\n\n### 网络爬虫的尺寸\n\n|小规模，数量小，爬去速度不敏感，requests库|中规模，数据规模较大，爬取速度敏感scrapy库|大规模，搜索引擎,爬取速度关键定制开发|\n|-|-|-|\n|爬取网页 玩转网页|爬取网站 爬取系列网站|爬取全网|\n\n\n### 网络爬虫引发的问题\n- 性能骚扰\n- 法律风险\n- 隐私泄露\n\n*网络爬虫的\"性能骚扰\"*\nweb服务器默认接受人类访问，受限于编写水平和目的，网络爬虫将会为web服务器带来巨大的资源的开销。\n*网络爬虫的法律风险*\n服务器上的数据有产权归属，网络爬虫获取数据后牟利将会带来法律的风险。\n*网络爬虫的隐私泄露*\n网络爬虫可能具备突破简单访问的控制能力，获取被保护的数据，从而泄露个人隐私。\n\n### 网络爬虫的限制\n* 来源审查：判断`User-Agent`进行限制，检查来访者HTTP协议头的User-Agent域，只响应浏览器或友好爬虫的访问\n* 发布公告： `Robots`协议， 告知所有的爬虫网站的爬虫策略，要求爬虫遵守。\n\n## Robots协议\n>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取.\n\n根据协议，网站管理员可以在网站域名的根目录下放一个robots.txt 文本文件，里面可以指定不同的网络爬虫能访问的页面和禁止访问的页面，指定的页面由正则表达式表示。网络爬虫在采集这个网站之前，首先获取到这个文件，然后解析到其中的规则，然后根据规则来采集网站的数据。\n\n注意，这个协议的存在更多的是需要网络爬虫去遵守，而起不到防止爬虫的功能。\n\n### 为什么需要Robots协议\n互联网上的网页是通过超级链接互相关联起来的，从而形成了网页的网状结构。爬虫的工作方式就像蜘蛛在网上沿着链接爬来爬去，最基本的流程可以简化如下：\n\n1. 喂给爬虫一堆url，我们称之为种子(seeds)；\n2. 爬虫抓取seeds，解析html网页，抽取其中的超级链接；\n3. 爬虫接着抓取这些新发现的链接指向的网页。\n\n步骤2和步骤3循环往复。\n\n了解了上面的流程就能发现：对爬虫来说网站非常被动，只有老老实实被抓取的份。\n\n所以，对于网站的管理者来说，就存在这样的需求：\n\n某些路径下是个人隐私或者网站管理使用，不想被搜索引擎抓取，比如说日本爱情动作片；\n不喜欢某个搜索引擎，不愿意被他抓取，最有名的就是之前淘宝不希望被百度抓取；\n小网站使用的是公用的虚拟主机，流量有限或者需要付费，希望搜索引擎抓的温柔点；\n某些网页是动态生成的，没有直接的链接指向，但是希望内容被搜索引擎抓取和索引。\n\n网站内容的所有者是网站管理员，搜索引擎应该尊重所有者的意愿，为了满足以上等等，就需要提供一种网站和爬虫进行沟通的途径，给网站管理员表达自己意愿的机会。有需求就有供应，robots协议就此诞生。\n\n#### 案例\n京东的Robots协议\n`https://www.jd.com/robots.txt`\n```javascript\nUser-agent: * \nDisallow: /?* \nDisallow: /pop/*.html \nDisallow: /pinpai/*.html?* \nUser-agent: EtaoSpider \nDisallow: / \nUser-agent: HuihuiSpider \nDisallow: / \nUser-agent: GwdangSpider \nDisallow: / \nUser-agent: WochachaSpider \nDisallow: /\n```\n百度的Robots协议\n`https://www.baidu.com/robots.txt`\n```bash\nUser-agent: Baiduspider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Googlebot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: MSNBot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Baiduspider-image\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: YoudaoBot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou web spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou inst spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou spider2\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou blog\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou News Spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou Orion spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: ChinasoSpider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sosospider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\n\nUser-agent: yisouspider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: EasouSpider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: *\nDisallow: /\n```\n\n上面，`*`代表所有，`/`代表根目录\n\n### Robots协议的写法\n既然网络爬虫在爬取一个网站之前，要先获取到这个文件，然后解析到其中的规则，那么，Robots就必须要有一套通用的语法规则。\n\n最简单的robots.txt只有两条规则：\n\nUser-agent：指定对哪些爬虫生效\nDisallow：指定要屏蔽的网址\n先说User-agent，爬虫抓取时会声明自己的身份，这就是User-agent，没错，就是http协议里的User-agent。robots.txt利用User-agent来区分各个引擎的爬虫，比如说google网页搜索爬虫的User-agent为Googlebot。\n\n可能有读者要问了，我怎么知道爬虫的User-agent是什么?你还可以查相关搜索引擎的资料得到官方的数据，比如说百度的爬虫列表是这样的：\n\n|产品名称|对应User-Agent|\n|-|-|\n|网页搜索|Baiduspider|\n|移动搜索|Baiduspider|\n|图片搜索|Baiduspider-image|\n|视频搜索|Baiduspider-video|\n|新闻搜索|Baiduspider-news|\n|百度搜索|Baiduspider-favo|\n|百度联盟|Baiduspider-cpro|\n|商务搜索|Baiduspider-ads|\n\n\nDisallow 行列出的是要拦截的网页，以正斜线 (/) 开头，可以列出特定的网址或模式。要屏蔽整个网站，使用正斜线即可;要屏蔽某一目录以及其中的所有内容，在目录名后添加正斜线;要屏蔽某个具体的网页，就指出这个网页。\n\n下面介绍一些实例:\n允许所有的robot访问\n```bash\nUser-agent: *\nDisallow:\n```\n\n或者也可以建一个空文件 \"/robots.txt\" file。\n\n禁止爬虫访问所有目录\n```bash\nUser-agent: *\nDisallow: /\n```\n禁止爬虫访问某些目录\n```bash\nUser-agent: *\nDisallow: /a/\nDisallow: /b/\nDisallow: /c/\n```\n禁止某些爬虫访问\n```bash\nUser-agent: BadBot\nDisallow: /\n```\n只允许某个爬虫访问\n```bash\nUser-agent: MangCrawler\nDisallow:\nUser-agent: *\nDisallow: /\n```\n我们再来结合两个真实的范例来学习一下。先看这个例子：\n```bash\nUser-agent: Baiduspider\nDisallow: /\nUser-agent: baiduspider\nDisallow: /\n```\n这个是淘宝网的Robots协议内容，相信你已经看出来了，淘宝网禁止百度的爬虫访问。\n\n再来看一个例子：\n```bash\nUser-agent: *\nDisallow: /?*\nDisallow: /pop/*.html\nUser-agent: EtaoSpider\nDisallow: /\n```\n这个稍微复杂点，京东有2个目录不希望所有的爬虫来抓。同时，京东完全屏蔽了一淘网的蜘蛛（EtaoSpider是一淘网的蜘蛛）。\n\n## Robots协议进阶知识\n**sitemap**\n爬虫会通过网页内部的链接发现新的网页。但是如果没有连接指向的网页怎么办?或者用户输入条件生成的动态网页怎么办?能否让网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页?这就是sitemap，最简单的 Sitepmap 形式就是 XML 文件，在其中列出网站中的网址以及关于每个网址的其他数据(上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度等等)，利用这些信息搜索引擎可以更加智能地抓取网站内容。\n\n新的问题来了，爬虫怎么知道这个网站有没有提供sitemap文件，或者说网站管理员生成了sitemap，(可能是多个文件)，爬虫怎么知道放在哪里呢?\n\n由于robots.txt的位置是固定的，于是大家就想到了把sitemap的位置信息放在robots.txt里。这就成为robots.txt里的新成员了。\n\n节选一段google robots.txt：\n```bash\nSitemap: http://www.gstatic.com/cultur...\nSitemap: http://www.google.com/hostedn...\n```\n插一句，考虑到一个网站的网页众多，sitemap人工维护不太靠谱，google提供了工具可以自动生成sitemap。\n\n**meta tag**\n其实严格来说这部分内容不属于robots.txt。\n\nrobots.txt的初衷是为了让网站管理员管理可以出现在搜索引擎里的网站内容。但是，即使使用 robots.txt 文件让爬虫无法抓取这些内容，搜索引擎也可以通过其他方式找到这些网页并将它添加到索引中。例如，其他网站仍可能链接到该网站。因此，网页网址及其他公开的信息(如指向相关网站的链接中的定位文字或开放式目录管理系统中的标题)有可能会出现在引擎的搜索结果中。如果想彻底对搜索引擎隐身那咋整呢?答案是：元标记，即meta tag。\n\n比如要完全阻止一个网页的内容列在搜索引擎索引中(即使有其他网站链接到此网页)，可使用 noindex 元标记。只要搜索引擎查看该网页，便会看到 noindex 元标记并阻止该网页显示在索引中，这里注意noindex元标记提供的是一种逐页控制对网站的访问的方式。\n\n要防止所有搜索引擎将网站中的网页编入索引，在网页的部分添加：\n```vbscript-html\n<meta name=\"robots\" content=\"noindex\">\n```\n这里的name取值可以设置为某个搜索引擎的User-agent从而指定屏蔽某一个搜索引擎。\n\n除了noindex外，还有其他元标记，比如说nofollow，禁止爬虫从此页面中跟踪链接。详细信息可以参考Google支持的元标记，这里提一句：noindex和nofollow在HTML 4.01规范里有描述，但是其他tag的在不同引擎支持到什么程度各不相同，还请读者自行查阅各个引擎的说明文档。\n\n**Crawl-delay**\n除了控制哪些可以抓哪些不能抓之外，robots.txt还可以用来控制爬虫抓取的速率。如何做到的呢?通过设置爬虫在两次抓取之间等待的秒数。这种操作可以进行缓解服务器压力。\n```bash\nCrawl-delay:5\n```\n表示本次抓取后下一次抓取前需要等待5秒。\n\n注意：google已经不支持这种方式了，在webmaster tools里提供了一个功能可以更直观的控制抓取速率。\n\n这里插一句题外话，几年前曾经有一段时间robots.txt还支持复杂的参数:Visit-time，只有在visit-time指定的时间段里，爬虫才可以访问;Request-rate: 用来限制URL的读取频率，用于控制不同的时间段采用不同的抓取速率。后来估计支持的人太少，就渐渐的废掉了，目前google和baidu都已经不支持这个规则了，其他小的引擎公司貌似从来都没有支持过。\n\n### Robots协议的遵守方式\n网络爬虫：\n自动或人工识别rotbots.txt，再进行内容爬取\n约束性:\nRobots协议是建议但非约束性，网络爬虫可以不遵守，但存在法律风险。\n\n### 对Robots协议的理解\n|访问量小:可以遵守<br>访问量较大：建议遵守|非商业且偶尔:建议遵守<br>商业利益:必须遵守|必须遵守|\n|-|-|-|\n|爬取网页 玩转网页|爬取网站 爬取系列网站|爬取全网|\n`原则`：类人行为可以不参考Robots协议。\n\n### 防君子不防小人（君子协议）\nRobots协议不是什么技术壁垒，而只是一种互相尊重的协议，好比私家花园的门口挂着“闲人免进”，尊重者绕道而行，不尊重者依然可以推门而入。目前，Robots协议在实际使用中，还存在一些问题。\n\n### 缓存\nrobots.txt本身也是需要抓取的，出于效率考虑，一般爬虫不会每次抓取网站网页前都抓一下robots.txt，加上robots.txt更新不频繁，内容需要解析。通常爬虫的做法是先抓取一次，解析后缓存下来，而且是相当长的时间。假设网站管理员更新了robots.txt，修改了某些规则，但是对爬虫来说并不会立刻生效，只有当爬虫下次抓取robots.txt之后才能看到最新的内容。尴尬的是，爬虫下次抓取robots.txt的时间并不是由网站管理员控制的。当然，有些搜索引擎提供了web 工具可以让网站管理员通知搜索引擎那个url发生了变化，建议重新抓取。注意，此处是建议，即使你通知了搜索引擎，搜索引擎何时抓取仍然是不确定的，只是比完全不通知要好点。至于好多少，那就看搜索引擎的良心和技术能力了。\n\n### ignore\n不知是无意还是有意，反正有些爬虫不太遵守或者完全忽略robots.txt，不排除开发人员能力的问题，比如说根本不知道robots.txt。另外，本身robots.txt不是一种强制措施，如果网站有数据需要保密，必需采取技术措施，比如说：用户验证，加密，ip拦截，访问频率控制等。\n\n\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/nGoP78.jpg)\n\n### 恶意爬虫\n在互联网世界中，每天都有不计其数的爬虫在日夜不息地爬取数据，其中恶意爬虫的数量甚至高于非恶意爬虫。遵守Robots协议的爬虫才是好爬虫，但是并不是每个爬虫都会主动遵守Robots协议。\n\n恶意爬虫可以带来很多潜在威胁，比如电商网站的商品信息被爬取可能会被竞争对手利用，过多的爬虫还会占用带宽资源、甚至导致网站宕机。\n\n反恶意爬虫是一件漫长而艰巨的任务，如果依靠自身实力难以解决，可以借助岂安科技的业务风险分析平台 WARDEN 来反恶意爬虫，根据自己的需求来定制功能。\n","source":"_posts/robots-protocol.md","raw":"---\ntitle: 爬虫的\"盗亦有道\"-Robots协议\ndate: 2021-07-31 21:09:03\nimg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/k6GFvZ.jpg\ntop: true\nhide: false\ncover: true\ncoverImg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/ik61te.jpg\ntoc: true\nmathjax: false\nsummary: Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol）\nkeywords:\n-  爬虫\n-  crawler\n-  robots \ncategories: 技术\ntags:\n-  crawler\n-  爬虫\n-  robots\n---\n\n\n## 网络爬虫的君子协议\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/3tqLVS.jpg)\n\n### 网络爬虫的尺寸\n\n|小规模，数量小，爬去速度不敏感，requests库|中规模，数据规模较大，爬取速度敏感scrapy库|大规模，搜索引擎,爬取速度关键定制开发|\n|-|-|-|\n|爬取网页 玩转网页|爬取网站 爬取系列网站|爬取全网|\n\n\n### 网络爬虫引发的问题\n- 性能骚扰\n- 法律风险\n- 隐私泄露\n\n*网络爬虫的\"性能骚扰\"*\nweb服务器默认接受人类访问，受限于编写水平和目的，网络爬虫将会为web服务器带来巨大的资源的开销。\n*网络爬虫的法律风险*\n服务器上的数据有产权归属，网络爬虫获取数据后牟利将会带来法律的风险。\n*网络爬虫的隐私泄露*\n网络爬虫可能具备突破简单访问的控制能力，获取被保护的数据，从而泄露个人隐私。\n\n### 网络爬虫的限制\n* 来源审查：判断`User-Agent`进行限制，检查来访者HTTP协议头的User-Agent域，只响应浏览器或友好爬虫的访问\n* 发布公告： `Robots`协议， 告知所有的爬虫网站的爬虫策略，要求爬虫遵守。\n\n## Robots协议\n>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取.\n\n根据协议，网站管理员可以在网站域名的根目录下放一个robots.txt 文本文件，里面可以指定不同的网络爬虫能访问的页面和禁止访问的页面，指定的页面由正则表达式表示。网络爬虫在采集这个网站之前，首先获取到这个文件，然后解析到其中的规则，然后根据规则来采集网站的数据。\n\n注意，这个协议的存在更多的是需要网络爬虫去遵守，而起不到防止爬虫的功能。\n\n### 为什么需要Robots协议\n互联网上的网页是通过超级链接互相关联起来的，从而形成了网页的网状结构。爬虫的工作方式就像蜘蛛在网上沿着链接爬来爬去，最基本的流程可以简化如下：\n\n1. 喂给爬虫一堆url，我们称之为种子(seeds)；\n2. 爬虫抓取seeds，解析html网页，抽取其中的超级链接；\n3. 爬虫接着抓取这些新发现的链接指向的网页。\n\n步骤2和步骤3循环往复。\n\n了解了上面的流程就能发现：对爬虫来说网站非常被动，只有老老实实被抓取的份。\n\n所以，对于网站的管理者来说，就存在这样的需求：\n\n某些路径下是个人隐私或者网站管理使用，不想被搜索引擎抓取，比如说日本爱情动作片；\n不喜欢某个搜索引擎，不愿意被他抓取，最有名的就是之前淘宝不希望被百度抓取；\n小网站使用的是公用的虚拟主机，流量有限或者需要付费，希望搜索引擎抓的温柔点；\n某些网页是动态生成的，没有直接的链接指向，但是希望内容被搜索引擎抓取和索引。\n\n网站内容的所有者是网站管理员，搜索引擎应该尊重所有者的意愿，为了满足以上等等，就需要提供一种网站和爬虫进行沟通的途径，给网站管理员表达自己意愿的机会。有需求就有供应，robots协议就此诞生。\n\n#### 案例\n京东的Robots协议\n`https://www.jd.com/robots.txt`\n```javascript\nUser-agent: * \nDisallow: /?* \nDisallow: /pop/*.html \nDisallow: /pinpai/*.html?* \nUser-agent: EtaoSpider \nDisallow: / \nUser-agent: HuihuiSpider \nDisallow: / \nUser-agent: GwdangSpider \nDisallow: / \nUser-agent: WochachaSpider \nDisallow: /\n```\n百度的Robots协议\n`https://www.baidu.com/robots.txt`\n```bash\nUser-agent: Baiduspider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Googlebot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: MSNBot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Baiduspider-image\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: YoudaoBot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou web spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou inst spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou spider2\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou blog\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou News Spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou Orion spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: ChinasoSpider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sosospider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\n\nUser-agent: yisouspider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: EasouSpider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: *\nDisallow: /\n```\n\n上面，`*`代表所有，`/`代表根目录\n\n### Robots协议的写法\n既然网络爬虫在爬取一个网站之前，要先获取到这个文件，然后解析到其中的规则，那么，Robots就必须要有一套通用的语法规则。\n\n最简单的robots.txt只有两条规则：\n\nUser-agent：指定对哪些爬虫生效\nDisallow：指定要屏蔽的网址\n先说User-agent，爬虫抓取时会声明自己的身份，这就是User-agent，没错，就是http协议里的User-agent。robots.txt利用User-agent来区分各个引擎的爬虫，比如说google网页搜索爬虫的User-agent为Googlebot。\n\n可能有读者要问了，我怎么知道爬虫的User-agent是什么?你还可以查相关搜索引擎的资料得到官方的数据，比如说百度的爬虫列表是这样的：\n\n|产品名称|对应User-Agent|\n|-|-|\n|网页搜索|Baiduspider|\n|移动搜索|Baiduspider|\n|图片搜索|Baiduspider-image|\n|视频搜索|Baiduspider-video|\n|新闻搜索|Baiduspider-news|\n|百度搜索|Baiduspider-favo|\n|百度联盟|Baiduspider-cpro|\n|商务搜索|Baiduspider-ads|\n\n\nDisallow 行列出的是要拦截的网页，以正斜线 (/) 开头，可以列出特定的网址或模式。要屏蔽整个网站，使用正斜线即可;要屏蔽某一目录以及其中的所有内容，在目录名后添加正斜线;要屏蔽某个具体的网页，就指出这个网页。\n\n下面介绍一些实例:\n允许所有的robot访问\n```bash\nUser-agent: *\nDisallow:\n```\n\n或者也可以建一个空文件 \"/robots.txt\" file。\n\n禁止爬虫访问所有目录\n```bash\nUser-agent: *\nDisallow: /\n```\n禁止爬虫访问某些目录\n```bash\nUser-agent: *\nDisallow: /a/\nDisallow: /b/\nDisallow: /c/\n```\n禁止某些爬虫访问\n```bash\nUser-agent: BadBot\nDisallow: /\n```\n只允许某个爬虫访问\n```bash\nUser-agent: MangCrawler\nDisallow:\nUser-agent: *\nDisallow: /\n```\n我们再来结合两个真实的范例来学习一下。先看这个例子：\n```bash\nUser-agent: Baiduspider\nDisallow: /\nUser-agent: baiduspider\nDisallow: /\n```\n这个是淘宝网的Robots协议内容，相信你已经看出来了，淘宝网禁止百度的爬虫访问。\n\n再来看一个例子：\n```bash\nUser-agent: *\nDisallow: /?*\nDisallow: /pop/*.html\nUser-agent: EtaoSpider\nDisallow: /\n```\n这个稍微复杂点，京东有2个目录不希望所有的爬虫来抓。同时，京东完全屏蔽了一淘网的蜘蛛（EtaoSpider是一淘网的蜘蛛）。\n\n## Robots协议进阶知识\n**sitemap**\n爬虫会通过网页内部的链接发现新的网页。但是如果没有连接指向的网页怎么办?或者用户输入条件生成的动态网页怎么办?能否让网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页?这就是sitemap，最简单的 Sitepmap 形式就是 XML 文件，在其中列出网站中的网址以及关于每个网址的其他数据(上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度等等)，利用这些信息搜索引擎可以更加智能地抓取网站内容。\n\n新的问题来了，爬虫怎么知道这个网站有没有提供sitemap文件，或者说网站管理员生成了sitemap，(可能是多个文件)，爬虫怎么知道放在哪里呢?\n\n由于robots.txt的位置是固定的，于是大家就想到了把sitemap的位置信息放在robots.txt里。这就成为robots.txt里的新成员了。\n\n节选一段google robots.txt：\n```bash\nSitemap: http://www.gstatic.com/cultur...\nSitemap: http://www.google.com/hostedn...\n```\n插一句，考虑到一个网站的网页众多，sitemap人工维护不太靠谱，google提供了工具可以自动生成sitemap。\n\n**meta tag**\n其实严格来说这部分内容不属于robots.txt。\n\nrobots.txt的初衷是为了让网站管理员管理可以出现在搜索引擎里的网站内容。但是，即使使用 robots.txt 文件让爬虫无法抓取这些内容，搜索引擎也可以通过其他方式找到这些网页并将它添加到索引中。例如，其他网站仍可能链接到该网站。因此，网页网址及其他公开的信息(如指向相关网站的链接中的定位文字或开放式目录管理系统中的标题)有可能会出现在引擎的搜索结果中。如果想彻底对搜索引擎隐身那咋整呢?答案是：元标记，即meta tag。\n\n比如要完全阻止一个网页的内容列在搜索引擎索引中(即使有其他网站链接到此网页)，可使用 noindex 元标记。只要搜索引擎查看该网页，便会看到 noindex 元标记并阻止该网页显示在索引中，这里注意noindex元标记提供的是一种逐页控制对网站的访问的方式。\n\n要防止所有搜索引擎将网站中的网页编入索引，在网页的部分添加：\n```vbscript-html\n<meta name=\"robots\" content=\"noindex\">\n```\n这里的name取值可以设置为某个搜索引擎的User-agent从而指定屏蔽某一个搜索引擎。\n\n除了noindex外，还有其他元标记，比如说nofollow，禁止爬虫从此页面中跟踪链接。详细信息可以参考Google支持的元标记，这里提一句：noindex和nofollow在HTML 4.01规范里有描述，但是其他tag的在不同引擎支持到什么程度各不相同，还请读者自行查阅各个引擎的说明文档。\n\n**Crawl-delay**\n除了控制哪些可以抓哪些不能抓之外，robots.txt还可以用来控制爬虫抓取的速率。如何做到的呢?通过设置爬虫在两次抓取之间等待的秒数。这种操作可以进行缓解服务器压力。\n```bash\nCrawl-delay:5\n```\n表示本次抓取后下一次抓取前需要等待5秒。\n\n注意：google已经不支持这种方式了，在webmaster tools里提供了一个功能可以更直观的控制抓取速率。\n\n这里插一句题外话，几年前曾经有一段时间robots.txt还支持复杂的参数:Visit-time，只有在visit-time指定的时间段里，爬虫才可以访问;Request-rate: 用来限制URL的读取频率，用于控制不同的时间段采用不同的抓取速率。后来估计支持的人太少，就渐渐的废掉了，目前google和baidu都已经不支持这个规则了，其他小的引擎公司貌似从来都没有支持过。\n\n### Robots协议的遵守方式\n网络爬虫：\n自动或人工识别rotbots.txt，再进行内容爬取\n约束性:\nRobots协议是建议但非约束性，网络爬虫可以不遵守，但存在法律风险。\n\n### 对Robots协议的理解\n|访问量小:可以遵守<br>访问量较大：建议遵守|非商业且偶尔:建议遵守<br>商业利益:必须遵守|必须遵守|\n|-|-|-|\n|爬取网页 玩转网页|爬取网站 爬取系列网站|爬取全网|\n`原则`：类人行为可以不参考Robots协议。\n\n### 防君子不防小人（君子协议）\nRobots协议不是什么技术壁垒，而只是一种互相尊重的协议，好比私家花园的门口挂着“闲人免进”，尊重者绕道而行，不尊重者依然可以推门而入。目前，Robots协议在实际使用中，还存在一些问题。\n\n### 缓存\nrobots.txt本身也是需要抓取的，出于效率考虑，一般爬虫不会每次抓取网站网页前都抓一下robots.txt，加上robots.txt更新不频繁，内容需要解析。通常爬虫的做法是先抓取一次，解析后缓存下来，而且是相当长的时间。假设网站管理员更新了robots.txt，修改了某些规则，但是对爬虫来说并不会立刻生效，只有当爬虫下次抓取robots.txt之后才能看到最新的内容。尴尬的是，爬虫下次抓取robots.txt的时间并不是由网站管理员控制的。当然，有些搜索引擎提供了web 工具可以让网站管理员通知搜索引擎那个url发生了变化，建议重新抓取。注意，此处是建议，即使你通知了搜索引擎，搜索引擎何时抓取仍然是不确定的，只是比完全不通知要好点。至于好多少，那就看搜索引擎的良心和技术能力了。\n\n### ignore\n不知是无意还是有意，反正有些爬虫不太遵守或者完全忽略robots.txt，不排除开发人员能力的问题，比如说根本不知道robots.txt。另外，本身robots.txt不是一种强制措施，如果网站有数据需要保密，必需采取技术措施，比如说：用户验证，加密，ip拦截，访问频率控制等。\n\n\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/nGoP78.jpg)\n\n### 恶意爬虫\n在互联网世界中，每天都有不计其数的爬虫在日夜不息地爬取数据，其中恶意爬虫的数量甚至高于非恶意爬虫。遵守Robots协议的爬虫才是好爬虫，但是并不是每个爬虫都会主动遵守Robots协议。\n\n恶意爬虫可以带来很多潜在威胁，比如电商网站的商品信息被爬取可能会被竞争对手利用，过多的爬虫还会占用带宽资源、甚至导致网站宕机。\n\n反恶意爬虫是一件漫长而艰巨的任务，如果依靠自身实力难以解决，可以借助岂安科技的业务风险分析平台 WARDEN 来反恶意爬虫，根据自己的需求来定制功能。\n","slug":"robots-protocol","published":1,"updated":"2021-07-31T13:36:55.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrrtsc5p000gb6uqdv3q86bi","content":"<h2 id=\"网络爬虫的君子协议\"><a href=\"#网络爬虫的君子协议\" class=\"headerlink\" title=\"网络爬虫的君子协议\"></a>网络爬虫的君子协议</h2><p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/3tqLVS.jpg\"></p>\n<h3 id=\"网络爬虫的尺寸\"><a href=\"#网络爬虫的尺寸\" class=\"headerlink\" title=\"网络爬虫的尺寸\"></a>网络爬虫的尺寸</h3><table>\n<thead>\n<tr>\n<th>小规模，数量小，爬去速度不敏感，requests库</th>\n<th>中规模，数据规模较大，爬取速度敏感scrapy库</th>\n<th>大规模，搜索引擎,爬取速度关键定制开发</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>爬取网页 玩转网页</td>\n<td>爬取网站 爬取系列网站</td>\n<td>爬取全网</td>\n</tr>\n</tbody></table>\n<h3 id=\"网络爬虫引发的问题\"><a href=\"#网络爬虫引发的问题\" class=\"headerlink\" title=\"网络爬虫引发的问题\"></a>网络爬虫引发的问题</h3><ul>\n<li>性能骚扰</li>\n<li>法律风险</li>\n<li>隐私泄露</li>\n</ul>\n<p><em>网络爬虫的”性能骚扰”</em><br>web服务器默认接受人类访问，受限于编写水平和目的，网络爬虫将会为web服务器带来巨大的资源的开销。<br><em>网络爬虫的法律风险</em><br>服务器上的数据有产权归属，网络爬虫获取数据后牟利将会带来法律的风险。<br><em>网络爬虫的隐私泄露</em><br>网络爬虫可能具备突破简单访问的控制能力，获取被保护的数据，从而泄露个人隐私。</p>\n<h3 id=\"网络爬虫的限制\"><a href=\"#网络爬虫的限制\" class=\"headerlink\" title=\"网络爬虫的限制\"></a>网络爬虫的限制</h3><ul>\n<li>来源审查：判断<code>User-Agent</code>进行限制，检查来访者HTTP协议头的User-Agent域，只响应浏览器或友好爬虫的访问</li>\n<li>发布公告： <code>Robots</code>协议， 告知所有的爬虫网站的爬虫策略，要求爬虫遵守。</li>\n</ul>\n<h2 id=\"Robots协议\"><a href=\"#Robots协议\" class=\"headerlink\" title=\"Robots协议\"></a>Robots协议</h2><blockquote>\n<p>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取.</p>\n</blockquote>\n<p>根据协议，网站管理员可以在网站域名的根目录下放一个robots.txt 文本文件，里面可以指定不同的网络爬虫能访问的页面和禁止访问的页面，指定的页面由正则表达式表示。网络爬虫在采集这个网站之前，首先获取到这个文件，然后解析到其中的规则，然后根据规则来采集网站的数据。</p>\n<p>注意，这个协议的存在更多的是需要网络爬虫去遵守，而起不到防止爬虫的功能。</p>\n<h3 id=\"为什么需要Robots协议\"><a href=\"#为什么需要Robots协议\" class=\"headerlink\" title=\"为什么需要Robots协议\"></a>为什么需要Robots协议</h3><p>互联网上的网页是通过超级链接互相关联起来的，从而形成了网页的网状结构。爬虫的工作方式就像蜘蛛在网上沿着链接爬来爬去，最基本的流程可以简化如下：</p>\n<ol>\n<li>喂给爬虫一堆url，我们称之为种子(seeds)；</li>\n<li>爬虫抓取seeds，解析html网页，抽取其中的超级链接；</li>\n<li>爬虫接着抓取这些新发现的链接指向的网页。</li>\n</ol>\n<p>步骤2和步骤3循环往复。</p>\n<p>了解了上面的流程就能发现：对爬虫来说网站非常被动，只有老老实实被抓取的份。</p>\n<p>所以，对于网站的管理者来说，就存在这样的需求：</p>\n<p>某些路径下是个人隐私或者网站管理使用，不想被搜索引擎抓取，比如说日本爱情动作片；<br>不喜欢某个搜索引擎，不愿意被他抓取，最有名的就是之前淘宝不希望被百度抓取；<br>小网站使用的是公用的虚拟主机，流量有限或者需要付费，希望搜索引擎抓的温柔点；<br>某些网页是动态生成的，没有直接的链接指向，但是希望内容被搜索引擎抓取和索引。</p>\n<p>网站内容的所有者是网站管理员，搜索引擎应该尊重所有者的意愿，为了满足以上等等，就需要提供一种网站和爬虫进行沟通的途径，给网站管理员表达自己意愿的机会。有需求就有供应，robots协议就此诞生。</p>\n<h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><p>京东的Robots协议<br><code>https://www.jd.com/robots.txt</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">User<span class=\"token operator\">-</span>agent<span class=\"token operator\">:</span> <span class=\"token operator\">*</span> \nDisallow<span class=\"token operator\">:</span> <span class=\"token operator\">/</span><span class=\"token operator\">?</span><span class=\"token operator\">*</span> \nDisallow<span class=\"token operator\">:</span> <span class=\"token operator\">/</span>pop<span class=\"token comment\">/*.html \nDisallow: /pinpai/*.html?* \nUser-agent: EtaoSpider \nDisallow: / \nUser-agent: HuihuiSpider \nDisallow: / \nUser-agent: GwdangSpider \nDisallow: / \nUser-agent: WochachaSpider \nDisallow: /</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>百度的Robots协议<br><code>https://www.baidu.com/robots.txt</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: Baiduspider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Googlebot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: MSNBot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Baiduspider-image\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: YoudaoBot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou web spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou inst spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou spider2\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou blog\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou News Spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou Orion spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: ChinasoSpider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sosospider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\n\nUser-agent: yisouspider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: EasouSpider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: *\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面，<code>*</code>代表所有，<code>/</code>代表根目录</p>\n<h3 id=\"Robots协议的写法\"><a href=\"#Robots协议的写法\" class=\"headerlink\" title=\"Robots协议的写法\"></a>Robots协议的写法</h3><p>既然网络爬虫在爬取一个网站之前，要先获取到这个文件，然后解析到其中的规则，那么，Robots就必须要有一套通用的语法规则。</p>\n<p>最简单的robots.txt只有两条规则：</p>\n<p>User-agent：指定对哪些爬虫生效<br>Disallow：指定要屏蔽的网址<br>先说User-agent，爬虫抓取时会声明自己的身份，这就是User-agent，没错，就是http协议里的User-agent。robots.txt利用User-agent来区分各个引擎的爬虫，比如说google网页搜索爬虫的User-agent为Googlebot。</p>\n<p>可能有读者要问了，我怎么知道爬虫的User-agent是什么?你还可以查相关搜索引擎的资料得到官方的数据，比如说百度的爬虫列表是这样的：</p>\n<table>\n<thead>\n<tr>\n<th>产品名称</th>\n<th>对应User-Agent</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>网页搜索</td>\n<td>Baiduspider</td>\n</tr>\n<tr>\n<td>移动搜索</td>\n<td>Baiduspider</td>\n</tr>\n<tr>\n<td>图片搜索</td>\n<td>Baiduspider-image</td>\n</tr>\n<tr>\n<td>视频搜索</td>\n<td>Baiduspider-video</td>\n</tr>\n<tr>\n<td>新闻搜索</td>\n<td>Baiduspider-news</td>\n</tr>\n<tr>\n<td>百度搜索</td>\n<td>Baiduspider-favo</td>\n</tr>\n<tr>\n<td>百度联盟</td>\n<td>Baiduspider-cpro</td>\n</tr>\n<tr>\n<td>商务搜索</td>\n<td>Baiduspider-ads</td>\n</tr>\n</tbody></table>\n<p>Disallow 行列出的是要拦截的网页，以正斜线 (/) 开头，可以列出特定的网址或模式。要屏蔽整个网站，使用正斜线即可;要屏蔽某一目录以及其中的所有内容，在目录名后添加正斜线;要屏蔽某个具体的网页，就指出这个网页。</p>\n<p>下面介绍一些实例:<br>允许所有的robot访问</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: *\nDisallow:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>或者也可以建一个空文件 “/robots.txt” file。</p>\n<p>禁止爬虫访问所有目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: *\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>禁止爬虫访问某些目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: *\nDisallow: /a/\nDisallow: /b/\nDisallow: /c/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>禁止某些爬虫访问</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: BadBot\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>只允许某个爬虫访问</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: MangCrawler\nDisallow:\nUser-agent: *\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们再来结合两个真实的范例来学习一下。先看这个例子：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: Baiduspider\nDisallow: /\nUser-agent: baiduspider\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个是淘宝网的Robots协议内容，相信你已经看出来了，淘宝网禁止百度的爬虫访问。</p>\n<p>再来看一个例子：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: *\nDisallow: /?*\nDisallow: /pop/*.html\nUser-agent: EtaoSpider\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个稍微复杂点，京东有2个目录不希望所有的爬虫来抓。同时，京东完全屏蔽了一淘网的蜘蛛（EtaoSpider是一淘网的蜘蛛）。</p>\n<h2 id=\"Robots协议进阶知识\"><a href=\"#Robots协议进阶知识\" class=\"headerlink\" title=\"Robots协议进阶知识\"></a>Robots协议进阶知识</h2><p><strong>sitemap</strong><br>爬虫会通过网页内部的链接发现新的网页。但是如果没有连接指向的网页怎么办?或者用户输入条件生成的动态网页怎么办?能否让网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页?这就是sitemap，最简单的 Sitepmap 形式就是 XML 文件，在其中列出网站中的网址以及关于每个网址的其他数据(上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度等等)，利用这些信息搜索引擎可以更加智能地抓取网站内容。</p>\n<p>新的问题来了，爬虫怎么知道这个网站有没有提供sitemap文件，或者说网站管理员生成了sitemap，(可能是多个文件)，爬虫怎么知道放在哪里呢?</p>\n<p>由于robots.txt的位置是固定的，于是大家就想到了把sitemap的位置信息放在robots.txt里。这就成为robots.txt里的新成员了。</p>\n<p>节选一段google robots.txt：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Sitemap: http://www.gstatic.com/cultur<span class=\"token punctuation\">..</span>.\nSitemap: http://www.google.com/hostedn<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>插一句，考虑到一个网站的网页众多，sitemap人工维护不太靠谱，google提供了工具可以自动生成sitemap。</p>\n<p><strong>meta tag</strong><br>其实严格来说这部分内容不属于robots.txt。</p>\n<p>robots.txt的初衷是为了让网站管理员管理可以出现在搜索引擎里的网站内容。但是，即使使用 robots.txt 文件让爬虫无法抓取这些内容，搜索引擎也可以通过其他方式找到这些网页并将它添加到索引中。例如，其他网站仍可能链接到该网站。因此，网页网址及其他公开的信息(如指向相关网站的链接中的定位文字或开放式目录管理系统中的标题)有可能会出现在引擎的搜索结果中。如果想彻底对搜索引擎隐身那咋整呢?答案是：元标记，即meta tag。</p>\n<p>比如要完全阻止一个网页的内容列在搜索引擎索引中(即使有其他网站链接到此网页)，可使用 noindex 元标记。只要搜索引擎查看该网页，便会看到 noindex 元标记并阻止该网页显示在索引中，这里注意noindex元标记提供的是一种逐页控制对网站的访问的方式。</p>\n<p>要防止所有搜索引擎将网站中的网页编入索引，在网页的部分添加：</p>\n<pre class=\"line-numbers language-vbscript-html\" data-language=\"vbscript-html\"><code class=\"language-vbscript-html\">&lt;meta name=\"robots\" content=\"noindex\"&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这里的name取值可以设置为某个搜索引擎的User-agent从而指定屏蔽某一个搜索引擎。</p>\n<p>除了noindex外，还有其他元标记，比如说nofollow，禁止爬虫从此页面中跟踪链接。详细信息可以参考Google支持的元标记，这里提一句：noindex和nofollow在HTML 4.01规范里有描述，但是其他tag的在不同引擎支持到什么程度各不相同，还请读者自行查阅各个引擎的说明文档。</p>\n<p><strong>Crawl-delay</strong><br>除了控制哪些可以抓哪些不能抓之外，robots.txt还可以用来控制爬虫抓取的速率。如何做到的呢?通过设置爬虫在两次抓取之间等待的秒数。这种操作可以进行缓解服务器压力。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Crawl-delay:5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>表示本次抓取后下一次抓取前需要等待5秒。</p>\n<p>注意：google已经不支持这种方式了，在webmaster tools里提供了一个功能可以更直观的控制抓取速率。</p>\n<p>这里插一句题外话，几年前曾经有一段时间robots.txt还支持复杂的参数:Visit-time，只有在visit-time指定的时间段里，爬虫才可以访问;Request-rate: 用来限制URL的读取频率，用于控制不同的时间段采用不同的抓取速率。后来估计支持的人太少，就渐渐的废掉了，目前google和baidu都已经不支持这个规则了，其他小的引擎公司貌似从来都没有支持过。</p>\n<h3 id=\"Robots协议的遵守方式\"><a href=\"#Robots协议的遵守方式\" class=\"headerlink\" title=\"Robots协议的遵守方式\"></a>Robots协议的遵守方式</h3><p>网络爬虫：<br>自动或人工识别rotbots.txt，再进行内容爬取<br>约束性:<br>Robots协议是建议但非约束性，网络爬虫可以不遵守，但存在法律风险。</p>\n<h3 id=\"对Robots协议的理解\"><a href=\"#对Robots协议的理解\" class=\"headerlink\" title=\"对Robots协议的理解\"></a>对Robots协议的理解</h3><table>\n<thead>\n<tr>\n<th>访问量小:可以遵守<br>访问量较大：建议遵守</th>\n<th>非商业且偶尔:建议遵守<br>商业利益:必须遵守</th>\n<th>必须遵守</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>爬取网页 玩转网页</td>\n<td>爬取网站 爬取系列网站</td>\n<td>爬取全网</td>\n</tr>\n<tr>\n<td><code>原则</code>：类人行为可以不参考Robots协议。</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"防君子不防小人（君子协议）\"><a href=\"#防君子不防小人（君子协议）\" class=\"headerlink\" title=\"防君子不防小人（君子协议）\"></a>防君子不防小人（君子协议）</h3><p>Robots协议不是什么技术壁垒，而只是一种互相尊重的协议，好比私家花园的门口挂着“闲人免进”，尊重者绕道而行，不尊重者依然可以推门而入。目前，Robots协议在实际使用中，还存在一些问题。</p>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>robots.txt本身也是需要抓取的，出于效率考虑，一般爬虫不会每次抓取网站网页前都抓一下robots.txt，加上robots.txt更新不频繁，内容需要解析。通常爬虫的做法是先抓取一次，解析后缓存下来，而且是相当长的时间。假设网站管理员更新了robots.txt，修改了某些规则，但是对爬虫来说并不会立刻生效，只有当爬虫下次抓取robots.txt之后才能看到最新的内容。尴尬的是，爬虫下次抓取robots.txt的时间并不是由网站管理员控制的。当然，有些搜索引擎提供了web 工具可以让网站管理员通知搜索引擎那个url发生了变化，建议重新抓取。注意，此处是建议，即使你通知了搜索引擎，搜索引擎何时抓取仍然是不确定的，只是比完全不通知要好点。至于好多少，那就看搜索引擎的良心和技术能力了。</p>\n<h3 id=\"ignore\"><a href=\"#ignore\" class=\"headerlink\" title=\"ignore\"></a>ignore</h3><p>不知是无意还是有意，反正有些爬虫不太遵守或者完全忽略robots.txt，不排除开发人员能力的问题，比如说根本不知道robots.txt。另外，本身robots.txt不是一种强制措施，如果网站有数据需要保密，必需采取技术措施，比如说：用户验证，加密，ip拦截，访问频率控制等。</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/nGoP78.jpg\"></p>\n<h3 id=\"恶意爬虫\"><a href=\"#恶意爬虫\" class=\"headerlink\" title=\"恶意爬虫\"></a>恶意爬虫</h3><p>在互联网世界中，每天都有不计其数的爬虫在日夜不息地爬取数据，其中恶意爬虫的数量甚至高于非恶意爬虫。遵守Robots协议的爬虫才是好爬虫，但是并不是每个爬虫都会主动遵守Robots协议。</p>\n<p>恶意爬虫可以带来很多潜在威胁，比如电商网站的商品信息被爬取可能会被竞争对手利用，过多的爬虫还会占用带宽资源、甚至导致网站宕机。</p>\n<p>反恶意爬虫是一件漫长而艰巨的任务，如果依靠自身实力难以解决，可以借助岂安科技的业务风险分析平台 WARDEN 来反恶意爬虫，根据自己的需求来定制功能。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"网络爬虫的君子协议\"><a href=\"#网络爬虫的君子协议\" class=\"headerlink\" title=\"网络爬虫的君子协议\"></a>网络爬虫的君子协议</h2><p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/3tqLVS.jpg\"></p>\n<h3 id=\"网络爬虫的尺寸\"><a href=\"#网络爬虫的尺寸\" class=\"headerlink\" title=\"网络爬虫的尺寸\"></a>网络爬虫的尺寸</h3><table>\n<thead>\n<tr>\n<th>小规模，数量小，爬去速度不敏感，requests库</th>\n<th>中规模，数据规模较大，爬取速度敏感scrapy库</th>\n<th>大规模，搜索引擎,爬取速度关键定制开发</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>爬取网页 玩转网页</td>\n<td>爬取网站 爬取系列网站</td>\n<td>爬取全网</td>\n</tr>\n</tbody></table>\n<h3 id=\"网络爬虫引发的问题\"><a href=\"#网络爬虫引发的问题\" class=\"headerlink\" title=\"网络爬虫引发的问题\"></a>网络爬虫引发的问题</h3><ul>\n<li>性能骚扰</li>\n<li>法律风险</li>\n<li>隐私泄露</li>\n</ul>\n<p><em>网络爬虫的”性能骚扰”</em><br>web服务器默认接受人类访问，受限于编写水平和目的，网络爬虫将会为web服务器带来巨大的资源的开销。<br><em>网络爬虫的法律风险</em><br>服务器上的数据有产权归属，网络爬虫获取数据后牟利将会带来法律的风险。<br><em>网络爬虫的隐私泄露</em><br>网络爬虫可能具备突破简单访问的控制能力，获取被保护的数据，从而泄露个人隐私。</p>\n<h3 id=\"网络爬虫的限制\"><a href=\"#网络爬虫的限制\" class=\"headerlink\" title=\"网络爬虫的限制\"></a>网络爬虫的限制</h3><ul>\n<li>来源审查：判断<code>User-Agent</code>进行限制，检查来访者HTTP协议头的User-Agent域，只响应浏览器或友好爬虫的访问</li>\n<li>发布公告： <code>Robots</code>协议， 告知所有的爬虫网站的爬虫策略，要求爬虫遵守。</li>\n</ul>\n<h2 id=\"Robots协议\"><a href=\"#Robots协议\" class=\"headerlink\" title=\"Robots协议\"></a>Robots协议</h2><blockquote>\n<p>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取.</p>\n</blockquote>\n<p>根据协议，网站管理员可以在网站域名的根目录下放一个robots.txt 文本文件，里面可以指定不同的网络爬虫能访问的页面和禁止访问的页面，指定的页面由正则表达式表示。网络爬虫在采集这个网站之前，首先获取到这个文件，然后解析到其中的规则，然后根据规则来采集网站的数据。</p>\n<p>注意，这个协议的存在更多的是需要网络爬虫去遵守，而起不到防止爬虫的功能。</p>\n<h3 id=\"为什么需要Robots协议\"><a href=\"#为什么需要Robots协议\" class=\"headerlink\" title=\"为什么需要Robots协议\"></a>为什么需要Robots协议</h3><p>互联网上的网页是通过超级链接互相关联起来的，从而形成了网页的网状结构。爬虫的工作方式就像蜘蛛在网上沿着链接爬来爬去，最基本的流程可以简化如下：</p>\n<ol>\n<li>喂给爬虫一堆url，我们称之为种子(seeds)；</li>\n<li>爬虫抓取seeds，解析html网页，抽取其中的超级链接；</li>\n<li>爬虫接着抓取这些新发现的链接指向的网页。</li>\n</ol>\n<p>步骤2和步骤3循环往复。</p>\n<p>了解了上面的流程就能发现：对爬虫来说网站非常被动，只有老老实实被抓取的份。</p>\n<p>所以，对于网站的管理者来说，就存在这样的需求：</p>\n<p>某些路径下是个人隐私或者网站管理使用，不想被搜索引擎抓取，比如说日本爱情动作片；<br>不喜欢某个搜索引擎，不愿意被他抓取，最有名的就是之前淘宝不希望被百度抓取；<br>小网站使用的是公用的虚拟主机，流量有限或者需要付费，希望搜索引擎抓的温柔点；<br>某些网页是动态生成的，没有直接的链接指向，但是希望内容被搜索引擎抓取和索引。</p>\n<p>网站内容的所有者是网站管理员，搜索引擎应该尊重所有者的意愿，为了满足以上等等，就需要提供一种网站和爬虫进行沟通的途径，给网站管理员表达自己意愿的机会。有需求就有供应，robots协议就此诞生。</p>\n<h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><p>京东的Robots协议<br><code>https://www.jd.com/robots.txt</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">User<span class=\"token operator\">-</span>agent<span class=\"token operator\">:</span> <span class=\"token operator\">*</span> \nDisallow<span class=\"token operator\">:</span> <span class=\"token operator\">/</span><span class=\"token operator\">?</span><span class=\"token operator\">*</span> \nDisallow<span class=\"token operator\">:</span> <span class=\"token operator\">/</span>pop<span class=\"token comment\">/*.html \nDisallow: /pinpai/*.html?* \nUser-agent: EtaoSpider \nDisallow: / \nUser-agent: HuihuiSpider \nDisallow: / \nUser-agent: GwdangSpider \nDisallow: / \nUser-agent: WochachaSpider \nDisallow: /</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>百度的Robots协议<br><code>https://www.baidu.com/robots.txt</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: Baiduspider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Googlebot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: MSNBot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Baiduspider-image\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: YoudaoBot\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou web spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou inst spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou spider2\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou blog\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou News Spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sogou Orion spider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: ChinasoSpider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: Sosospider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\n\nUser-agent: yisouspider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: EasouSpider\nDisallow: /baidu\nDisallow: /s?\nDisallow: /shifen/\nDisallow: /homepage/\nDisallow: /cpro\nDisallow: /ulink?\nDisallow: /link?\n\nUser-agent: *\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面，<code>*</code>代表所有，<code>/</code>代表根目录</p>\n<h3 id=\"Robots协议的写法\"><a href=\"#Robots协议的写法\" class=\"headerlink\" title=\"Robots协议的写法\"></a>Robots协议的写法</h3><p>既然网络爬虫在爬取一个网站之前，要先获取到这个文件，然后解析到其中的规则，那么，Robots就必须要有一套通用的语法规则。</p>\n<p>最简单的robots.txt只有两条规则：</p>\n<p>User-agent：指定对哪些爬虫生效<br>Disallow：指定要屏蔽的网址<br>先说User-agent，爬虫抓取时会声明自己的身份，这就是User-agent，没错，就是http协议里的User-agent。robots.txt利用User-agent来区分各个引擎的爬虫，比如说google网页搜索爬虫的User-agent为Googlebot。</p>\n<p>可能有读者要问了，我怎么知道爬虫的User-agent是什么?你还可以查相关搜索引擎的资料得到官方的数据，比如说百度的爬虫列表是这样的：</p>\n<table>\n<thead>\n<tr>\n<th>产品名称</th>\n<th>对应User-Agent</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>网页搜索</td>\n<td>Baiduspider</td>\n</tr>\n<tr>\n<td>移动搜索</td>\n<td>Baiduspider</td>\n</tr>\n<tr>\n<td>图片搜索</td>\n<td>Baiduspider-image</td>\n</tr>\n<tr>\n<td>视频搜索</td>\n<td>Baiduspider-video</td>\n</tr>\n<tr>\n<td>新闻搜索</td>\n<td>Baiduspider-news</td>\n</tr>\n<tr>\n<td>百度搜索</td>\n<td>Baiduspider-favo</td>\n</tr>\n<tr>\n<td>百度联盟</td>\n<td>Baiduspider-cpro</td>\n</tr>\n<tr>\n<td>商务搜索</td>\n<td>Baiduspider-ads</td>\n</tr>\n</tbody></table>\n<p>Disallow 行列出的是要拦截的网页，以正斜线 (/) 开头，可以列出特定的网址或模式。要屏蔽整个网站，使用正斜线即可;要屏蔽某一目录以及其中的所有内容，在目录名后添加正斜线;要屏蔽某个具体的网页，就指出这个网页。</p>\n<p>下面介绍一些实例:<br>允许所有的robot访问</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: *\nDisallow:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>或者也可以建一个空文件 “/robots.txt” file。</p>\n<p>禁止爬虫访问所有目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: *\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>禁止爬虫访问某些目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: *\nDisallow: /a/\nDisallow: /b/\nDisallow: /c/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>禁止某些爬虫访问</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: BadBot\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>只允许某个爬虫访问</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: MangCrawler\nDisallow:\nUser-agent: *\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们再来结合两个真实的范例来学习一下。先看这个例子：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: Baiduspider\nDisallow: /\nUser-agent: baiduspider\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个是淘宝网的Robots协议内容，相信你已经看出来了，淘宝网禁止百度的爬虫访问。</p>\n<p>再来看一个例子：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">User-agent: *\nDisallow: /?*\nDisallow: /pop/*.html\nUser-agent: EtaoSpider\nDisallow: /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个稍微复杂点，京东有2个目录不希望所有的爬虫来抓。同时，京东完全屏蔽了一淘网的蜘蛛（EtaoSpider是一淘网的蜘蛛）。</p>\n<h2 id=\"Robots协议进阶知识\"><a href=\"#Robots协议进阶知识\" class=\"headerlink\" title=\"Robots协议进阶知识\"></a>Robots协议进阶知识</h2><p><strong>sitemap</strong><br>爬虫会通过网页内部的链接发现新的网页。但是如果没有连接指向的网页怎么办?或者用户输入条件生成的动态网页怎么办?能否让网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页?这就是sitemap，最简单的 Sitepmap 形式就是 XML 文件，在其中列出网站中的网址以及关于每个网址的其他数据(上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度等等)，利用这些信息搜索引擎可以更加智能地抓取网站内容。</p>\n<p>新的问题来了，爬虫怎么知道这个网站有没有提供sitemap文件，或者说网站管理员生成了sitemap，(可能是多个文件)，爬虫怎么知道放在哪里呢?</p>\n<p>由于robots.txt的位置是固定的，于是大家就想到了把sitemap的位置信息放在robots.txt里。这就成为robots.txt里的新成员了。</p>\n<p>节选一段google robots.txt：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Sitemap: http://www.gstatic.com/cultur<span class=\"token punctuation\">..</span>.\nSitemap: http://www.google.com/hostedn<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>插一句，考虑到一个网站的网页众多，sitemap人工维护不太靠谱，google提供了工具可以自动生成sitemap。</p>\n<p><strong>meta tag</strong><br>其实严格来说这部分内容不属于robots.txt。</p>\n<p>robots.txt的初衷是为了让网站管理员管理可以出现在搜索引擎里的网站内容。但是，即使使用 robots.txt 文件让爬虫无法抓取这些内容，搜索引擎也可以通过其他方式找到这些网页并将它添加到索引中。例如，其他网站仍可能链接到该网站。因此，网页网址及其他公开的信息(如指向相关网站的链接中的定位文字或开放式目录管理系统中的标题)有可能会出现在引擎的搜索结果中。如果想彻底对搜索引擎隐身那咋整呢?答案是：元标记，即meta tag。</p>\n<p>比如要完全阻止一个网页的内容列在搜索引擎索引中(即使有其他网站链接到此网页)，可使用 noindex 元标记。只要搜索引擎查看该网页，便会看到 noindex 元标记并阻止该网页显示在索引中，这里注意noindex元标记提供的是一种逐页控制对网站的访问的方式。</p>\n<p>要防止所有搜索引擎将网站中的网页编入索引，在网页的部分添加：</p>\n<pre class=\"line-numbers language-vbscript-html\" data-language=\"vbscript-html\"><code class=\"language-vbscript-html\">&lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;noindex&quot;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这里的name取值可以设置为某个搜索引擎的User-agent从而指定屏蔽某一个搜索引擎。</p>\n<p>除了noindex外，还有其他元标记，比如说nofollow，禁止爬虫从此页面中跟踪链接。详细信息可以参考Google支持的元标记，这里提一句：noindex和nofollow在HTML 4.01规范里有描述，但是其他tag的在不同引擎支持到什么程度各不相同，还请读者自行查阅各个引擎的说明文档。</p>\n<p><strong>Crawl-delay</strong><br>除了控制哪些可以抓哪些不能抓之外，robots.txt还可以用来控制爬虫抓取的速率。如何做到的呢?通过设置爬虫在两次抓取之间等待的秒数。这种操作可以进行缓解服务器压力。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Crawl-delay:5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>表示本次抓取后下一次抓取前需要等待5秒。</p>\n<p>注意：google已经不支持这种方式了，在webmaster tools里提供了一个功能可以更直观的控制抓取速率。</p>\n<p>这里插一句题外话，几年前曾经有一段时间robots.txt还支持复杂的参数:Visit-time，只有在visit-time指定的时间段里，爬虫才可以访问;Request-rate: 用来限制URL的读取频率，用于控制不同的时间段采用不同的抓取速率。后来估计支持的人太少，就渐渐的废掉了，目前google和baidu都已经不支持这个规则了，其他小的引擎公司貌似从来都没有支持过。</p>\n<h3 id=\"Robots协议的遵守方式\"><a href=\"#Robots协议的遵守方式\" class=\"headerlink\" title=\"Robots协议的遵守方式\"></a>Robots协议的遵守方式</h3><p>网络爬虫：<br>自动或人工识别rotbots.txt，再进行内容爬取<br>约束性:<br>Robots协议是建议但非约束性，网络爬虫可以不遵守，但存在法律风险。</p>\n<h3 id=\"对Robots协议的理解\"><a href=\"#对Robots协议的理解\" class=\"headerlink\" title=\"对Robots协议的理解\"></a>对Robots协议的理解</h3><table>\n<thead>\n<tr>\n<th>访问量小:可以遵守<br>访问量较大：建议遵守</th>\n<th>非商业且偶尔:建议遵守<br>商业利益:必须遵守</th>\n<th>必须遵守</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>爬取网页 玩转网页</td>\n<td>爬取网站 爬取系列网站</td>\n<td>爬取全网</td>\n</tr>\n<tr>\n<td><code>原则</code>：类人行为可以不参考Robots协议。</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"防君子不防小人（君子协议）\"><a href=\"#防君子不防小人（君子协议）\" class=\"headerlink\" title=\"防君子不防小人（君子协议）\"></a>防君子不防小人（君子协议）</h3><p>Robots协议不是什么技术壁垒，而只是一种互相尊重的协议，好比私家花园的门口挂着“闲人免进”，尊重者绕道而行，不尊重者依然可以推门而入。目前，Robots协议在实际使用中，还存在一些问题。</p>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>robots.txt本身也是需要抓取的，出于效率考虑，一般爬虫不会每次抓取网站网页前都抓一下robots.txt，加上robots.txt更新不频繁，内容需要解析。通常爬虫的做法是先抓取一次，解析后缓存下来，而且是相当长的时间。假设网站管理员更新了robots.txt，修改了某些规则，但是对爬虫来说并不会立刻生效，只有当爬虫下次抓取robots.txt之后才能看到最新的内容。尴尬的是，爬虫下次抓取robots.txt的时间并不是由网站管理员控制的。当然，有些搜索引擎提供了web 工具可以让网站管理员通知搜索引擎那个url发生了变化，建议重新抓取。注意，此处是建议，即使你通知了搜索引擎，搜索引擎何时抓取仍然是不确定的，只是比完全不通知要好点。至于好多少，那就看搜索引擎的良心和技术能力了。</p>\n<h3 id=\"ignore\"><a href=\"#ignore\" class=\"headerlink\" title=\"ignore\"></a>ignore</h3><p>不知是无意还是有意，反正有些爬虫不太遵守或者完全忽略robots.txt，不排除开发人员能力的问题，比如说根本不知道robots.txt。另外，本身robots.txt不是一种强制措施，如果网站有数据需要保密，必需采取技术措施，比如说：用户验证，加密，ip拦截，访问频率控制等。</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/nGoP78.jpg\"></p>\n<h3 id=\"恶意爬虫\"><a href=\"#恶意爬虫\" class=\"headerlink\" title=\"恶意爬虫\"></a>恶意爬虫</h3><p>在互联网世界中，每天都有不计其数的爬虫在日夜不息地爬取数据，其中恶意爬虫的数量甚至高于非恶意爬虫。遵守Robots协议的爬虫才是好爬虫，但是并不是每个爬虫都会主动遵守Robots协议。</p>\n<p>恶意爬虫可以带来很多潜在威胁，比如电商网站的商品信息被爬取可能会被竞争对手利用，过多的爬虫还会占用带宽资源、甚至导致网站宕机。</p>\n<p>反恶意爬虫是一件漫长而艰巨的任务，如果依靠自身实力难以解决，可以借助岂安科技的业务风险分析平台 WARDEN 来反恶意爬虫，根据自己的需求来定制功能。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-07-31T13:00:26.026Z","updated":"2021-07-31T13:00:26.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrrtsc5q000hb6uq85h8cweo","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"go mod使用","date":"2021-07-31T07:45:52.000Z","img":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/PuXsa5.jpg","top":true,"hide":false,"cover":true,"coverImg":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/YDsDmh.jpg","toc":true,"mathjax":false,"summary":"本文很细致的介绍go mod使用，一步一步带你完全掌握go mod，深入学习","keywords":["go","tool","language"],"_content":"\n\n最近由于换工作，开始交接工作。整理以前的工作内容，由于组内就我一个在做go和大数据。 所以开发没有规划，当时是怎么快怎么来。go也是使用最传统的go path的方式管理的。都是手动管理依赖的。现在交接给他人，需要多人开发，发现很多问题。比如版本问题，各种依赖的问题等等。\n\n由于工作原因，几乎所有主流语言都写过。所以，对应语言包管理工具也都了解和使用过。我前面有写过maven的使用。\nmaven是使用过的功能最强大的包管理工具了，maven定位是项目管理工具。pip和npm都是及格的产品。\n\n我个人觉得，一个包管理工具应该有以下功能：\n\n### 基本功能\n1. 依赖管理\n2. 依赖包版本控制\n3. 对应的包管理平台\n4. 可以私有化部署\n\n加分：\n5. 代码包是否可以复用\n6. 构建，测试,打包\n7. 发布上线\n\n\n对比上面几点：\n目前做的最好的也就 maven了，gradle没有使用过，不知道。\n\n\n今天主角是go mod，先来谈谈没有使用go mod之前的问题。\n\n### 使用go path问题\n1. 代码开发必须在go path src目录下，不然，就有问题。\n2. 依赖手动管理\n3. 依赖包没有版本可言\n\n从这个看， go path不算包管理工具\n\n### govendor\n1. 解决了包依赖，一个配置文件就管理\n2. 依赖包全都下载到项目vendor下，每个项目都把有一份。拉取项目时,开始怀疑人生。\n\n\n\n\n### go mod介绍\ngo modules 是 golang 1.11 新加的特性。现在1.12 已经发布了，是时候用起来了。Modules官方定义为：\n> 模块是相关Go包的集合。modules是源代码交换和版本控制的单元。 go命令直接支持使用modules，包括记录和解析对其他模块的依赖性。modules替换旧的基于GOPATH的方法来指定在给定构建中使用哪些源文件。\n\n\n### 如何使用go mod\n首先，必须升级go到1.11,目前版本是1.14\n下面我以我自己升级演示：\n\n```bash\n\n### 卸载旧版本，删除对应文件\nbrew uninstall -f go\n\n### 更新一下brew\n\nbrew update\n\n\n### 安装go\nbrew install go\n```\n\n上面升级完了，使用 `go version`看下版本\n```\ngo version go1.14.1 darwin/amd64\n```\n\n下面设置go mod和go proxy\n\n```bash\ngo env -w GOBIN=/Users/youdi/go/bin\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.cn,direct // 使用七牛云的\n```\n\n注意： go env -w会将配置写到  `GOENV=\"/Users/youdi/Library/Application Support/go/env\"`\n\n\n下面看下我的配置\n\n\n```\nGO111MODULE=\"on\"\nGOARCH=\"amd64\"\nGOBIN=\"/Users/youdi/go/bin\"\nGOCACHE=\"/Users/youdi/Library/Caches/go-build\"\nGOENV=\"/Users/youdi/Library/Application Support/go/env\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOINSECURE=\"\"\nGONOPROXY=\"\"\nGONOSUMDB=\"\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/youdi/go\"\nGOPRIVATE=\"\"\nGOPROXY=\"https://goproxy.cn,direct\"\nGOROOT=\"/usr/local/go\"\nGOSUMDB=\"off\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nAR=\"ar\"\nCC=\"clang\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"/dev/null\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/8m/v_1j4dgs7rzgqq4p_4_8k_nr0000gn/T/go-build221113671=/tmp/go-build -gno-record-gcc-switches -fno-common\"\n\n```\n\n\n我们看一下，我修改的内容\n\ncat /Users/youdi/Library/Application Support/go/env\n\n```bash\nGO111MODULE=on\nGOBIN=/Users/youdi/go/bin\nGOPROXY=https://goproxy.cn,direct\nGOSUMDB=off\n```\n\n\n### GO111MODULE\nGO111MODULE 有三个值：off, on和auto（默认值）。\n\nGO111MODULE=off，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。\nGO111MODULE=on，go命令行会使用modules，而一点也不会去GOPATH目录下查找。\nGO111MODULE=auto，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：\n\n    当前目录在GOPATH/src之外且该目录包含go.mod文件\n    当前文件在包含go.mod文件的目录下面。\n\n当modules功能启用时，依赖包的存放位置变更为$GOPATH/pkg，允许同一个package多个版本并存，且多个项目可以共享缓存的 module\n\n我们看下目录：\n\ncd /Users/youdi/go/pkg\n```\n├── darwin_amd64\n│   ├── github.com\n│   ├── go.etcd.io\n│   ├── golang\n│   ├── golang.org\n│   ├── gopkg.in\n│   ├── quickstart\n│   └── uc.a\n├── mod\n│   ├── cache\n│   ├── github.com\n│   ├── golang.org\n│   ├── google.golang.org\n│   └── gopkg.in\n└── sumdb\n    └── sum.golang.org\n```\n\n\n### go mod命令\n\ngolang 提供了 `go mod`命令来管理包。\n\n\ngo help mod\n```bash\n\nGo mod provides access to operations on modules.\n\nNote that support for modules is built into all the go commands,\nnot just 'go mod'. For example, day-to-day adding, removing, upgrading,\nand downgrading of dependencies should be done using 'go get'.\nSee 'go help modules' for an overview of module functionality.\n\nUsage:\n\n\tgo mod <command> [arguments]\n\nThe commands are:\n\n\tdownload    download modules to local cache\n\tedit        edit go.mod from tools or scripts\n\tgraph       print module requirement graph\n\tinit        initialize new module in current directory\n\ttidy        add missing and remove unused modules\n\tvendor      make vendored copy of dependencies\n\tverify      verify dependencies have expected content\n\twhy         explain why packages or modules are needed\n\nUse \"go help mod <command>\" for more information about a command.\n\n```\n\ngo mod 有以下命令：\n\n| 命令     | 说明                                                         |\n| -------- | ------------------------------------------------------------ |\n| download | download modules to local cache(下载依赖包)                  |\n| edit     | edit go.mod from tools or scripts（编辑go.mod)                |\n| graph    | print module requirement graph (打印模块依赖图)              |\n| verify     | initialize new module in current directory（在当前目录初始化mod） |\n| tidy     | add missing and remove unused modules(拉取缺少的模块，移除不用的模块) |\n| vendor   | make vendored copy of dependencies(将依赖复制到vendor下)     |\n| verify   | verify dependencies have expected content (验证依赖是否正确） |\n| why      | explain why packages or modules are needed(解释为什么需要依赖) |\n\n比较常用的是 `init`,`tidy`, `edit`\n\n\n### 使用go mod管理一个新项目\n\n#### 1. 初始化项目\n可以随便找一个目录创建项目，我使用习惯用IDEA进行创建\n```bash\nmkdir Gone\ncd Gone\ngo mod init Gone\n```\n\n查看一下 go.mod文件\n\n```go\nmodule Gone\n\ngo 1.14\n```\n\ngo.mod文件一旦创建后，它的内容将会被go toolchain全面掌控。go toolchain会在各类命令执行时，比如go get、go build、go mod等修改和维护go.mod文件。\n\n\ngo.mod 提供了module, require、replace和exclude 四个命令\n\n- `module` 语句指定包的名字（路径）\n- `require` 语句指定的依赖项模块\n- `replace` 语句可以替换依赖项模块\n- `exclude` 语句可以忽略依赖项模块\n\n#### 2. 添加依赖\n\n创建 main.go文件\n\n```go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\tr.Run() // listen and serve on 0.0.0.0:8080 (for windows \"localhost:8080\")\n}\n```\n\n\n执行 go run main.go 运行代码会发现 go mod 会自动查找依赖自动下载\n再查看 `go.mod`\n\n```bash\nmodule Gone\n\ngo 1.14\n\nrequire github.com/gin-gonic/gin v1.6.3\n```\ngo module 安装 package 的原則是先拉最新的 release tag，若无tag则拉最新的commit\n\ngo 会自动生成一个 go.sum 文件来记录 dependency tree\n\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/JhSGHb.jpg)\n\n再次执行脚本 go run main.go发现跳过了检查并安装依赖的步骤。\n\n可以使用命令 go list -m -u all 来检查可以升级的package，使用go get -u need-upgrade-package 升级后会将新的依赖版本更新到go.mod * 也可以使用 go get -u 升级所有依赖\n\n去mod包缓存下看看\n\n```bash\n/Users/youdi/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3\n```\n\n\n### go get升级\n\n* 运行 go get -u 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)\n* 运行 go get -u=patch 将会升级到最新的修订版本\n* 运行 go get package@version 将会升级到指定的版本号version\n* 运行go get如果有版本的更改，那么go.mod文件也会更改\n\n\n### 使用replace替换无法直接获取的package\n由于某些已知的原因，并不是所有的package都能成功下载，比如：golang.org下的包。\n\nmodules 可以通过在 go.mod 文件中使用 replace 指令替换成github上对应的库，比如：\n\n```go\nreplace (\n\tgolang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a => github.com/golang/crypto v0.0.0-20190313024323-a1f597ede03a\n)\n```\n\n### go mod发布和使用\n\n参考Roberto Selbach写的go mod入门文章，文末，我给出链接\n\n\n### Creating a Module\n如果你设置好go mod了，那你就可以在任何目录下随便创建\n\n```bash\n$mkdir gomodone\n$cd gomodone\n```\n在这个目录下创建一个文件`say.go`\n\n```go\npackage gomodone\n\nimport \"fmt\" \n\n// say Hi to someone\nfunc SayHi(name string) string {\n   return fmt.Sprintf(\"Hi, %s\", name)\n}\n\n```\n\n初始化一个 `go.mod`文件\n\n```bash\n$ go mod init github.com/jacksonyoudi/gomodone\ngo: creating new go.mod: module github.com/jacksonyoudi/gomodone\n```\n查看 go.mod内容如下：\n\n```go\ngithub.com/jacksonyoudi/gomodone\ngo 1.14\n```\n\n下面我们要将这个module发布到github上，然后在另外一个程序使用\n\n```bash\n$git init\n$vim .gitiiignore\n$git commit -am \"init\"\n// github创建对应的repo\n$git remote add origin git@github.com:jacksonyoudi/gomodone.git\n$git push -u origin master\n```\n\n执行完，上面我们就相当于发布完了。\n\n如果有人需要使用，就可以使用\n```bash\ngo get github.com/jacksonyoudi/gomodone\n```\n这个时候没有加tag，所以，没有版本的控制。默认是v0.0.0后面接上时间和commitid。如下：\n\n```bash\ngomodone@v0.0.0-20200517004046-ee882713fd1e\n```\n\n官方不建议这样做，没有进行版本控制管理。\n\n\n### module versioning\n使用tag，进行版本控制\n\n#### making a release\n\n```bash\ngit tag v1.0.0\ngit push --tags\n```\n操作完，我们的module就发布了一个v1.0.0的版本了。\n\n推荐在这个状态下，再切出一个分支，用于后续v1.0.0的修复推送,不要直接在master分支修复\n```bash\n$git checkout -b v1\n$git push -u origin v1\n```\n\n\n### use our module\n上面已经发布了一个v1.0.0的版本，我们可以在另一个项目中使用，创建一个go的项目\n\n```bash\n$mkdir Gone\n$cd Gone\n$vim main.go\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/jacksonyoudi/gomodone\"\n)\n\nfunc main() {\n\tfmt.Println(gomodone.SayHi(\"Roberto\"))\n}\n```\n\n代码写好了，我们生成 go mod文件\n\n```bash\ngo mod init Gone\n```\n上面命令执行完，会生成 go mod文件\n看下mod文件：\n\n```bash\nmodule Gone\n\ngo 1.14\n\nrequire (\n\tgithub.com/jacksonyoudi/gomodone v1.0.0\n)\n```\n\n\n```bash\n$go mod tidy\ngo: finding module for package github.com/jacksonyoudi/gomodone\ngo: found github.com/jacksonyoudi/gomodone in github.com/jacksonyoudi/gomodone v1.0.0\n```\n同时还生成了go.sum, 其中包含软件包的哈希值，以确保我们具有正确的版本和文件。\n\n```bash\ngithub.com/jacksonyoudi/gomodone v1.0.1 h1:jFd+qZlAB0R3zqrC9kwO8IgPrAdayMUS0rSHMDc/uG8=\ngithub.com/jacksonyoudi/gomodone v1.0.1/go.mod h1:XWi+BLbuiuC2YM8Qz4yQzTSPtHt3T3hrlNN2pNlyA94=\ngithub.com/jacksonyoudi/gomodone/v2 v2.0.0 h1:GpzGeXCx/Xv2ueiZJ8hEhFwLu7xjxLBjkOYSmg8Ya/w=\ngithub.com/jacksonyoudi/gomodone/v2 v2.0.0/go.mod h1:L8uFPSZNHoAhpaePWUfKmGinjufYdw9c2i70xtBorSw=\n```\n这个内容是下面的，需要操作执行的结果\n\n\n\ngo run main.go就可以运行了\n\n### Making a bugfix release\n\n假如fix一个bug,我们在v1版本上进行修复\n\n修改代码如下：\n\n```go\n// say Hi to someone\nfunc SayHi(name string) string {\n-       return fmt.Sprintf(\"Hi, %s\", name)\n+       return fmt.Sprintf(\"Hi, %s!\", name)\n}\n```\n\n修复好，我们开始push\n\n```bash\n$ git commit -m \"Emphasize our friendliness\" say.go\n$ git tag v1.0.1\n$ git push --tags origin v1\n```\n\n#### Updating modules\n刚才fix bug，所以要在我们使用项目中更新\n\n这个需要我们手动执行更新module操作\n\n我们通过使用我们的好朋友来做到这一点go get：\n\n- 运行  `go get -u` 以使用最新的  minor  版本或修补程序版本（即它将从1.0.0更新到例如1.0.1，或者，如果可用，则更新为1.1.0）\n- 运行  go get -u=patch 以使用最新的  修补程序  版本（即，将更新为1.0.1但不更新  为1.1.0）\n- 运行go get package@version 以更新到特定版本（例如github.com/jacksonyoudi/gomodone@v1.0.1）\n\n目前module最新的也是v1.0.1\n\n```bash\n// 更新最新\n$go get -u\n$go get -u=patch\n//指定包，指定版本\n$go get github.com/jacksonyoudi/gomodone@v1.0.1\n```\n操作完，go.mod文件会修改如下:\n\n```go\nmodule Gone\n\ngo 1.14\n\nrequire (\n\tgithub.com/jacksonyoudi/gomodone v1.0.1\n)\n```\n\n\n\n#### Major versions\n根据语义版本语义，主要版本与次要版本  不同。主要版本可能会破坏向后兼容性。从Go模块的角度来看，主要版本是  完全不同的软件包。乍一看这听起来很奇怪，但这是有道理的：两个不兼容的库版本是两个不同的库。\n比如下面修改，完全破坏了兼容性。\n\n```go\npackage gomodone\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\n\n// Hi returns a friendly greeting\n// Hi returns a friendly greeting in language lang\nfunc SayHi(name, lang string) (string, error) {\n\tswitch lang {\n\tcase \"en\":\n\t\treturn fmt.Sprintf(\"Hi, %s!\", name), nil\n\tcase \"pt\":\n\t\treturn fmt.Sprintf(\"Oi, %s!\", name), nil\n\tcase \"es\":\n\t\treturn fmt.Sprintf(\"¡Hola, %s!\", name), nil\n\tcase \"fr\":\n\t\treturn fmt.Sprintf(\"Bonjour, %s!\", name), nil\n\tdefault:\n\t\treturn \"\", errors.New(\"unknown language\")\n\t}\n}\n```\n\n\n如上，我们需要不同的大版本，这种情况下\n\n修改 go.mod如下\n\n```go\nmodule github.com/jacksonyoudi/gomodone/v2\n\ngo 1.14\n```\n\n然后，重新tag，push\n\n```bash\n$ git commit say.go -m \"Change Hi to allow multilang\"\n$ git checkout -b v2 # 用于v2版本，后续修复v2\n$ git commit go.mod -m \"Bump version to v2\"\n$ git tag v2.0.0\n$ git push --tags origin v2 \n```\n\n### Updating to a major version\n即使发布了库的新不兼容版本，现有软件 也不会中断，因为它将继续使用现有版本1.0.1。go get -u 将不会获得版本2.0.0。\n如果想使用v2.0.0,代码改成如下：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n    \"github.com/jacksonyoudi/gomodone/v2\"\n)\n\nfunc main() {\n\tg, err := gomodone.SayHi(\"Roberto\", \"pt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(g)\n}\n```\n执行 go mod tidy\n\n```bash\ngo: finding module for package github.com/jacksonyoudi/gomodone/v2\ngo: downloading github.com/jacksonyoudi/gomodone/v2 v2.0.0\ngo: found github.com/jacksonyoudi/gomodone/v2 in github.com/jacksonyoudi/gomodone/v2 v2.0.0\n```\n\n当然，两个版本都可以同时使用, 使用别名\n如下：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/jacksonyoudi/gomodone\"\n\tmv2 \"github.com/jacksonyoudi/gomodone/v2\"\n)\n\nfunc main() {\n\tg, err := mv2.SayHi(\"Roberto\", \"pt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(g)\n\n\tfmt.Println(gomodone.SayHi(\"Roberto\"))\n}\n\n```\n\n执行一下 `go mod tidy`\n\n### Vendoring\n\n默认是忽略vendor的，如果想在项目目录下有vendor可以执行下面命令\n```\n$go vendor\n```\n\n当然，如果构建程序的时候，希望使用vendor中的依赖，\n\n```go\n$ go build -mod vendor\n```\n\n\n### IDEA下开发GO\n\n1. 创建go项目\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/IqR0yI.jpg)\n\n2. 创建完项目，会自动生成go mod文件\n   如果需要修改，可以手动修改，加入git等操作\n\n3. 写业务逻辑代码\n   \n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/ZNN4tE.jpg)\n4. 解决依赖，更新go.mod\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/CxoGM9.jpg)\n\n5. go build\n","source":"_posts/go-mod-use.md","raw":"---\ntitle: go mod使用\ndate: 2021-07-31 15:45:52\nimg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/PuXsa5.jpg\ntop: true\nhide: false\ncover: true\ncoverImg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/YDsDmh.jpg\ntoc: true\nmathjax: false\nsummary: 本文很细致的介绍go mod使用，一步一步带你完全掌握go mod，深入学习\nkeywords:\n-  go\n- tool\n- language\ncategories: 技术\ntags:\n-  go\n- tool\n- language\n\n\n---\n\n\n最近由于换工作，开始交接工作。整理以前的工作内容，由于组内就我一个在做go和大数据。 所以开发没有规划，当时是怎么快怎么来。go也是使用最传统的go path的方式管理的。都是手动管理依赖的。现在交接给他人，需要多人开发，发现很多问题。比如版本问题，各种依赖的问题等等。\n\n由于工作原因，几乎所有主流语言都写过。所以，对应语言包管理工具也都了解和使用过。我前面有写过maven的使用。\nmaven是使用过的功能最强大的包管理工具了，maven定位是项目管理工具。pip和npm都是及格的产品。\n\n我个人觉得，一个包管理工具应该有以下功能：\n\n### 基本功能\n1. 依赖管理\n2. 依赖包版本控制\n3. 对应的包管理平台\n4. 可以私有化部署\n\n加分：\n5. 代码包是否可以复用\n6. 构建，测试,打包\n7. 发布上线\n\n\n对比上面几点：\n目前做的最好的也就 maven了，gradle没有使用过，不知道。\n\n\n今天主角是go mod，先来谈谈没有使用go mod之前的问题。\n\n### 使用go path问题\n1. 代码开发必须在go path src目录下，不然，就有问题。\n2. 依赖手动管理\n3. 依赖包没有版本可言\n\n从这个看， go path不算包管理工具\n\n### govendor\n1. 解决了包依赖，一个配置文件就管理\n2. 依赖包全都下载到项目vendor下，每个项目都把有一份。拉取项目时,开始怀疑人生。\n\n\n\n\n### go mod介绍\ngo modules 是 golang 1.11 新加的特性。现在1.12 已经发布了，是时候用起来了。Modules官方定义为：\n> 模块是相关Go包的集合。modules是源代码交换和版本控制的单元。 go命令直接支持使用modules，包括记录和解析对其他模块的依赖性。modules替换旧的基于GOPATH的方法来指定在给定构建中使用哪些源文件。\n\n\n### 如何使用go mod\n首先，必须升级go到1.11,目前版本是1.14\n下面我以我自己升级演示：\n\n```bash\n\n### 卸载旧版本，删除对应文件\nbrew uninstall -f go\n\n### 更新一下brew\n\nbrew update\n\n\n### 安装go\nbrew install go\n```\n\n上面升级完了，使用 `go version`看下版本\n```\ngo version go1.14.1 darwin/amd64\n```\n\n下面设置go mod和go proxy\n\n```bash\ngo env -w GOBIN=/Users/youdi/go/bin\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.cn,direct // 使用七牛云的\n```\n\n注意： go env -w会将配置写到  `GOENV=\"/Users/youdi/Library/Application Support/go/env\"`\n\n\n下面看下我的配置\n\n\n```\nGO111MODULE=\"on\"\nGOARCH=\"amd64\"\nGOBIN=\"/Users/youdi/go/bin\"\nGOCACHE=\"/Users/youdi/Library/Caches/go-build\"\nGOENV=\"/Users/youdi/Library/Application Support/go/env\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOINSECURE=\"\"\nGONOPROXY=\"\"\nGONOSUMDB=\"\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/youdi/go\"\nGOPRIVATE=\"\"\nGOPROXY=\"https://goproxy.cn,direct\"\nGOROOT=\"/usr/local/go\"\nGOSUMDB=\"off\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nAR=\"ar\"\nCC=\"clang\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"/dev/null\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/8m/v_1j4dgs7rzgqq4p_4_8k_nr0000gn/T/go-build221113671=/tmp/go-build -gno-record-gcc-switches -fno-common\"\n\n```\n\n\n我们看一下，我修改的内容\n\ncat /Users/youdi/Library/Application Support/go/env\n\n```bash\nGO111MODULE=on\nGOBIN=/Users/youdi/go/bin\nGOPROXY=https://goproxy.cn,direct\nGOSUMDB=off\n```\n\n\n### GO111MODULE\nGO111MODULE 有三个值：off, on和auto（默认值）。\n\nGO111MODULE=off，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。\nGO111MODULE=on，go命令行会使用modules，而一点也不会去GOPATH目录下查找。\nGO111MODULE=auto，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：\n\n    当前目录在GOPATH/src之外且该目录包含go.mod文件\n    当前文件在包含go.mod文件的目录下面。\n\n当modules功能启用时，依赖包的存放位置变更为$GOPATH/pkg，允许同一个package多个版本并存，且多个项目可以共享缓存的 module\n\n我们看下目录：\n\ncd /Users/youdi/go/pkg\n```\n├── darwin_amd64\n│   ├── github.com\n│   ├── go.etcd.io\n│   ├── golang\n│   ├── golang.org\n│   ├── gopkg.in\n│   ├── quickstart\n│   └── uc.a\n├── mod\n│   ├── cache\n│   ├── github.com\n│   ├── golang.org\n│   ├── google.golang.org\n│   └── gopkg.in\n└── sumdb\n    └── sum.golang.org\n```\n\n\n### go mod命令\n\ngolang 提供了 `go mod`命令来管理包。\n\n\ngo help mod\n```bash\n\nGo mod provides access to operations on modules.\n\nNote that support for modules is built into all the go commands,\nnot just 'go mod'. For example, day-to-day adding, removing, upgrading,\nand downgrading of dependencies should be done using 'go get'.\nSee 'go help modules' for an overview of module functionality.\n\nUsage:\n\n\tgo mod <command> [arguments]\n\nThe commands are:\n\n\tdownload    download modules to local cache\n\tedit        edit go.mod from tools or scripts\n\tgraph       print module requirement graph\n\tinit        initialize new module in current directory\n\ttidy        add missing and remove unused modules\n\tvendor      make vendored copy of dependencies\n\tverify      verify dependencies have expected content\n\twhy         explain why packages or modules are needed\n\nUse \"go help mod <command>\" for more information about a command.\n\n```\n\ngo mod 有以下命令：\n\n| 命令     | 说明                                                         |\n| -------- | ------------------------------------------------------------ |\n| download | download modules to local cache(下载依赖包)                  |\n| edit     | edit go.mod from tools or scripts（编辑go.mod)                |\n| graph    | print module requirement graph (打印模块依赖图)              |\n| verify     | initialize new module in current directory（在当前目录初始化mod） |\n| tidy     | add missing and remove unused modules(拉取缺少的模块，移除不用的模块) |\n| vendor   | make vendored copy of dependencies(将依赖复制到vendor下)     |\n| verify   | verify dependencies have expected content (验证依赖是否正确） |\n| why      | explain why packages or modules are needed(解释为什么需要依赖) |\n\n比较常用的是 `init`,`tidy`, `edit`\n\n\n### 使用go mod管理一个新项目\n\n#### 1. 初始化项目\n可以随便找一个目录创建项目，我使用习惯用IDEA进行创建\n```bash\nmkdir Gone\ncd Gone\ngo mod init Gone\n```\n\n查看一下 go.mod文件\n\n```go\nmodule Gone\n\ngo 1.14\n```\n\ngo.mod文件一旦创建后，它的内容将会被go toolchain全面掌控。go toolchain会在各类命令执行时，比如go get、go build、go mod等修改和维护go.mod文件。\n\n\ngo.mod 提供了module, require、replace和exclude 四个命令\n\n- `module` 语句指定包的名字（路径）\n- `require` 语句指定的依赖项模块\n- `replace` 语句可以替换依赖项模块\n- `exclude` 语句可以忽略依赖项模块\n\n#### 2. 添加依赖\n\n创建 main.go文件\n\n```go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\tr.Run() // listen and serve on 0.0.0.0:8080 (for windows \"localhost:8080\")\n}\n```\n\n\n执行 go run main.go 运行代码会发现 go mod 会自动查找依赖自动下载\n再查看 `go.mod`\n\n```bash\nmodule Gone\n\ngo 1.14\n\nrequire github.com/gin-gonic/gin v1.6.3\n```\ngo module 安装 package 的原則是先拉最新的 release tag，若无tag则拉最新的commit\n\ngo 会自动生成一个 go.sum 文件来记录 dependency tree\n\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/JhSGHb.jpg)\n\n再次执行脚本 go run main.go发现跳过了检查并安装依赖的步骤。\n\n可以使用命令 go list -m -u all 来检查可以升级的package，使用go get -u need-upgrade-package 升级后会将新的依赖版本更新到go.mod * 也可以使用 go get -u 升级所有依赖\n\n去mod包缓存下看看\n\n```bash\n/Users/youdi/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3\n```\n\n\n### go get升级\n\n* 运行 go get -u 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)\n* 运行 go get -u=patch 将会升级到最新的修订版本\n* 运行 go get package@version 将会升级到指定的版本号version\n* 运行go get如果有版本的更改，那么go.mod文件也会更改\n\n\n### 使用replace替换无法直接获取的package\n由于某些已知的原因，并不是所有的package都能成功下载，比如：golang.org下的包。\n\nmodules 可以通过在 go.mod 文件中使用 replace 指令替换成github上对应的库，比如：\n\n```go\nreplace (\n\tgolang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a => github.com/golang/crypto v0.0.0-20190313024323-a1f597ede03a\n)\n```\n\n### go mod发布和使用\n\n参考Roberto Selbach写的go mod入门文章，文末，我给出链接\n\n\n### Creating a Module\n如果你设置好go mod了，那你就可以在任何目录下随便创建\n\n```bash\n$mkdir gomodone\n$cd gomodone\n```\n在这个目录下创建一个文件`say.go`\n\n```go\npackage gomodone\n\nimport \"fmt\" \n\n// say Hi to someone\nfunc SayHi(name string) string {\n   return fmt.Sprintf(\"Hi, %s\", name)\n}\n\n```\n\n初始化一个 `go.mod`文件\n\n```bash\n$ go mod init github.com/jacksonyoudi/gomodone\ngo: creating new go.mod: module github.com/jacksonyoudi/gomodone\n```\n查看 go.mod内容如下：\n\n```go\ngithub.com/jacksonyoudi/gomodone\ngo 1.14\n```\n\n下面我们要将这个module发布到github上，然后在另外一个程序使用\n\n```bash\n$git init\n$vim .gitiiignore\n$git commit -am \"init\"\n// github创建对应的repo\n$git remote add origin git@github.com:jacksonyoudi/gomodone.git\n$git push -u origin master\n```\n\n执行完，上面我们就相当于发布完了。\n\n如果有人需要使用，就可以使用\n```bash\ngo get github.com/jacksonyoudi/gomodone\n```\n这个时候没有加tag，所以，没有版本的控制。默认是v0.0.0后面接上时间和commitid。如下：\n\n```bash\ngomodone@v0.0.0-20200517004046-ee882713fd1e\n```\n\n官方不建议这样做，没有进行版本控制管理。\n\n\n### module versioning\n使用tag，进行版本控制\n\n#### making a release\n\n```bash\ngit tag v1.0.0\ngit push --tags\n```\n操作完，我们的module就发布了一个v1.0.0的版本了。\n\n推荐在这个状态下，再切出一个分支，用于后续v1.0.0的修复推送,不要直接在master分支修复\n```bash\n$git checkout -b v1\n$git push -u origin v1\n```\n\n\n### use our module\n上面已经发布了一个v1.0.0的版本，我们可以在另一个项目中使用，创建一个go的项目\n\n```bash\n$mkdir Gone\n$cd Gone\n$vim main.go\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/jacksonyoudi/gomodone\"\n)\n\nfunc main() {\n\tfmt.Println(gomodone.SayHi(\"Roberto\"))\n}\n```\n\n代码写好了，我们生成 go mod文件\n\n```bash\ngo mod init Gone\n```\n上面命令执行完，会生成 go mod文件\n看下mod文件：\n\n```bash\nmodule Gone\n\ngo 1.14\n\nrequire (\n\tgithub.com/jacksonyoudi/gomodone v1.0.0\n)\n```\n\n\n```bash\n$go mod tidy\ngo: finding module for package github.com/jacksonyoudi/gomodone\ngo: found github.com/jacksonyoudi/gomodone in github.com/jacksonyoudi/gomodone v1.0.0\n```\n同时还生成了go.sum, 其中包含软件包的哈希值，以确保我们具有正确的版本和文件。\n\n```bash\ngithub.com/jacksonyoudi/gomodone v1.0.1 h1:jFd+qZlAB0R3zqrC9kwO8IgPrAdayMUS0rSHMDc/uG8=\ngithub.com/jacksonyoudi/gomodone v1.0.1/go.mod h1:XWi+BLbuiuC2YM8Qz4yQzTSPtHt3T3hrlNN2pNlyA94=\ngithub.com/jacksonyoudi/gomodone/v2 v2.0.0 h1:GpzGeXCx/Xv2ueiZJ8hEhFwLu7xjxLBjkOYSmg8Ya/w=\ngithub.com/jacksonyoudi/gomodone/v2 v2.0.0/go.mod h1:L8uFPSZNHoAhpaePWUfKmGinjufYdw9c2i70xtBorSw=\n```\n这个内容是下面的，需要操作执行的结果\n\n\n\ngo run main.go就可以运行了\n\n### Making a bugfix release\n\n假如fix一个bug,我们在v1版本上进行修复\n\n修改代码如下：\n\n```go\n// say Hi to someone\nfunc SayHi(name string) string {\n-       return fmt.Sprintf(\"Hi, %s\", name)\n+       return fmt.Sprintf(\"Hi, %s!\", name)\n}\n```\n\n修复好，我们开始push\n\n```bash\n$ git commit -m \"Emphasize our friendliness\" say.go\n$ git tag v1.0.1\n$ git push --tags origin v1\n```\n\n#### Updating modules\n刚才fix bug，所以要在我们使用项目中更新\n\n这个需要我们手动执行更新module操作\n\n我们通过使用我们的好朋友来做到这一点go get：\n\n- 运行  `go get -u` 以使用最新的  minor  版本或修补程序版本（即它将从1.0.0更新到例如1.0.1，或者，如果可用，则更新为1.1.0）\n- 运行  go get -u=patch 以使用最新的  修补程序  版本（即，将更新为1.0.1但不更新  为1.1.0）\n- 运行go get package@version 以更新到特定版本（例如github.com/jacksonyoudi/gomodone@v1.0.1）\n\n目前module最新的也是v1.0.1\n\n```bash\n// 更新最新\n$go get -u\n$go get -u=patch\n//指定包，指定版本\n$go get github.com/jacksonyoudi/gomodone@v1.0.1\n```\n操作完，go.mod文件会修改如下:\n\n```go\nmodule Gone\n\ngo 1.14\n\nrequire (\n\tgithub.com/jacksonyoudi/gomodone v1.0.1\n)\n```\n\n\n\n#### Major versions\n根据语义版本语义，主要版本与次要版本  不同。主要版本可能会破坏向后兼容性。从Go模块的角度来看，主要版本是  完全不同的软件包。乍一看这听起来很奇怪，但这是有道理的：两个不兼容的库版本是两个不同的库。\n比如下面修改，完全破坏了兼容性。\n\n```go\npackage gomodone\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\n\n// Hi returns a friendly greeting\n// Hi returns a friendly greeting in language lang\nfunc SayHi(name, lang string) (string, error) {\n\tswitch lang {\n\tcase \"en\":\n\t\treturn fmt.Sprintf(\"Hi, %s!\", name), nil\n\tcase \"pt\":\n\t\treturn fmt.Sprintf(\"Oi, %s!\", name), nil\n\tcase \"es\":\n\t\treturn fmt.Sprintf(\"¡Hola, %s!\", name), nil\n\tcase \"fr\":\n\t\treturn fmt.Sprintf(\"Bonjour, %s!\", name), nil\n\tdefault:\n\t\treturn \"\", errors.New(\"unknown language\")\n\t}\n}\n```\n\n\n如上，我们需要不同的大版本，这种情况下\n\n修改 go.mod如下\n\n```go\nmodule github.com/jacksonyoudi/gomodone/v2\n\ngo 1.14\n```\n\n然后，重新tag，push\n\n```bash\n$ git commit say.go -m \"Change Hi to allow multilang\"\n$ git checkout -b v2 # 用于v2版本，后续修复v2\n$ git commit go.mod -m \"Bump version to v2\"\n$ git tag v2.0.0\n$ git push --tags origin v2 \n```\n\n### Updating to a major version\n即使发布了库的新不兼容版本，现有软件 也不会中断，因为它将继续使用现有版本1.0.1。go get -u 将不会获得版本2.0.0。\n如果想使用v2.0.0,代码改成如下：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n    \"github.com/jacksonyoudi/gomodone/v2\"\n)\n\nfunc main() {\n\tg, err := gomodone.SayHi(\"Roberto\", \"pt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(g)\n}\n```\n执行 go mod tidy\n\n```bash\ngo: finding module for package github.com/jacksonyoudi/gomodone/v2\ngo: downloading github.com/jacksonyoudi/gomodone/v2 v2.0.0\ngo: found github.com/jacksonyoudi/gomodone/v2 in github.com/jacksonyoudi/gomodone/v2 v2.0.0\n```\n\n当然，两个版本都可以同时使用, 使用别名\n如下：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/jacksonyoudi/gomodone\"\n\tmv2 \"github.com/jacksonyoudi/gomodone/v2\"\n)\n\nfunc main() {\n\tg, err := mv2.SayHi(\"Roberto\", \"pt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(g)\n\n\tfmt.Println(gomodone.SayHi(\"Roberto\"))\n}\n\n```\n\n执行一下 `go mod tidy`\n\n### Vendoring\n\n默认是忽略vendor的，如果想在项目目录下有vendor可以执行下面命令\n```\n$go vendor\n```\n\n当然，如果构建程序的时候，希望使用vendor中的依赖，\n\n```go\n$ go build -mod vendor\n```\n\n\n### IDEA下开发GO\n\n1. 创建go项目\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/IqR0yI.jpg)\n\n2. 创建完项目，会自动生成go mod文件\n   如果需要修改，可以手动修改，加入git等操作\n\n3. 写业务逻辑代码\n   \n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/ZNN4tE.jpg)\n4. 解决依赖，更新go.mod\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/CxoGM9.jpg)\n\n5. go build\n","slug":"go-mod-use","published":1,"updated":"2021-07-31T13:00:26.026Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckrrtsc5r000kb6uqdy2x8714","content":"<p>最近由于换工作，开始交接工作。整理以前的工作内容，由于组内就我一个在做go和大数据。 所以开发没有规划，当时是怎么快怎么来。go也是使用最传统的go path的方式管理的。都是手动管理依赖的。现在交接给他人，需要多人开发，发现很多问题。比如版本问题，各种依赖的问题等等。</p>\n<p>由于工作原因，几乎所有主流语言都写过。所以，对应语言包管理工具也都了解和使用过。我前面有写过maven的使用。<br>maven是使用过的功能最强大的包管理工具了，maven定位是项目管理工具。pip和npm都是及格的产品。</p>\n<p>我个人觉得，一个包管理工具应该有以下功能：</p>\n<h3 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h3><ol>\n<li>依赖管理</li>\n<li>依赖包版本控制</li>\n<li>对应的包管理平台</li>\n<li>可以私有化部署</li>\n</ol>\n<p>加分：<br>5. 代码包是否可以复用<br>6. 构建，测试,打包<br>7. 发布上线</p>\n<p>对比上面几点：<br>目前做的最好的也就 maven了，gradle没有使用过，不知道。</p>\n<p>今天主角是go mod，先来谈谈没有使用go mod之前的问题。</p>\n<h3 id=\"使用go-path问题\"><a href=\"#使用go-path问题\" class=\"headerlink\" title=\"使用go path问题\"></a>使用go path问题</h3><ol>\n<li>代码开发必须在go path src目录下，不然，就有问题。</li>\n<li>依赖手动管理</li>\n<li>依赖包没有版本可言</li>\n</ol>\n<p>从这个看， go path不算包管理工具</p>\n<h3 id=\"govendor\"><a href=\"#govendor\" class=\"headerlink\" title=\"govendor\"></a>govendor</h3><ol>\n<li>解决了包依赖，一个配置文件就管理</li>\n<li>依赖包全都下载到项目vendor下，每个项目都把有一份。拉取项目时,开始怀疑人生。</li>\n</ol>\n<h3 id=\"go-mod介绍\"><a href=\"#go-mod介绍\" class=\"headerlink\" title=\"go mod介绍\"></a>go mod介绍</h3><p>go modules 是 golang 1.11 新加的特性。现在1.12 已经发布了，是时候用起来了。Modules官方定义为：</p>\n<blockquote>\n<p>模块是相关Go包的集合。modules是源代码交换和版本控制的单元。 go命令直接支持使用modules，包括记录和解析对其他模块的依赖性。modules替换旧的基于GOPATH的方法来指定在给定构建中使用哪些源文件。</p>\n</blockquote>\n<h3 id=\"如何使用go-mod\"><a href=\"#如何使用go-mod\" class=\"headerlink\" title=\"如何使用go mod\"></a>如何使用go mod</h3><p>首先，必须升级go到1.11,目前版本是1.14<br>下面我以我自己升级演示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token comment\">### 卸载旧版本，删除对应文件</span>\nbrew uninstall -f go\n\n<span class=\"token comment\">### 更新一下brew</span>\n\nbrew update\n\n\n<span class=\"token comment\">### 安装go</span>\nbrew <span class=\"token function\">install</span> go<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面升级完了，使用 <code>go version</code>看下版本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">go version go1.14.1 darwin/amd64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面设置go mod和go proxy</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOBIN</span><span class=\"token operator\">=</span>/Users/youdi/go/bin\ngo <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GO111MODULE</span><span class=\"token operator\">=</span>on\ngo <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.cn,direct // 使用七牛云的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>注意： go env -w会将配置写到  <code>GOENV=\"/Users/youdi/Library/Application Support/go/env\"</code></p>\n<p>下面看下我的配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">GO111MODULE=\"on\"\nGOARCH=\"amd64\"\nGOBIN=\"/Users/youdi/go/bin\"\nGOCACHE=\"/Users/youdi/Library/Caches/go-build\"\nGOENV=\"/Users/youdi/Library/Application Support/go/env\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOINSECURE=\"\"\nGONOPROXY=\"\"\nGONOSUMDB=\"\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/youdi/go\"\nGOPRIVATE=\"\"\nGOPROXY=\"https://goproxy.cn,direct\"\nGOROOT=\"/usr/local/go\"\nGOSUMDB=\"off\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nAR=\"ar\"\nCC=\"clang\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"/dev/null\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/8m/v_1j4dgs7rzgqq4p_4_8k_nr0000gn/T/go-build221113671=/tmp/go-build -gno-record-gcc-switches -fno-common\"\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>我们看一下，我修改的内容</p>\n<p>cat /Users/youdi/Library/Application Support/go/env</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">GO111MODULE</span><span class=\"token operator\">=</span>on\n<span class=\"token assign-left variable\">GOBIN</span><span class=\"token operator\">=</span>/Users/youdi/go/bin\n<span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.cn,direct\n<span class=\"token assign-left variable\">GOSUMDB</span><span class=\"token operator\">=</span>off<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"GO111MODULE\"><a href=\"#GO111MODULE\" class=\"headerlink\" title=\"GO111MODULE\"></a>GO111MODULE</h3><p>GO111MODULE 有三个值：off, on和auto（默认值）。</p>\n<p>GO111MODULE=off，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。<br>GO111MODULE=on，go命令行会使用modules，而一点也不会去GOPATH目录下查找。<br>GO111MODULE=auto，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：</p>\n<pre><code>当前目录在GOPATH/src之外且该目录包含go.mod文件\n当前文件在包含go.mod文件的目录下面。\n</code></pre>\n<p>当modules功能启用时，依赖包的存放位置变更为$GOPATH/pkg，允许同一个package多个版本并存，且多个项目可以共享缓存的 module</p>\n<p>我们看下目录：</p>\n<p>cd /Users/youdi/go/pkg</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">├── darwin_amd64\n│&nbsp;&nbsp; ├── github.com\n│&nbsp;&nbsp; ├── go.etcd.io\n│&nbsp;&nbsp; ├── golang\n│&nbsp;&nbsp; ├── golang.org\n│&nbsp;&nbsp; ├── gopkg.in\n│&nbsp;&nbsp; ├── quickstart\n│&nbsp;&nbsp; └── uc.a\n├── mod\n│&nbsp;&nbsp; ├── cache\n│&nbsp;&nbsp; ├── github.com\n│&nbsp;&nbsp; ├── golang.org\n│&nbsp;&nbsp; ├── google.golang.org\n│&nbsp;&nbsp; └── gopkg.in\n└── sumdb\n    └── sum.golang.org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"go-mod命令\"><a href=\"#go-mod命令\" class=\"headerlink\" title=\"go mod命令\"></a>go mod命令</h3><p>golang 提供了 <code>go mod</code>命令来管理包。</p>\n<p>go help mod</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\nGo mod provides access to operations on modules.\n\nNote that support <span class=\"token keyword\">for</span> modules is built into all the go commands,\nnot just <span class=\"token string\">'go mod'</span><span class=\"token builtin class-name\">.</span> For example, day-to-day adding, removing, upgrading,\nand downgrading of dependencies should be <span class=\"token keyword\">done</span> using <span class=\"token string\">'go get'</span><span class=\"token builtin class-name\">.</span>\nSee <span class=\"token string\">'go help modules'</span> <span class=\"token keyword\">for</span> an overview of module functionality.\n\nUsage:\n\n\tgo mod <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>arguments<span class=\"token punctuation\">]</span>\n\nThe commands are:\n\n\tdownload    download modules to <span class=\"token builtin class-name\">local</span> cache\n\tedit        edit go.mod from tools or scripts\n\tgraph       print module requirement graph\n\tinit        initialize new module <span class=\"token keyword\">in</span> current directory\n\ttidy        <span class=\"token function\">add</span> missing and remove unused modules\n\tvendor      <span class=\"token function\">make</span> vendored copy of dependencies\n\tverify      verify dependencies have expected content\n\twhy         explain why packages or modules are needed\n\nUse <span class=\"token string\">\"go help mod &lt;command&gt;\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information about a command.\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>go mod 有以下命令：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>download</td>\n<td>download modules to local cache(下载依赖包)</td>\n</tr>\n<tr>\n<td>edit</td>\n<td>edit go.mod from tools or scripts（编辑go.mod)</td>\n</tr>\n<tr>\n<td>graph</td>\n<td>print module requirement graph (打印模块依赖图)</td>\n</tr>\n<tr>\n<td>verify</td>\n<td>initialize new module in current directory（在当前目录初始化mod）</td>\n</tr>\n<tr>\n<td>tidy</td>\n<td>add missing and remove unused modules(拉取缺少的模块，移除不用的模块)</td>\n</tr>\n<tr>\n<td>vendor</td>\n<td>make vendored copy of dependencies(将依赖复制到vendor下)</td>\n</tr>\n<tr>\n<td>verify</td>\n<td>verify dependencies have expected content (验证依赖是否正确）</td>\n</tr>\n<tr>\n<td>why</td>\n<td>explain why packages or modules are needed(解释为什么需要依赖)</td>\n</tr>\n</tbody></table>\n<p>比较常用的是 <code>init</code>,<code>tidy</code>, <code>edit</code></p>\n<h3 id=\"使用go-mod管理一个新项目\"><a href=\"#使用go-mod管理一个新项目\" class=\"headerlink\" title=\"使用go mod管理一个新项目\"></a>使用go mod管理一个新项目</h3><h4 id=\"1-初始化项目\"><a href=\"#1-初始化项目\" class=\"headerlink\" title=\"1. 初始化项目\"></a>1. 初始化项目</h4><p>可以随便找一个目录创建项目，我使用习惯用IDEA进行创建</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> Gone\n<span class=\"token builtin class-name\">cd</span> Gone\ngo mod init Gone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>查看一下 go.mod文件</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">module Gone\n\n<span class=\"token keyword\">go</span> <span class=\"token number\">1.14</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>go.mod文件一旦创建后，它的内容将会被go toolchain全面掌控。go toolchain会在各类命令执行时，比如go get、go build、go mod等修改和维护go.mod文件。</p>\n<p>go.mod 提供了module, require、replace和exclude 四个命令</p>\n<ul>\n<li><code>module</code> 语句指定包的名字（路径）</li>\n<li><code>require</code> 语句指定的依赖项模块</li>\n<li><code>replace</code> 语句可以替换依赖项模块</li>\n<li><code>exclude</code> 语句可以忽略依赖项模块</li>\n</ul>\n<h4 id=\"2-添加依赖\"><a href=\"#2-添加依赖\" class=\"headerlink\" title=\"2. 添加依赖\"></a>2. 添加依赖</h4><p>创建 main.go文件</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"github.com/gin-gonic/gin\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tr <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ping\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pong\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// listen and serve on 0.0.0.0:8080 (for windows \"localhost:8080\")</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>执行 go run main.go 运行代码会发现 go mod 会自动查找依赖自动下载<br>再查看 <code>go.mod</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module Gone\n\ngo <span class=\"token number\">1.14</span>\n\nrequire github.com/gin-gonic/gin v1.6.3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>go module 安装 package 的原則是先拉最新的 release tag，若无tag则拉最新的commit</p>\n<p>go 会自动生成一个 go.sum 文件来记录 dependency tree</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/JhSGHb.jpg\"></p>\n<p>再次执行脚本 go run main.go发现跳过了检查并安装依赖的步骤。</p>\n<p>可以使用命令 go list -m -u all 来检查可以升级的package，使用go get -u need-upgrade-package 升级后会将新的依赖版本更新到go.mod * 也可以使用 go get -u 升级所有依赖</p>\n<p>去mod包缓存下看看</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/Users/youdi/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"go-get升级\"><a href=\"#go-get升级\" class=\"headerlink\" title=\"go get升级\"></a>go get升级</h3><ul>\n<li>运行 go get -u 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)</li>\n<li>运行 go get -u=patch 将会升级到最新的修订版本</li>\n<li>运行 go get package@version 将会升级到指定的版本号version</li>\n<li>运行go get如果有版本的更改，那么go.mod文件也会更改</li>\n</ul>\n<h3 id=\"使用replace替换无法直接获取的package\"><a href=\"#使用replace替换无法直接获取的package\" class=\"headerlink\" title=\"使用replace替换无法直接获取的package\"></a>使用replace替换无法直接获取的package</h3><p>由于某些已知的原因，并不是所有的package都能成功下载，比如：golang.org下的包。</p>\n<p>modules 可以通过在 go.mod 文件中使用 replace 指令替换成github上对应的库，比如：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">replace <span class=\"token punctuation\">(</span>\n\tgolang<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>x<span class=\"token operator\">/</span>crypto v0<span class=\"token punctuation\">.</span><span class=\"token number\">0.0</span><span class=\"token operator\">-</span><span class=\"token number\">20190313024323</span><span class=\"token operator\">-</span>a1f597ede03a <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>golang<span class=\"token operator\">/</span>crypto v0<span class=\"token punctuation\">.</span><span class=\"token number\">0.0</span><span class=\"token operator\">-</span><span class=\"token number\">20190313024323</span><span class=\"token operator\">-</span>a1f597ede03a\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"go-mod发布和使用\"><a href=\"#go-mod发布和使用\" class=\"headerlink\" title=\"go mod发布和使用\"></a>go mod发布和使用</h3><p>参考Roberto Selbach写的go mod入门文章，文末，我给出链接</p>\n<h3 id=\"Creating-a-Module\"><a href=\"#Creating-a-Module\" class=\"headerlink\" title=\"Creating a Module\"></a>Creating a Module</h3><p>如果你设置好go mod了，那你就可以在任何目录下随便创建</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$mkdir</span> gomodone\n<span class=\"token variable\">$cd</span> gomodone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>在这个目录下创建一个文件<code>say.go</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> gomodone\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span> \n\n<span class=\"token comment\">// say Hi to someone</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi, %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>初始化一个 <code>go.mod</code>文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ go mod init github.com/jacksonyoudi/gomodone\ngo: creating new go.mod: module github.com/jacksonyoudi/gomodone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>查看 go.mod内容如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jacksonyoudi<span class=\"token operator\">/</span>gomodone\n<span class=\"token keyword\">go</span> <span class=\"token number\">1.14</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面我们要将这个module发布到github上，然后在另外一个程序使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$git</span> init\n<span class=\"token variable\">$vim</span> .gitiiignore\n<span class=\"token variable\">$git</span> commit -am <span class=\"token string\">\"init\"</span>\n// github创建对应的repo\n<span class=\"token variable\">$git</span> remote <span class=\"token function\">add</span> origin git@github.com:jacksonyoudi/gomodone.git\n<span class=\"token variable\">$git</span> push -u origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行完，上面我们就相当于发布完了。</p>\n<p>如果有人需要使用，就可以使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get github.com/jacksonyoudi/gomodone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个时候没有加tag，所以，没有版本的控制。默认是v0.0.0后面接上时间和commitid。如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gomodone@v0.0.0-20200517004046-ee882713fd1e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>官方不建议这样做，没有进行版本控制管理。</p>\n<h3 id=\"module-versioning\"><a href=\"#module-versioning\" class=\"headerlink\" title=\"module versioning\"></a>module versioning</h3><p>使用tag，进行版本控制</p>\n<h4 id=\"making-a-release\"><a href=\"#making-a-release\" class=\"headerlink\" title=\"making a release\"></a>making a release</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag v1.0.0\n<span class=\"token function\">git</span> push --tags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>操作完，我们的module就发布了一个v1.0.0的版本了。</p>\n<p>推荐在这个状态下，再切出一个分支，用于后续v1.0.0的修复推送,不要直接在master分支修复</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$git</span> checkout -b v1\n<span class=\"token variable\">$git</span> push -u origin v1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"use-our-module\"><a href=\"#use-our-module\" class=\"headerlink\" title=\"use our module\"></a>use our module</h3><p>上面已经发布了一个v1.0.0的版本，我们可以在另一个项目中使用，创建一个go的项目</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$mkdir</span> Gone\n<span class=\"token variable\">$cd</span> Gone\n<span class=\"token variable\">$vim</span> main.go<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"github.com/jacksonyoudi/gomodone\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>gomodone<span class=\"token punctuation\">.</span><span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Roberto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码写好了，我们生成 go mod文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go mod init Gone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上面命令执行完，会生成 go mod文件<br>看下mod文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module Gone\n\ngo <span class=\"token number\">1.14</span>\n\nrequire <span class=\"token punctuation\">(</span>\n\tgithub.com/jacksonyoudi/gomodone v1.0.0\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$go</span> mod tidy\ngo: finding module <span class=\"token keyword\">for</span> package github.com/jacksonyoudi/gomodone\ngo: found github.com/jacksonyoudi/gomodone <span class=\"token keyword\">in</span> github.com/jacksonyoudi/gomodone v1.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>同时还生成了go.sum, 其中包含软件包的哈希值，以确保我们具有正确的版本和文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">github.com/jacksonyoudi/gomodone v1.0.1 h1:jFd+qZlAB0R3zqrC9kwO8IgPrAdayMUS0rSHMDc/uG8<span class=\"token operator\">=</span>\ngithub.com/jacksonyoudi/gomodone v1.0.1/go.mod h1:XWi+BLbuiuC2YM8Qz4yQzTSPtHt3T3hrlNN2pNlyA94<span class=\"token operator\">=</span>\ngithub.com/jacksonyoudi/gomodone/v2 v2.0.0 h1:GpzGeXCx/Xv2ueiZJ8hEhFwLu7xjxLBjkOYSmg8Ya/w<span class=\"token operator\">=</span>\ngithub.com/jacksonyoudi/gomodone/v2 v2.0.0/go.mod h1:L8uFPSZNHoAhpaePWUfKmGinjufYdw9c2i70xtBorSw<span class=\"token operator\">=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个内容是下面的，需要操作执行的结果</p>\n<p>go run main.go就可以运行了</p>\n<h3 id=\"Making-a-bugfix-release\"><a href=\"#Making-a-bugfix-release\" class=\"headerlink\" title=\"Making a bugfix release\"></a>Making a bugfix release</h3><p>假如fix一个bug,我们在v1版本上进行修复</p>\n<p>修改代码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// say Hi to someone</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">-</span>       <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi, %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>       <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi, %s!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修复好，我们开始push</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Emphasize our friendliness\"</span> say.go\n$ <span class=\"token function\">git</span> tag v1.0.1\n$ <span class=\"token function\">git</span> push --tags origin v1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Updating-modules\"><a href=\"#Updating-modules\" class=\"headerlink\" title=\"Updating modules\"></a>Updating modules</h4><p>刚才fix bug，所以要在我们使用项目中更新</p>\n<p>这个需要我们手动执行更新module操作</p>\n<p>我们通过使用我们的好朋友来做到这一点go get：</p>\n<ul>\n<li>运行  <code>go get -u</code> 以使用最新的  minor  版本或修补程序版本（即它将从1.0.0更新到例如1.0.1，或者，如果可用，则更新为1.1.0）</li>\n<li>运行  go get -u=patch 以使用最新的  修补程序  版本（即，将更新为1.0.1但不更新  为1.1.0）</li>\n<li>运行go get package@version 以更新到特定版本（例如github.com/jacksonyoudi/<a href=\"mailto:gomodone@v1.0.1\">gomodone@v1.0.1</a>）</li>\n</ul>\n<p>目前module最新的也是v1.0.1</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 更新最新\n<span class=\"token variable\">$go</span> get -u\n<span class=\"token variable\">$go</span> get -u<span class=\"token operator\">=</span>patch\n//指定包，指定版本\n<span class=\"token variable\">$go</span> get github.com/jacksonyoudi/gomodone@v1.0.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>操作完，go.mod文件会修改如下:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">module Gone\n\n<span class=\"token keyword\">go</span> <span class=\"token number\">1.14</span>\n\nrequire <span class=\"token punctuation\">(</span>\n\tgithub<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jacksonyoudi<span class=\"token operator\">/</span>gomodone v1<span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"Major-versions\"><a href=\"#Major-versions\" class=\"headerlink\" title=\"Major versions\"></a>Major versions</h4><p>根据语义版本语义，主要版本与次要版本  不同。主要版本可能会破坏向后兼容性。从Go模块的角度来看，主要版本是  完全不同的软件包。乍一看这听起来很奇怪，但这是有道理的：两个不兼容的库版本是两个不同的库。<br>比如下面修改，完全破坏了兼容性。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> gomodone\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"errors\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Hi returns a friendly greeting</span>\n<span class=\"token comment\">// Hi returns a friendly greeting in language lang</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> lang <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> lang <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi, %s!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"pt\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oi, %s!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"es\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"¡Hola, %s!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"fr\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bonjour, %s!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unknown language\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>如上，我们需要不同的大版本，这种情况下</p>\n<p>修改 go.mod如下</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">module github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jacksonyoudi<span class=\"token operator\">/</span>gomodone<span class=\"token operator\">/</span>v2\n\n<span class=\"token keyword\">go</span> <span class=\"token number\">1.14</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，重新tag，push</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit say.go -m <span class=\"token string\">\"Change Hi to allow multilang\"</span>\n$ <span class=\"token function\">git</span> checkout -b v2 <span class=\"token comment\"># 用于v2版本，后续修复v2</span>\n$ <span class=\"token function\">git</span> commit go.mod -m <span class=\"token string\">\"Bump version to v2\"</span>\n$ <span class=\"token function\">git</span> tag v2.0.0\n$ <span class=\"token function\">git</span> push --tags origin v2 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Updating-to-a-major-version\"><a href=\"#Updating-to-a-major-version\" class=\"headerlink\" title=\"Updating to a major version\"></a>Updating to a major version</h3><p>即使发布了库的新不兼容版本，现有软件 也不会中断，因为它将继续使用现有版本1.0.1。go get -u 将不会获得版本2.0.0。<br>如果想使用v2.0.0,代码改成如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"github.com/jacksonyoudi/gomodone/v2\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tg<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> gomodone<span class=\"token punctuation\">.</span><span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Roberto\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pt\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行 go mod tidy</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go: finding module <span class=\"token keyword\">for</span> package github.com/jacksonyoudi/gomodone/v2\ngo: downloading github.com/jacksonyoudi/gomodone/v2 v2.0.0\ngo: found github.com/jacksonyoudi/gomodone/v2 <span class=\"token keyword\">in</span> github.com/jacksonyoudi/gomodone/v2 v2.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>当然，两个版本都可以同时使用, 使用别名<br>如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"github.com/jacksonyoudi/gomodone\"</span>\n\tmv2 <span class=\"token string\">\"github.com/jacksonyoudi/gomodone/v2\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tg<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mv2<span class=\"token punctuation\">.</span><span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Roberto\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pt\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>gomodone<span class=\"token punctuation\">.</span><span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Roberto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行一下 <code>go mod tidy</code></p>\n<h3 id=\"Vendoring\"><a href=\"#Vendoring\" class=\"headerlink\" title=\"Vendoring\"></a>Vendoring</h3><p>默认是忽略vendor的，如果想在项目目录下有vendor可以执行下面命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$go vendor<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>当然，如果构建程序的时候，希望使用vendor中的依赖，</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">$ <span class=\"token keyword\">go</span> build <span class=\"token operator\">-</span>mod vendor<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"IDEA下开发GO\"><a href=\"#IDEA下开发GO\" class=\"headerlink\" title=\"IDEA下开发GO\"></a>IDEA下开发GO</h3><ol>\n<li>创建go项目</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/IqR0yI.jpg\"></p>\n<ol start=\"2\">\n<li><p>创建完项目，会自动生成go mod文件<br>如果需要修改，可以手动修改，加入git等操作</p>\n</li>\n<li><p>写业务逻辑代码</p>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/ZNN4tE.jpg\"><br>4. 解决依赖，更新go.mod</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/CxoGM9.jpg\"></p>\n<ol start=\"5\">\n<li>go build</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>最近由于换工作，开始交接工作。整理以前的工作内容，由于组内就我一个在做go和大数据。 所以开发没有规划，当时是怎么快怎么来。go也是使用最传统的go path的方式管理的。都是手动管理依赖的。现在交接给他人，需要多人开发，发现很多问题。比如版本问题，各种依赖的问题等等。</p>\n<p>由于工作原因，几乎所有主流语言都写过。所以，对应语言包管理工具也都了解和使用过。我前面有写过maven的使用。<br>maven是使用过的功能最强大的包管理工具了，maven定位是项目管理工具。pip和npm都是及格的产品。</p>\n<p>我个人觉得，一个包管理工具应该有以下功能：</p>\n<h3 id=\"基本功能\"><a href=\"#基本功能\" class=\"headerlink\" title=\"基本功能\"></a>基本功能</h3><ol>\n<li>依赖管理</li>\n<li>依赖包版本控制</li>\n<li>对应的包管理平台</li>\n<li>可以私有化部署</li>\n</ol>\n<p>加分：<br>5. 代码包是否可以复用<br>6. 构建，测试,打包<br>7. 发布上线</p>\n<p>对比上面几点：<br>目前做的最好的也就 maven了，gradle没有使用过，不知道。</p>\n<p>今天主角是go mod，先来谈谈没有使用go mod之前的问题。</p>\n<h3 id=\"使用go-path问题\"><a href=\"#使用go-path问题\" class=\"headerlink\" title=\"使用go path问题\"></a>使用go path问题</h3><ol>\n<li>代码开发必须在go path src目录下，不然，就有问题。</li>\n<li>依赖手动管理</li>\n<li>依赖包没有版本可言</li>\n</ol>\n<p>从这个看， go path不算包管理工具</p>\n<h3 id=\"govendor\"><a href=\"#govendor\" class=\"headerlink\" title=\"govendor\"></a>govendor</h3><ol>\n<li>解决了包依赖，一个配置文件就管理</li>\n<li>依赖包全都下载到项目vendor下，每个项目都把有一份。拉取项目时,开始怀疑人生。</li>\n</ol>\n<h3 id=\"go-mod介绍\"><a href=\"#go-mod介绍\" class=\"headerlink\" title=\"go mod介绍\"></a>go mod介绍</h3><p>go modules 是 golang 1.11 新加的特性。现在1.12 已经发布了，是时候用起来了。Modules官方定义为：</p>\n<blockquote>\n<p>模块是相关Go包的集合。modules是源代码交换和版本控制的单元。 go命令直接支持使用modules，包括记录和解析对其他模块的依赖性。modules替换旧的基于GOPATH的方法来指定在给定构建中使用哪些源文件。</p>\n</blockquote>\n<h3 id=\"如何使用go-mod\"><a href=\"#如何使用go-mod\" class=\"headerlink\" title=\"如何使用go mod\"></a>如何使用go mod</h3><p>首先，必须升级go到1.11,目前版本是1.14<br>下面我以我自己升级演示：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token comment\">### 卸载旧版本，删除对应文件</span>\nbrew uninstall -f go\n\n<span class=\"token comment\">### 更新一下brew</span>\n\nbrew update\n\n\n<span class=\"token comment\">### 安装go</span>\nbrew <span class=\"token function\">install</span> go<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面升级完了，使用 <code>go version</code>看下版本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">go version go1.14.1 darwin&#x2F;amd64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下面设置go mod和go proxy</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOBIN</span><span class=\"token operator\">=</span>/Users/youdi/go/bin\ngo <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GO111MODULE</span><span class=\"token operator\">=</span>on\ngo <span class=\"token function\">env</span> -w <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.cn,direct // 使用七牛云的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>注意： go env -w会将配置写到  <code>GOENV=&quot;/Users/youdi/Library/Application Support/go/env&quot;</code></p>\n<p>下面看下我的配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">GO111MODULE&#x3D;&quot;on&quot;\nGOARCH&#x3D;&quot;amd64&quot;\nGOBIN&#x3D;&quot;&#x2F;Users&#x2F;youdi&#x2F;go&#x2F;bin&quot;\nGOCACHE&#x3D;&quot;&#x2F;Users&#x2F;youdi&#x2F;Library&#x2F;Caches&#x2F;go-build&quot;\nGOENV&#x3D;&quot;&#x2F;Users&#x2F;youdi&#x2F;Library&#x2F;Application Support&#x2F;go&#x2F;env&quot;\nGOEXE&#x3D;&quot;&quot;\nGOFLAGS&#x3D;&quot;&quot;\nGOHOSTARCH&#x3D;&quot;amd64&quot;\nGOHOSTOS&#x3D;&quot;darwin&quot;\nGOINSECURE&#x3D;&quot;&quot;\nGONOPROXY&#x3D;&quot;&quot;\nGONOSUMDB&#x3D;&quot;&quot;\nGOOS&#x3D;&quot;darwin&quot;\nGOPATH&#x3D;&quot;&#x2F;Users&#x2F;youdi&#x2F;go&quot;\nGOPRIVATE&#x3D;&quot;&quot;\nGOPROXY&#x3D;&quot;https:&#x2F;&#x2F;goproxy.cn,direct&quot;\nGOROOT&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&quot;\nGOSUMDB&#x3D;&quot;off&quot;\nGOTMPDIR&#x3D;&quot;&quot;\nGOTOOLDIR&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&#x2F;pkg&#x2F;tool&#x2F;darwin_amd64&quot;\nGCCGO&#x3D;&quot;gccgo&quot;\nAR&#x3D;&quot;ar&quot;\nCC&#x3D;&quot;clang&quot;\nCXX&#x3D;&quot;clang++&quot;\nCGO_ENABLED&#x3D;&quot;1&quot;\nGOMOD&#x3D;&quot;&#x2F;dev&#x2F;null&quot;\nCGO_CFLAGS&#x3D;&quot;-g -O2&quot;\nCGO_CPPFLAGS&#x3D;&quot;&quot;\nCGO_CXXFLAGS&#x3D;&quot;-g -O2&quot;\nCGO_FFLAGS&#x3D;&quot;-g -O2&quot;\nCGO_LDFLAGS&#x3D;&quot;-g -O2&quot;\nPKG_CONFIG&#x3D;&quot;pkg-config&quot;\nGOGCCFLAGS&#x3D;&quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length&#x3D;0 -fdebug-prefix-map&#x3D;&#x2F;var&#x2F;folders&#x2F;8m&#x2F;v_1j4dgs7rzgqq4p_4_8k_nr0000gn&#x2F;T&#x2F;go-build221113671&#x3D;&#x2F;tmp&#x2F;go-build -gno-record-gcc-switches -fno-common&quot;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>我们看一下，我修改的内容</p>\n<p>cat /Users/youdi/Library/Application Support/go/env</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">GO111MODULE</span><span class=\"token operator\">=</span>on\n<span class=\"token assign-left variable\">GOBIN</span><span class=\"token operator\">=</span>/Users/youdi/go/bin\n<span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.cn,direct\n<span class=\"token assign-left variable\">GOSUMDB</span><span class=\"token operator\">=</span>off<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"GO111MODULE\"><a href=\"#GO111MODULE\" class=\"headerlink\" title=\"GO111MODULE\"></a>GO111MODULE</h3><p>GO111MODULE 有三个值：off, on和auto（默认值）。</p>\n<p>GO111MODULE=off，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。<br>GO111MODULE=on，go命令行会使用modules，而一点也不会去GOPATH目录下查找。<br>GO111MODULE=auto，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形：</p>\n<pre><code>当前目录在GOPATH/src之外且该目录包含go.mod文件\n当前文件在包含go.mod文件的目录下面。\n</code></pre>\n<p>当modules功能启用时，依赖包的存放位置变更为$GOPATH/pkg，允许同一个package多个版本并存，且多个项目可以共享缓存的 module</p>\n<p>我们看下目录：</p>\n<p>cd /Users/youdi/go/pkg</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">├── darwin_amd64\n│   ├── github.com\n│   ├── go.etcd.io\n│   ├── golang\n│   ├── golang.org\n│   ├── gopkg.in\n│   ├── quickstart\n│   └── uc.a\n├── mod\n│   ├── cache\n│   ├── github.com\n│   ├── golang.org\n│   ├── google.golang.org\n│   └── gopkg.in\n└── sumdb\n    └── sum.golang.org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"go-mod命令\"><a href=\"#go-mod命令\" class=\"headerlink\" title=\"go mod命令\"></a>go mod命令</h3><p>golang 提供了 <code>go mod</code>命令来管理包。</p>\n<p>go help mod</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\nGo mod provides access to operations on modules.\n\nNote that support <span class=\"token keyword\">for</span> modules is built into all the go commands,\nnot just <span class=\"token string\">'go mod'</span><span class=\"token builtin class-name\">.</span> For example, day-to-day adding, removing, upgrading,\nand downgrading of dependencies should be <span class=\"token keyword\">done</span> using <span class=\"token string\">'go get'</span><span class=\"token builtin class-name\">.</span>\nSee <span class=\"token string\">'go help modules'</span> <span class=\"token keyword\">for</span> an overview of module functionality.\n\nUsage:\n\n\tgo mod <span class=\"token operator\">&lt;</span>command<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>arguments<span class=\"token punctuation\">]</span>\n\nThe commands are:\n\n\tdownload    download modules to <span class=\"token builtin class-name\">local</span> cache\n\tedit        edit go.mod from tools or scripts\n\tgraph       print module requirement graph\n\tinit        initialize new module <span class=\"token keyword\">in</span> current directory\n\ttidy        <span class=\"token function\">add</span> missing and remove unused modules\n\tvendor      <span class=\"token function\">make</span> vendored copy of dependencies\n\tverify      verify dependencies have expected content\n\twhy         explain why packages or modules are needed\n\nUse <span class=\"token string\">\"go help mod &lt;command>\"</span> <span class=\"token keyword\">for</span> <span class=\"token function\">more</span> information about a command.\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>go mod 有以下命令：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>download</td>\n<td>download modules to local cache(下载依赖包)</td>\n</tr>\n<tr>\n<td>edit</td>\n<td>edit go.mod from tools or scripts（编辑go.mod)</td>\n</tr>\n<tr>\n<td>graph</td>\n<td>print module requirement graph (打印模块依赖图)</td>\n</tr>\n<tr>\n<td>verify</td>\n<td>initialize new module in current directory（在当前目录初始化mod）</td>\n</tr>\n<tr>\n<td>tidy</td>\n<td>add missing and remove unused modules(拉取缺少的模块，移除不用的模块)</td>\n</tr>\n<tr>\n<td>vendor</td>\n<td>make vendored copy of dependencies(将依赖复制到vendor下)</td>\n</tr>\n<tr>\n<td>verify</td>\n<td>verify dependencies have expected content (验证依赖是否正确）</td>\n</tr>\n<tr>\n<td>why</td>\n<td>explain why packages or modules are needed(解释为什么需要依赖)</td>\n</tr>\n</tbody></table>\n<p>比较常用的是 <code>init</code>,<code>tidy</code>, <code>edit</code></p>\n<h3 id=\"使用go-mod管理一个新项目\"><a href=\"#使用go-mod管理一个新项目\" class=\"headerlink\" title=\"使用go mod管理一个新项目\"></a>使用go mod管理一个新项目</h3><h4 id=\"1-初始化项目\"><a href=\"#1-初始化项目\" class=\"headerlink\" title=\"1. 初始化项目\"></a>1. 初始化项目</h4><p>可以随便找一个目录创建项目，我使用习惯用IDEA进行创建</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> Gone\n<span class=\"token builtin class-name\">cd</span> Gone\ngo mod init Gone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>查看一下 go.mod文件</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">module Gone\n\n<span class=\"token keyword\">go</span> <span class=\"token number\">1.14</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>go.mod文件一旦创建后，它的内容将会被go toolchain全面掌控。go toolchain会在各类命令执行时，比如go get、go build、go mod等修改和维护go.mod文件。</p>\n<p>go.mod 提供了module, require、replace和exclude 四个命令</p>\n<ul>\n<li><code>module</code> 语句指定包的名字（路径）</li>\n<li><code>require</code> 语句指定的依赖项模块</li>\n<li><code>replace</code> 语句可以替换依赖项模块</li>\n<li><code>exclude</code> 语句可以忽略依赖项模块</li>\n</ul>\n<h4 id=\"2-添加依赖\"><a href=\"#2-添加依赖\" class=\"headerlink\" title=\"2. 添加依赖\"></a>2. 添加依赖</h4><p>创建 main.go文件</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"github.com/gin-gonic/gin\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tr <span class=\"token operator\">:=</span> gin<span class=\"token punctuation\">.</span><span class=\"token function\">Default</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ping\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> gin<span class=\"token punctuation\">.</span>H<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"pong\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// listen and serve on 0.0.0.0:8080 (for windows \"localhost:8080\")</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>执行 go run main.go 运行代码会发现 go mod 会自动查找依赖自动下载<br>再查看 <code>go.mod</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module Gone\n\ngo <span class=\"token number\">1.14</span>\n\nrequire github.com/gin-gonic/gin v1.6.3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>go module 安装 package 的原則是先拉最新的 release tag，若无tag则拉最新的commit</p>\n<p>go 会自动生成一个 go.sum 文件来记录 dependency tree</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/JhSGHb.jpg\"></p>\n<p>再次执行脚本 go run main.go发现跳过了检查并安装依赖的步骤。</p>\n<p>可以使用命令 go list -m -u all 来检查可以升级的package，使用go get -u need-upgrade-package 升级后会将新的依赖版本更新到go.mod * 也可以使用 go get -u 升级所有依赖</p>\n<p>去mod包缓存下看看</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/Users/youdi/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"go-get升级\"><a href=\"#go-get升级\" class=\"headerlink\" title=\"go get升级\"></a>go get升级</h3><ul>\n<li>运行 go get -u 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)</li>\n<li>运行 go get -u=patch 将会升级到最新的修订版本</li>\n<li>运行 go get package@version 将会升级到指定的版本号version</li>\n<li>运行go get如果有版本的更改，那么go.mod文件也会更改</li>\n</ul>\n<h3 id=\"使用replace替换无法直接获取的package\"><a href=\"#使用replace替换无法直接获取的package\" class=\"headerlink\" title=\"使用replace替换无法直接获取的package\"></a>使用replace替换无法直接获取的package</h3><p>由于某些已知的原因，并不是所有的package都能成功下载，比如：golang.org下的包。</p>\n<p>modules 可以通过在 go.mod 文件中使用 replace 指令替换成github上对应的库，比如：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">replace <span class=\"token punctuation\">(</span>\n\tgolang<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>x<span class=\"token operator\">/</span>crypto v0<span class=\"token punctuation\">.</span><span class=\"token number\">0.0</span><span class=\"token operator\">-</span><span class=\"token number\">20190313024323</span><span class=\"token operator\">-</span>a1f597ede03a <span class=\"token operator\">=</span><span class=\"token operator\">></span> github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>golang<span class=\"token operator\">/</span>crypto v0<span class=\"token punctuation\">.</span><span class=\"token number\">0.0</span><span class=\"token operator\">-</span><span class=\"token number\">20190313024323</span><span class=\"token operator\">-</span>a1f597ede03a\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"go-mod发布和使用\"><a href=\"#go-mod发布和使用\" class=\"headerlink\" title=\"go mod发布和使用\"></a>go mod发布和使用</h3><p>参考Roberto Selbach写的go mod入门文章，文末，我给出链接</p>\n<h3 id=\"Creating-a-Module\"><a href=\"#Creating-a-Module\" class=\"headerlink\" title=\"Creating a Module\"></a>Creating a Module</h3><p>如果你设置好go mod了，那你就可以在任何目录下随便创建</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$mkdir</span> gomodone\n<span class=\"token variable\">$cd</span> gomodone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>在这个目录下创建一个文件<code>say.go</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> gomodone\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span> \n\n<span class=\"token comment\">// say Hi to someone</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi, %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>初始化一个 <code>go.mod</code>文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ go mod init github.com/jacksonyoudi/gomodone\ngo: creating new go.mod: module github.com/jacksonyoudi/gomodone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>查看 go.mod内容如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jacksonyoudi<span class=\"token operator\">/</span>gomodone\n<span class=\"token keyword\">go</span> <span class=\"token number\">1.14</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>下面我们要将这个module发布到github上，然后在另外一个程序使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$git</span> init\n<span class=\"token variable\">$vim</span> .gitiiignore\n<span class=\"token variable\">$git</span> commit -am <span class=\"token string\">\"init\"</span>\n// github创建对应的repo\n<span class=\"token variable\">$git</span> remote <span class=\"token function\">add</span> origin git@github.com:jacksonyoudi/gomodone.git\n<span class=\"token variable\">$git</span> push -u origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行完，上面我们就相当于发布完了。</p>\n<p>如果有人需要使用，就可以使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go get github.com/jacksonyoudi/gomodone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这个时候没有加tag，所以，没有版本的控制。默认是v0.0.0后面接上时间和commitid。如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">gomodone@v0.0.0-20200517004046-ee882713fd1e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>官方不建议这样做，没有进行版本控制管理。</p>\n<h3 id=\"module-versioning\"><a href=\"#module-versioning\" class=\"headerlink\" title=\"module versioning\"></a>module versioning</h3><p>使用tag，进行版本控制</p>\n<h4 id=\"making-a-release\"><a href=\"#making-a-release\" class=\"headerlink\" title=\"making a release\"></a>making a release</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> tag v1.0.0\n<span class=\"token function\">git</span> push --tags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>操作完，我们的module就发布了一个v1.0.0的版本了。</p>\n<p>推荐在这个状态下，再切出一个分支，用于后续v1.0.0的修复推送,不要直接在master分支修复</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$git</span> checkout -b v1\n<span class=\"token variable\">$git</span> push -u origin v1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"use-our-module\"><a href=\"#use-our-module\" class=\"headerlink\" title=\"use our module\"></a>use our module</h3><p>上面已经发布了一个v1.0.0的版本，我们可以在另一个项目中使用，创建一个go的项目</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$mkdir</span> Gone\n<span class=\"token variable\">$cd</span> Gone\n<span class=\"token variable\">$vim</span> main.go<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"github.com/jacksonyoudi/gomodone\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>gomodone<span class=\"token punctuation\">.</span><span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Roberto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码写好了，我们生成 go mod文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go mod init Gone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上面命令执行完，会生成 go mod文件<br>看下mod文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module Gone\n\ngo <span class=\"token number\">1.14</span>\n\nrequire <span class=\"token punctuation\">(</span>\n\tgithub.com/jacksonyoudi/gomodone v1.0.0\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$go</span> mod tidy\ngo: finding module <span class=\"token keyword\">for</span> package github.com/jacksonyoudi/gomodone\ngo: found github.com/jacksonyoudi/gomodone <span class=\"token keyword\">in</span> github.com/jacksonyoudi/gomodone v1.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>同时还生成了go.sum, 其中包含软件包的哈希值，以确保我们具有正确的版本和文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">github.com/jacksonyoudi/gomodone v1.0.1 h1:jFd+qZlAB0R3zqrC9kwO8IgPrAdayMUS0rSHMDc/uG8<span class=\"token operator\">=</span>\ngithub.com/jacksonyoudi/gomodone v1.0.1/go.mod h1:XWi+BLbuiuC2YM8Qz4yQzTSPtHt3T3hrlNN2pNlyA94<span class=\"token operator\">=</span>\ngithub.com/jacksonyoudi/gomodone/v2 v2.0.0 h1:GpzGeXCx/Xv2ueiZJ8hEhFwLu7xjxLBjkOYSmg8Ya/w<span class=\"token operator\">=</span>\ngithub.com/jacksonyoudi/gomodone/v2 v2.0.0/go.mod h1:L8uFPSZNHoAhpaePWUfKmGinjufYdw9c2i70xtBorSw<span class=\"token operator\">=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个内容是下面的，需要操作执行的结果</p>\n<p>go run main.go就可以运行了</p>\n<h3 id=\"Making-a-bugfix-release\"><a href=\"#Making-a-bugfix-release\" class=\"headerlink\" title=\"Making a bugfix release\"></a>Making a bugfix release</h3><p>假如fix一个bug,我们在v1版本上进行修复</p>\n<p>修改代码如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// say Hi to someone</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token operator\">-</span>       <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi, %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>       <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi, %s!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修复好，我们开始push</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Emphasize our friendliness\"</span> say.go\n$ <span class=\"token function\">git</span> tag v1.0.1\n$ <span class=\"token function\">git</span> push --tags origin v1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Updating-modules\"><a href=\"#Updating-modules\" class=\"headerlink\" title=\"Updating modules\"></a>Updating modules</h4><p>刚才fix bug，所以要在我们使用项目中更新</p>\n<p>这个需要我们手动执行更新module操作</p>\n<p>我们通过使用我们的好朋友来做到这一点go get：</p>\n<ul>\n<li>运行  <code>go get -u</code> 以使用最新的  minor  版本或修补程序版本（即它将从1.0.0更新到例如1.0.1，或者，如果可用，则更新为1.1.0）</li>\n<li>运行  go get -u=patch 以使用最新的  修补程序  版本（即，将更新为1.0.1但不更新  为1.1.0）</li>\n<li>运行go get package@version 以更新到特定版本（例如github.com/jacksonyoudi/<a href=\"mailto:&#x67;&#x6f;&#109;&#x6f;&#x64;&#111;&#110;&#x65;&#x40;&#118;&#49;&#x2e;&#x30;&#x2e;&#x31;\">&#x67;&#x6f;&#109;&#x6f;&#x64;&#111;&#110;&#x65;&#x40;&#118;&#49;&#x2e;&#x30;&#x2e;&#x31;</a>）</li>\n</ul>\n<p>目前module最新的也是v1.0.1</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 更新最新\n<span class=\"token variable\">$go</span> get -u\n<span class=\"token variable\">$go</span> get -u<span class=\"token operator\">=</span>patch\n//指定包，指定版本\n<span class=\"token variable\">$go</span> get github.com/jacksonyoudi/gomodone@v1.0.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>操作完，go.mod文件会修改如下:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">module Gone\n\n<span class=\"token keyword\">go</span> <span class=\"token number\">1.14</span>\n\nrequire <span class=\"token punctuation\">(</span>\n\tgithub<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jacksonyoudi<span class=\"token operator\">/</span>gomodone v1<span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"Major-versions\"><a href=\"#Major-versions\" class=\"headerlink\" title=\"Major versions\"></a>Major versions</h4><p>根据语义版本语义，主要版本与次要版本  不同。主要版本可能会破坏向后兼容性。从Go模块的角度来看，主要版本是  完全不同的软件包。乍一看这听起来很奇怪，但这是有道理的：两个不兼容的库版本是两个不同的库。<br>比如下面修改，完全破坏了兼容性。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> gomodone\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"errors\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Hi returns a friendly greeting</span>\n<span class=\"token comment\">// Hi returns a friendly greeting in language lang</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> lang <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">switch</span> lang <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"en\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi, %s!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"pt\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Oi, %s!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"es\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"¡Hola, %s!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"fr\"</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bonjour, %s!\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unknown language\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>如上，我们需要不同的大版本，这种情况下</p>\n<p>修改 go.mod如下</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">module github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>jacksonyoudi<span class=\"token operator\">/</span>gomodone<span class=\"token operator\">/</span>v2\n\n<span class=\"token keyword\">go</span> <span class=\"token number\">1.14</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，重新tag，push</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit say.go -m <span class=\"token string\">\"Change Hi to allow multilang\"</span>\n$ <span class=\"token function\">git</span> checkout -b v2 <span class=\"token comment\"># 用于v2版本，后续修复v2</span>\n$ <span class=\"token function\">git</span> commit go.mod -m <span class=\"token string\">\"Bump version to v2\"</span>\n$ <span class=\"token function\">git</span> tag v2.0.0\n$ <span class=\"token function\">git</span> push --tags origin v2 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Updating-to-a-major-version\"><a href=\"#Updating-to-a-major-version\" class=\"headerlink\" title=\"Updating to a major version\"></a>Updating to a major version</h3><p>即使发布了库的新不兼容版本，现有软件 也不会中断，因为它将继续使用现有版本1.0.1。go get -u 将不会获得版本2.0.0。<br>如果想使用v2.0.0,代码改成如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"github.com/jacksonyoudi/gomodone/v2\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tg<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> gomodone<span class=\"token punctuation\">.</span><span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Roberto\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pt\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>执行 go mod tidy</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go: finding module <span class=\"token keyword\">for</span> package github.com/jacksonyoudi/gomodone/v2\ngo: downloading github.com/jacksonyoudi/gomodone/v2 v2.0.0\ngo: found github.com/jacksonyoudi/gomodone/v2 <span class=\"token keyword\">in</span> github.com/jacksonyoudi/gomodone/v2 v2.0.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>当然，两个版本都可以同时使用, 使用别名<br>如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"github.com/jacksonyoudi/gomodone\"</span>\n\tmv2 <span class=\"token string\">\"github.com/jacksonyoudi/gomodone/v2\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tg<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> mv2<span class=\"token punctuation\">.</span><span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Roberto\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pt\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>gomodone<span class=\"token punctuation\">.</span><span class=\"token function\">SayHi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Roberto\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行一下 <code>go mod tidy</code></p>\n<h3 id=\"Vendoring\"><a href=\"#Vendoring\" class=\"headerlink\" title=\"Vendoring\"></a>Vendoring</h3><p>默认是忽略vendor的，如果想在项目目录下有vendor可以执行下面命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$go vendor<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>当然，如果构建程序的时候，希望使用vendor中的依赖，</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">$ <span class=\"token keyword\">go</span> build <span class=\"token operator\">-</span>mod vendor<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"IDEA下开发GO\"><a href=\"#IDEA下开发GO\" class=\"headerlink\" title=\"IDEA下开发GO\"></a>IDEA下开发GO</h3><ol>\n<li>创建go项目</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/IqR0yI.jpg\"></p>\n<ol start=\"2\">\n<li><p>创建完项目，会自动生成go mod文件<br>如果需要修改，可以手动修改，加入git等操作</p>\n</li>\n<li><p>写业务逻辑代码</p>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/ZNN4tE.jpg\"><br>4. 解决依赖，更新go.mod</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/CxoGM9.jpg\"></p>\n<ol start=\"5\">\n<li>go build</li>\n</ol>\n"},{"title":"spark加载数据到ES","date":"2021-08-01T01:19:13.000Z","img":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/H8s52K.jpg","top":true,"hide":false,"cover":true,"coverImg":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Ixi9r8.jpg","toc":true,"mathjax":false,"summary":"spark多种方式将数据写入的elasticsearch，会通过源码介绍scala的隐式转换进行mixin方式实现不侵入实现RDD具有saveToES功能","keywords":["spark","es","大数据"],"_content":"\n在日常开发中一定会遇到，spark将计算好的数据load到es中，供后端同学查询使用。下面介绍一下spark写es的方式。 使用scala进行演示，对应的java自己google了。\n\n\nspark写es需要使用到 对应的包es包。maven配置如下\n\n## MAVEN配置\n\n```maven\n        <dependency>\n            <groupId>org.apache.spark</groupId>\n            <artifactId>spark-core_2.12</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.elasticsearch</groupId>\n            <artifactId>elasticsearch-hadoop</artifactId>\n            <version>7.0.0</version>\n        </dependency>\n```\n\n\n### 使用MAP方式\n\n代码如下\n\n```sql\npackage org.bigdata.es\n\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.elasticsearch.spark._\n\nobject D01 {\n  def main(args: Array[String]): Unit = {\n    val conf: SparkConf = new SparkConf().setAppName(\"d01\").setMaster(\"local[*]\")\n    conf.set(\"es.index.auto.create\", \"true\")\n\n    val sc: SparkContext = new SparkContext(conf)\n\n    // map方式\n    val numbers = Map(\"one\" -> 1, \"two\" -> 2, \"three\" -> 3)\n    val airports = Map(\"arrival\" -> \"Otopeni\", \"SFO\" -> \"San Fran\")\n    sc.makeRDD(Seq(numbers, airports)).saveToEs(\"spark/docs\")\n\n  }\n}\n```\n\n注意： 必须要导入 **import org.elasticsearch.spark._**, 不然，就没有 `saveToEs`方法了\n\n\n下面介绍一下， org.elasticsearch.spark._ 导入的隐式函数\n\n\n![包对象中隐式函数](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/uJdnvn.jpg)\n\n\n在 org.elasticsearch.spark._  下面的包对象中有 一个隐式函数，将 RDD转成 SparkRDDFunctions\n\n\n\n### 反编译成 java代码\n\n ```java\npackage org.bigdata.es;\n\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.SparkContext;\nimport scala.collection.Seq;\nimport scala.collection.immutable.Map;\nimport scala.runtime.BoxesRunTime;\n\npublic final class D01$ {\n  public static final D01$ MODULE$;\n  \n  public void main(String[] args) {\n    SparkConf conf = (new SparkConf()).setAppName(\"d01\").setMaster(\"local[*]\");\n    conf.set(\"es.index.auto.create\", \"true\");\n    SparkContext sc = new SparkContext(conf);\n    (new scala.Tuple2[3])[0] = scala.Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(scala.Predef$.MODULE$.ArrowAssoc(\"one\"), BoxesRunTime.boxToInteger(1));\n    (new scala.Tuple2[3])[1] = scala.Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(scala.Predef$.MODULE$.ArrowAssoc(\"two\"), BoxesRunTime.boxToInteger(2));\n    (new scala.Tuple2[3])[2] = scala.Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(scala.Predef$.MODULE$.ArrowAssoc(\"three\"), BoxesRunTime.boxToInteger(3));\n    Map numbers = (Map)scala.Predef$.MODULE$.Map().apply((Seq)scala.Predef$.MODULE$.wrapRefArray((Object[])new scala.Tuple2[3]));\n    (new scala.Tuple2[2])[0] = scala.Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(scala.Predef$.MODULE$.ArrowAssoc(\"arrival\"), \"Otopeni\");\n    (new scala.Tuple2[2])[1] = scala.Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(scala.Predef$.MODULE$.ArrowAssoc(\"SFO\"), \"San Fran\");\n    Map airports = (Map)scala.Predef$.MODULE$.Map().apply((Seq)scala.Predef$.MODULE$.wrapRefArray((Object[])new scala.Tuple2[2]));\n    (new Map[2])[0] = numbers;\n    (new Map[2])[1] = airports;\n    org.elasticsearch.spark.package$.MODULE$.sparkRDDFunctions(sc.makeRDD((Seq)scala.collection.Seq$.MODULE$.apply((Seq)scala.Predef$.MODULE$.wrapRefArray((Object[])new Map[2])), sc.makeRDD$default$2(), scala.reflect.ClassTag$.MODULE$.apply(Map.class)), scala.reflect.ClassTag$.MODULE$.apply(Map.class)).saveToEs(\"spark/docs\");\n  }\n  \n  private D01$() {\n    MODULE$ = this;\n  }\n}\n```\n\n\n\n再给一下，其他的 写es的代码\n\n## 其他方式写ES\n\n### 使用样例类方式\n```scala\n\npackage org.bigdata.es\n\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.elasticsearch.spark.rdd.EsSpark\n\nobject D02 {\n  def main(args: Array[String]): Unit = {\n    val conf: SparkConf = new SparkConf().setAppName(\"d01\").setMaster(\"local[*]\")\n    conf.set(\"es.index.auto.create\", \"true\")\n\n    val sc: SparkContext = new SparkContext(conf)\n    val upcomingTrip: Trip = Trip(\"OTP\", \"SFO\")\n    val lastWeekTrip: Trip = Trip(\"MUC\", \"OTP\")\n\n    val rdd: RDD[Trip] = sc.makeRDD(Seq(upcomingTrip, lastWeekTrip))\n    EsSpark.saveToEs(rdd, \"spark/docs\", Map(\"es.mapping.id\" -> \"id\"))\n  }\n}\n\n\n// define a case class\ncase class Trip(departure: String, arrival: String)\n\n```\n\n\n\n### 使用字符串json方式\n\n```scala\npackage org.bigdata.es\n\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.elasticsearch.spark._\n\n\nobject D03 {\n  def main(args: Array[String]): Unit = {\n    val conf: SparkConf = new SparkConf().setAppName(\"d01\").setMaster(\"local[*]\")\n    conf.set(\"es.index.auto.create\", \"true\")\n\n    val sc: SparkContext = new SparkContext(conf)\n\n    val json1 = \"\"\"{\"reason\" : \"business\", \"airport\" : \"SFO\"}\"\"\"\n    val json2 = \"\"\"{\"participants\" : 5, \"airport\" : \"OTP\"}\"\"\"\n    sc.makeRDD(Seq(json1, json2)).saveToEs(\"spark/json-trips\")\n\n  }\n}\n\n```\n\n\n\n### 动态index\n\n```scala\npackage org.bigdata.es\n\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.elasticsearch.spark._\n\nobject D04 {\n  def main(args: Array[String]): Unit = {\n    val conf: SparkConf = new SparkConf().setAppName(\"d01\").setMaster(\"local[*]\")\n    conf.set(\"es.index.auto.create\", \"true\")\n\n    val sc: SparkContext = new SparkContext(conf)\n\n    val game = Map(\n      \"media_type\" -> \"game\",\n      \"title\" -> \"FF VI\",\n      \"year\" -> \"1994\")\n\n    val book = Map(\"media_type\" -> \"book\", \"title\" -> \"Harry Potter\", \"year\" -> \"2010\")\n    val cd = Map(\"media_type\" -> \"music\", \"title\" -> \"Surfing With The Alien\")\n\n    sc.makeRDD(Seq(game, book, cd)).saveToEs(\"my-collection-{media_type}/doc\")\n\n  }\n}\n\n```","source":"_posts/spark-load-to-es.md","raw":"---\ntitle: spark加载数据到ES\ndate: 2021-08-01 09:19:13\nimg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/H8s52K.jpg\ntop: true\nhide: false\ncover: true\ncoverImg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Ixi9r8.jpg\ntoc: true\nmathjax: false\nsummary: spark多种方式将数据写入的elasticsearch，会通过源码介绍scala的隐式转换进行mixin方式实现不侵入实现RDD具有saveToES功能\nkeywords:\n-  spark\n-  es\n-  大数据 \ncategories: 大数据\ntags:\n-  spark\n-  es\n-  大数据\n\n---\n\n在日常开发中一定会遇到，spark将计算好的数据load到es中，供后端同学查询使用。下面介绍一下spark写es的方式。 使用scala进行演示，对应的java自己google了。\n\n\nspark写es需要使用到 对应的包es包。maven配置如下\n\n## MAVEN配置\n\n```maven\n        <dependency>\n            <groupId>org.apache.spark</groupId>\n            <artifactId>spark-core_2.12</artifactId>\n            <version>3.0.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.elasticsearch</groupId>\n            <artifactId>elasticsearch-hadoop</artifactId>\n            <version>7.0.0</version>\n        </dependency>\n```\n\n\n### 使用MAP方式\n\n代码如下\n\n```sql\npackage org.bigdata.es\n\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.elasticsearch.spark._\n\nobject D01 {\n  def main(args: Array[String]): Unit = {\n    val conf: SparkConf = new SparkConf().setAppName(\"d01\").setMaster(\"local[*]\")\n    conf.set(\"es.index.auto.create\", \"true\")\n\n    val sc: SparkContext = new SparkContext(conf)\n\n    // map方式\n    val numbers = Map(\"one\" -> 1, \"two\" -> 2, \"three\" -> 3)\n    val airports = Map(\"arrival\" -> \"Otopeni\", \"SFO\" -> \"San Fran\")\n    sc.makeRDD(Seq(numbers, airports)).saveToEs(\"spark/docs\")\n\n  }\n}\n```\n\n注意： 必须要导入 **import org.elasticsearch.spark._**, 不然，就没有 `saveToEs`方法了\n\n\n下面介绍一下， org.elasticsearch.spark._ 导入的隐式函数\n\n\n![包对象中隐式函数](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/uJdnvn.jpg)\n\n\n在 org.elasticsearch.spark._  下面的包对象中有 一个隐式函数，将 RDD转成 SparkRDDFunctions\n\n\n\n### 反编译成 java代码\n\n ```java\npackage org.bigdata.es;\n\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.SparkContext;\nimport scala.collection.Seq;\nimport scala.collection.immutable.Map;\nimport scala.runtime.BoxesRunTime;\n\npublic final class D01$ {\n  public static final D01$ MODULE$;\n  \n  public void main(String[] args) {\n    SparkConf conf = (new SparkConf()).setAppName(\"d01\").setMaster(\"local[*]\");\n    conf.set(\"es.index.auto.create\", \"true\");\n    SparkContext sc = new SparkContext(conf);\n    (new scala.Tuple2[3])[0] = scala.Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(scala.Predef$.MODULE$.ArrowAssoc(\"one\"), BoxesRunTime.boxToInteger(1));\n    (new scala.Tuple2[3])[1] = scala.Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(scala.Predef$.MODULE$.ArrowAssoc(\"two\"), BoxesRunTime.boxToInteger(2));\n    (new scala.Tuple2[3])[2] = scala.Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(scala.Predef$.MODULE$.ArrowAssoc(\"three\"), BoxesRunTime.boxToInteger(3));\n    Map numbers = (Map)scala.Predef$.MODULE$.Map().apply((Seq)scala.Predef$.MODULE$.wrapRefArray((Object[])new scala.Tuple2[3]));\n    (new scala.Tuple2[2])[0] = scala.Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(scala.Predef$.MODULE$.ArrowAssoc(\"arrival\"), \"Otopeni\");\n    (new scala.Tuple2[2])[1] = scala.Predef$ArrowAssoc$.MODULE$.$minus$greater$extension(scala.Predef$.MODULE$.ArrowAssoc(\"SFO\"), \"San Fran\");\n    Map airports = (Map)scala.Predef$.MODULE$.Map().apply((Seq)scala.Predef$.MODULE$.wrapRefArray((Object[])new scala.Tuple2[2]));\n    (new Map[2])[0] = numbers;\n    (new Map[2])[1] = airports;\n    org.elasticsearch.spark.package$.MODULE$.sparkRDDFunctions(sc.makeRDD((Seq)scala.collection.Seq$.MODULE$.apply((Seq)scala.Predef$.MODULE$.wrapRefArray((Object[])new Map[2])), sc.makeRDD$default$2(), scala.reflect.ClassTag$.MODULE$.apply(Map.class)), scala.reflect.ClassTag$.MODULE$.apply(Map.class)).saveToEs(\"spark/docs\");\n  }\n  \n  private D01$() {\n    MODULE$ = this;\n  }\n}\n```\n\n\n\n再给一下，其他的 写es的代码\n\n## 其他方式写ES\n\n### 使用样例类方式\n```scala\n\npackage org.bigdata.es\n\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.elasticsearch.spark.rdd.EsSpark\n\nobject D02 {\n  def main(args: Array[String]): Unit = {\n    val conf: SparkConf = new SparkConf().setAppName(\"d01\").setMaster(\"local[*]\")\n    conf.set(\"es.index.auto.create\", \"true\")\n\n    val sc: SparkContext = new SparkContext(conf)\n    val upcomingTrip: Trip = Trip(\"OTP\", \"SFO\")\n    val lastWeekTrip: Trip = Trip(\"MUC\", \"OTP\")\n\n    val rdd: RDD[Trip] = sc.makeRDD(Seq(upcomingTrip, lastWeekTrip))\n    EsSpark.saveToEs(rdd, \"spark/docs\", Map(\"es.mapping.id\" -> \"id\"))\n  }\n}\n\n\n// define a case class\ncase class Trip(departure: String, arrival: String)\n\n```\n\n\n\n### 使用字符串json方式\n\n```scala\npackage org.bigdata.es\n\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.elasticsearch.spark._\n\n\nobject D03 {\n  def main(args: Array[String]): Unit = {\n    val conf: SparkConf = new SparkConf().setAppName(\"d01\").setMaster(\"local[*]\")\n    conf.set(\"es.index.auto.create\", \"true\")\n\n    val sc: SparkContext = new SparkContext(conf)\n\n    val json1 = \"\"\"{\"reason\" : \"business\", \"airport\" : \"SFO\"}\"\"\"\n    val json2 = \"\"\"{\"participants\" : 5, \"airport\" : \"OTP\"}\"\"\"\n    sc.makeRDD(Seq(json1, json2)).saveToEs(\"spark/json-trips\")\n\n  }\n}\n\n```\n\n\n\n### 动态index\n\n```scala\npackage org.bigdata.es\n\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.elasticsearch.spark._\n\nobject D04 {\n  def main(args: Array[String]): Unit = {\n    val conf: SparkConf = new SparkConf().setAppName(\"d01\").setMaster(\"local[*]\")\n    conf.set(\"es.index.auto.create\", \"true\")\n\n    val sc: SparkContext = new SparkContext(conf)\n\n    val game = Map(\n      \"media_type\" -> \"game\",\n      \"title\" -> \"FF VI\",\n      \"year\" -> \"1994\")\n\n    val book = Map(\"media_type\" -> \"book\", \"title\" -> \"Harry Potter\", \"year\" -> \"2010\")\n    val cd = Map(\"media_type\" -> \"music\", \"title\" -> \"Surfing With The Alien\")\n\n    sc.makeRDD(Seq(game, book, cd)).saveToEs(\"my-collection-{media_type}/doc\")\n\n  }\n}\n\n```","slug":"spark-load-to-es","published":1,"updated":"2021-08-01T01:32:19.522Z","_id":"ckrsiz6m900006guq31qsg75h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在日常开发中一定会遇到，spark将计算好的数据load到es中，供后端同学查询使用。下面介绍一下spark写es的方式。 使用scala进行演示，对应的java自己google了。</p>\n<p>spark写es需要使用到 对应的包es包。maven配置如下</p>\n<h2 id=\"MAVEN配置\"><a href=\"#MAVEN配置\" class=\"headerlink\" title=\"MAVEN配置\"></a>MAVEN配置</h2><pre class=\"line-numbers language-maven\" data-language=\"maven\"><code class=\"language-maven\">&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;\n    &lt;artifactId&gt;spark-core_2.12&lt;/artifactId&gt;\n    &lt;version&gt;3.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;\n    &lt;artifactId&gt;elasticsearch-hadoop&lt;/artifactId&gt;\n    &lt;version&gt;7.0.0&lt;/version&gt;\n&lt;/dependency&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"使用MAP方式\"><a href=\"#使用MAP方式\" class=\"headerlink\" title=\"使用MAP方式\"></a>使用MAP方式</h3><p>代码如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">package org<span class=\"token punctuation\">.</span>bigdata<span class=\"token punctuation\">.</span>es\n\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>{SparkConf<span class=\"token punctuation\">,</span> SparkContext}\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>_\n\nobject D01 {\n  def main<span class=\"token punctuation\">(</span>args: Array<span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>: Unit <span class=\"token operator\">=</span> {\n    val conf: SparkConf <span class=\"token operator\">=</span> new SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"d01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span>\n    conf<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"es.index.auto.create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n\n    val sc: SparkContext <span class=\"token operator\">=</span> new SparkContext<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// map方式</span>\n    val numbers <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    val airports <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"arrival\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\"Otopeni\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SFO\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">\"San Fran\"</span><span class=\"token punctuation\">)</span>\n    sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>Seq<span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> airports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>saveToEs<span class=\"token punctuation\">(</span><span class=\"token string\">\"spark/docs\"</span><span class=\"token punctuation\">)</span>\n\n  }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意： 必须要导入 <strong>import org.elasticsearch.spark._</strong>, 不然，就没有 <code>saveToEs</code>方法了</p>\n<p>下面介绍一下， org.elasticsearch.spark._ 导入的隐式函数</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/uJdnvn.jpg\" alt=\"包对象中隐式函数\"></p>\n<p>在 org.elasticsearch.spark._  下面的包对象中有 一个隐式函数，将 RDD转成 SparkRDDFunctions</p>\n<h3 id=\"反编译成-java代码\"><a href=\"#反编译成-java代码\" class=\"headerlink\" title=\"反编译成 java代码\"></a>反编译成 java代码</h3> <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>bigdata<span class=\"token punctuation\">.</span>es</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SparkConf</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SparkContext</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Seq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>immutable<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BoxesRunTime</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> D01$ <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> D01$ MODULE$<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">SparkConf</span> conf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SparkConf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAppName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMaster</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    conf<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"es.index.auto.create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">SparkContext</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SparkContext</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token class-name\">ArrowAssoc</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span>$minus$greater$<span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">ArrowAssoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BoxesRunTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxToInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token class-name\">ArrowAssoc</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span>$minus$greater$<span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">ArrowAssoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BoxesRunTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxToInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token class-name\">ArrowAssoc</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span>$minus$greater$<span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">ArrowAssoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BoxesRunTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxToInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Seq</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">wrapRefArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token class-name\">ArrowAssoc</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span>$minus$greater$<span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">ArrowAssoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arrival\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Otopeni\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token class-name\">ArrowAssoc</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span>$minus$greater$<span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">ArrowAssoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SFO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"San Fran\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span> airports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Seq</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">wrapRefArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> airports<span class=\"token punctuation\">;</span>\n    org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">package</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">sparkRDDFunctions</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">.</span><span class=\"token function\">makeRDD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Seq</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span></span>Seq</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Seq</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">wrapRefArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">.</span>makeRDD$<span class=\"token keyword\">default</span>$<span class=\"token function\">2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span>ClassTag</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span>ClassTag</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveToEs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spark/docs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">private</span> D01$<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    MODULE$ <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>再给一下，其他的 写es的代码</p>\n<h2 id=\"其他方式写ES\"><a href=\"#其他方式写ES\" class=\"headerlink\" title=\"其他方式写ES\"></a>其他方式写ES</h2><h3 id=\"使用样例类方式\"><a href=\"#使用样例类方式\" class=\"headerlink\" title=\"使用样例类方式\"></a>使用样例类方式</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>bigdata<span class=\"token punctuation\">.</span>es</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">{</span>SparkConf<span class=\"token punctuation\">,</span> SparkContext<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>EsSpark\n\n<span class=\"token keyword\">object</span> D02 <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> conf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"d01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span>\n    conf<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span><span class=\"token string\">\"es.index.auto.create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> sc<span class=\"token operator\">:</span> SparkContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> upcomingTrip<span class=\"token operator\">:</span> Trip <span class=\"token operator\">=</span> Trip<span class=\"token punctuation\">(</span><span class=\"token string\">\"OTP\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SFO\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> lastWeekTrip<span class=\"token operator\">:</span> Trip <span class=\"token operator\">=</span> Trip<span class=\"token punctuation\">(</span><span class=\"token string\">\"MUC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OTP\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>Trip<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>Seq<span class=\"token punctuation\">(</span>upcomingTrip<span class=\"token punctuation\">,</span> lastWeekTrip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    EsSpark<span class=\"token punctuation\">.</span>saveToEs<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"spark/docs\"</span><span class=\"token punctuation\">,</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"es.mapping.id\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// define a case class</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Trip<span class=\"token punctuation\">(</span>departure<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> arrival<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"使用字符串json方式\"><a href=\"#使用字符串json方式\" class=\"headerlink\" title=\"使用字符串json方式\"></a>使用字符串json方式</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>bigdata<span class=\"token punctuation\">.</span>es</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">{</span>SparkConf<span class=\"token punctuation\">,</span> SparkContext<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span>_\n\n\n<span class=\"token keyword\">object</span> D03 <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> conf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"d01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span>\n    conf<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span><span class=\"token string\">\"es.index.auto.create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> sc<span class=\"token operator\">:</span> SparkContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> json1 <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"{\"reason\" : \"business\", \"airport\" : \"SFO\"}\"\"\"</span>\n    <span class=\"token keyword\">val</span> json2 <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"{\"participants\" : 5, \"airport\" : \"OTP\"}\"\"\"</span>\n    sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>Seq<span class=\"token punctuation\">(</span>json1<span class=\"token punctuation\">,</span> json2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>saveToEs<span class=\"token punctuation\">(</span><span class=\"token string\">\"spark/json-trips\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"动态index\"><a href=\"#动态index\" class=\"headerlink\" title=\"动态index\"></a>动态index</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>bigdata<span class=\"token punctuation\">.</span>es</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">{</span>SparkConf<span class=\"token punctuation\">,</span> SparkContext<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span>_\n\n<span class=\"token keyword\">object</span> D04 <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> conf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"d01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span>\n    conf<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span><span class=\"token string\">\"es.index.auto.create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> sc<span class=\"token operator\">:</span> SparkContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> game <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"media_type\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token string\">\"game\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"title\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token string\">\"FF VI\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"year\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token string\">\"1994\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> book <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"media_type\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"title\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token string\">\"Harry Potter\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"year\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token string\">\"2010\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> cd <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"media_type\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token string\">\"music\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"title\"</span> <span class=\"token operator\">-&gt;</span> <span class=\"token string\">\"Surfing With The Alien\"</span><span class=\"token punctuation\">)</span>\n\n    sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>Seq<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">,</span> cd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>saveToEs<span class=\"token punctuation\">(</span><span class=\"token string\">\"my-collection-{media_type}/doc\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>在日常开发中一定会遇到，spark将计算好的数据load到es中，供后端同学查询使用。下面介绍一下spark写es的方式。 使用scala进行演示，对应的java自己google了。</p>\n<p>spark写es需要使用到 对应的包es包。maven配置如下</p>\n<h2 id=\"MAVEN配置\"><a href=\"#MAVEN配置\" class=\"headerlink\" title=\"MAVEN配置\"></a>MAVEN配置</h2><pre class=\"line-numbers language-maven\" data-language=\"maven\"><code class=\"language-maven\">&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.spark&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spark-core_2.12&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.0.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.elasticsearch&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;elasticsearch-hadoop&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;7.0.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"使用MAP方式\"><a href=\"#使用MAP方式\" class=\"headerlink\" title=\"使用MAP方式\"></a>使用MAP方式</h3><p>代码如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">package org<span class=\"token punctuation\">.</span>bigdata<span class=\"token punctuation\">.</span>es\n\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>&#123;SparkConf<span class=\"token punctuation\">,</span> SparkContext&#125;\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>_\n\nobject D01 &#123;\n  def main<span class=\"token punctuation\">(</span>args: Array<span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>: Unit <span class=\"token operator\">=</span> &#123;\n    val conf: SparkConf <span class=\"token operator\">=</span> new SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"d01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span>\n    conf<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"es.index.auto.create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n\n    val sc: SparkContext <span class=\"token operator\">=</span> new SparkContext<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// map方式</span>\n    val numbers <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    val airports <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"arrival\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"Otopeni\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SFO\"</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"San Fran\"</span><span class=\"token punctuation\">)</span>\n    sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>Seq<span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> airports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>saveToEs<span class=\"token punctuation\">(</span><span class=\"token string\">\"spark/docs\"</span><span class=\"token punctuation\">)</span>\n\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意： 必须要导入 <strong>import org.elasticsearch.spark._</strong>, 不然，就没有 <code>saveToEs</code>方法了</p>\n<p>下面介绍一下， org.elasticsearch.spark._ 导入的隐式函数</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/uJdnvn.jpg\" alt=\"包对象中隐式函数\"></p>\n<p>在 org.elasticsearch.spark._  下面的包对象中有 一个隐式函数，将 RDD转成 SparkRDDFunctions</p>\n<h3 id=\"反编译成-java代码\"><a href=\"#反编译成-java代码\" class=\"headerlink\" title=\"反编译成 java代码\"></a>反编译成 java代码</h3> <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>bigdata<span class=\"token punctuation\">.</span>es</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SparkConf</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SparkContext</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Seq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>immutable<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>runtime<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BoxesRunTime</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> D01$ <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> D01$ MODULE$<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">SparkConf</span> conf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SparkConf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAppName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMaster</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    conf<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"es.index.auto.create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">SparkContext</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SparkContext</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token class-name\">ArrowAssoc</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span>$minus$greater$<span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">ArrowAssoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BoxesRunTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxToInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token class-name\">ArrowAssoc</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span>$minus$greater$<span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">ArrowAssoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BoxesRunTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxToInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token class-name\">ArrowAssoc</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span>$minus$greater$<span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">ArrowAssoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BoxesRunTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxToInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Seq</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">wrapRefArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token class-name\">ArrowAssoc</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span>$minus$greater$<span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">ArrowAssoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arrival\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Otopeni\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token class-name\">ArrowAssoc</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span>$minus$greater$<span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">ArrowAssoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SFO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"San Fran\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Map</span> airports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Seq</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">wrapRefArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Tuple2</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> airports<span class=\"token punctuation\">;</span>\n    org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span><span class=\"token keyword\">package</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">sparkRDDFunctions</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">.</span><span class=\"token function\">makeRDD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Seq</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span></span>Seq</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Seq</span><span class=\"token punctuation\">)</span><span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span></span>Predef</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">wrapRefArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">.</span>makeRDD$<span class=\"token keyword\">default</span>$<span class=\"token function\">2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span>ClassTag</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span>ClassTag</span>$<span class=\"token punctuation\">.</span>MODULE$<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveToEs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spark/docs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token keyword\">private</span> D01$<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    MODULE$ <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>再给一下，其他的 写es的代码</p>\n<h2 id=\"其他方式写ES\"><a href=\"#其他方式写ES\" class=\"headerlink\" title=\"其他方式写ES\"></a>其他方式写ES</h2><h3 id=\"使用样例类方式\"><a href=\"#使用样例类方式\" class=\"headerlink\" title=\"使用样例类方式\"></a>使用样例类方式</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>bigdata<span class=\"token punctuation\">.</span>es</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>RDD\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>SparkConf<span class=\"token punctuation\">,</span> SparkContext<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span>rdd<span class=\"token punctuation\">.</span></span>EsSpark\n\n<span class=\"token keyword\">object</span> D02 <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> conf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"d01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span>\n    conf<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span><span class=\"token string\">\"es.index.auto.create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> sc<span class=\"token operator\">:</span> SparkContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> upcomingTrip<span class=\"token operator\">:</span> Trip <span class=\"token operator\">=</span> Trip<span class=\"token punctuation\">(</span><span class=\"token string\">\"OTP\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SFO\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> lastWeekTrip<span class=\"token operator\">:</span> Trip <span class=\"token operator\">=</span> Trip<span class=\"token punctuation\">(</span><span class=\"token string\">\"MUC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OTP\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> rdd<span class=\"token operator\">:</span> RDD<span class=\"token punctuation\">[</span>Trip<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>Seq<span class=\"token punctuation\">(</span>upcomingTrip<span class=\"token punctuation\">,</span> lastWeekTrip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    EsSpark<span class=\"token punctuation\">.</span>saveToEs<span class=\"token punctuation\">(</span>rdd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"spark/docs\"</span><span class=\"token punctuation\">,</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"es.mapping.id\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// define a case class</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Trip<span class=\"token punctuation\">(</span>departure<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> arrival<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"使用字符串json方式\"><a href=\"#使用字符串json方式\" class=\"headerlink\" title=\"使用字符串json方式\"></a>使用字符串json方式</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>bigdata<span class=\"token punctuation\">.</span>es</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>SparkConf<span class=\"token punctuation\">,</span> SparkContext<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span>_\n\n\n<span class=\"token keyword\">object</span> D03 <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> conf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"d01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span>\n    conf<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span><span class=\"token string\">\"es.index.auto.create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> sc<span class=\"token operator\">:</span> SparkContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> json1 <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"&#123;\"reason\" : \"business\", \"airport\" : \"SFO\"&#125;\"\"\"</span>\n    <span class=\"token keyword\">val</span> json2 <span class=\"token operator\">=</span> <span class=\"token triple-quoted-string string\">\"\"\"&#123;\"participants\" : 5, \"airport\" : \"OTP\"&#125;\"\"\"</span>\n    sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>Seq<span class=\"token punctuation\">(</span>json1<span class=\"token punctuation\">,</span> json2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>saveToEs<span class=\"token punctuation\">(</span><span class=\"token string\">\"spark/json-trips\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"动态index\"><a href=\"#动态index\" class=\"headerlink\" title=\"动态index\"></a>动态index</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>bigdata<span class=\"token punctuation\">.</span>es</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span><span class=\"token punctuation\">&#123;</span>SparkConf<span class=\"token punctuation\">,</span> SparkContext<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>elasticsearch<span class=\"token punctuation\">.</span>spark<span class=\"token punctuation\">.</span></span>_\n\n<span class=\"token keyword\">object</span> D04 <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> conf<span class=\"token operator\">:</span> SparkConf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkConf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setAppName<span class=\"token punctuation\">(</span><span class=\"token string\">\"d01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setMaster<span class=\"token punctuation\">(</span><span class=\"token string\">\"local[*]\"</span><span class=\"token punctuation\">)</span>\n    conf<span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">(</span><span class=\"token string\">\"es.index.auto.create\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> sc<span class=\"token operator\">:</span> SparkContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> SparkContext<span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> game <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"media_type\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"game\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"title\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"FF VI\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"year\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"1994\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> book <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"media_type\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"title\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Harry Potter\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"year\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"2010\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> cd <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span><span class=\"token string\">\"media_type\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"music\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"title\"</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"Surfing With The Alien\"</span><span class=\"token punctuation\">)</span>\n\n    sc<span class=\"token punctuation\">.</span>makeRDD<span class=\"token punctuation\">(</span>Seq<span class=\"token punctuation\">(</span>game<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">,</span> cd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>saveToEs<span class=\"token punctuation\">(</span><span class=\"token string\">\"my-collection-&#123;media_type&#125;/doc\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"go爬虫框架colly源码以及软件架构分析","date":"2021-08-01T13:54:55.000Z","img":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/RYdTI7.png","top":true,"hide":false,"cover":true,"coverImg":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/pL4vEU.jpg","toc":true,"mathjax":false,"summary":"介绍go爬虫框架，从源码介绍colly数据流转过程","keywords":["go","colly","爬虫","crawler"],"_content":"\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/6hvTNM.jpg)\n\n无意中发现了`colly`,我一直是使用python进行爬虫的， 学习golang的使用， 用`go`参考`scrapy`架构写了一个爬虫的框架demo。我一直以为go不适合做爬虫， go的领域是后端服务。然后去搜索了一下`colly`, 发现还是很流行。 我个人还是比较喜欢爬虫， 网络上的数据就是公开的API， 所以， 爬虫去请求接口获取数据。当然我是遵循君子协议的。\n\n好， 下面进入正题，介绍`colly`\n\n### colly介绍\n`Lightning Fast and Elegant Scraping Framework for Gophers`\n\n`Colly provides a clean interface to write any kind of crawler/scraper/spider.`\n官方的介绍，gocolly快速优雅，在单核上每秒可以发起1K以上请求；以回调函数的形式提供了一组接口，可以实现任意类型的爬虫；依赖goquery库可以像jquery一样选择web元素。\n\n\n### 安装使用\n[colly](https://github.com/gocolly/colly)\n[官网](http://go-colly.org/)\n\n```\ngo get -u github.com/gocolly/colly/...\n```\n\n```go\nimport \"github.com/gocolly/colly\"\n```\n\n\n\n### 架构特点\n了解爬虫的都知道一个爬虫请求的生命周期\n\n>1. 构建请求\n>2. 发送请求\n>3. 获取文档或数据\n>4. 解析文档或清洗数据\n>5. 数据处理或持久化\n\n\nscrapy的设计理念是将上面的每一个步骤抽离出来，然后做出组件的形式， 最后通过调度组成流水线的工作形式。\n我们看一下scrapy的架构图， 这里只是简单的介绍下， 后面有时间，我深入介绍scrapy\n![0kfy9f](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/0kfy9f.jpg)\n\n\n如图，`downloader`负责请求获取页面，`spiders`中写具体解析文档的逻辑，`item PipeLine`数据最后处理， 中间有一些中间件，可以一些功能的装饰。比如，代理，请求频率等。\n\n\n我们介绍一下colly的架构特点\ncolly的逻辑更像是面向过程编程的， colly的逻辑就是按上面生命周期的顺序管道处理， 只是在不同阶段，加上回调函数进行过滤的时候进行处理。\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/IS4YSc.jpg)\n\n\n\n\n\n下面也按照这个逻辑进行介绍\n\n\n### 源码分析\n\n先给一个🌰\n```go\n\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gocolly/colly\"\n)\n\nfunc main() {\n\t// Instantiate default collector\n\tc := colly.NewCollector(\n\t\t// Visit only domains: hackerspaces.org, wiki.hackerspaces.org\n\t\tcolly.AllowedDomains(\"hackerspaces.org\", \"wiki.hackerspaces.org\"),\n\t)\n\n\t// On every a element which has href attribute call callback\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\tlink := e.Attr(\"href\")\n\t\t// Print link\n\t\tfmt.Printf(\"Link found: %q -> %s\\n\", e.Text, link)\n\t\t// Visit link found on page\n\t\t// Only those links are visited which are in AllowedDomains\n\t\tc.Visit(e.Request.AbsoluteURL(link))\n\t})\n\n\t// Before making a request print \"Visiting ...\"\n\tc.OnRequest(func(r *colly.Request) {\n\t\tfmt.Println(\"Visiting\", r.URL.String())\n\t})\n\n\t// Start scraping on https://hackerspaces.org\n\tc.Visit(\"https://hackerspaces.org/\")\n}\n\n```\n这是官方给的示例， 可以看到`colly.NewCollector`创建一个`收集器`， colly的所有处理逻辑都是以`Collector`为核心进行操作的。\n\n\n我们看一下 `Collector`结构体的定义\n```go\n// Collector provides the scraper instance for a scraping job\ntype Collector struct {\n\t// UserAgent is the User-Agent string used by HTTP requests\n\tUserAgent string\n\t// MaxDepth limits the recursion depth of visited URLs.\n\t// Set it to 0 for infinite recursion (default).\n\tMaxDepth int\n\t// AllowedDomains is a domain whitelist.\n\t// Leave it blank to allow any domains to be visited\n\tAllowedDomains []string\n\t// DisallowedDomains is a domain blacklist.\n\tDisallowedDomains []string\n\t// DisallowedURLFilters is a list of regular expressions which restricts\n\t// visiting URLs. If any of the rules matches to a URL the\n\t// request will be stopped. DisallowedURLFilters will\n\t// be evaluated before URLFilters\n\t// Leave it blank to allow any URLs to be visited\n\tDisallowedURLFilters []*regexp.Regexp\n\t// URLFilters is a list of regular expressions which restricts\n\t// visiting URLs. If any of the rules matches to a URL the\n\t// request won't be stopped. DisallowedURLFilters will\n\t// be evaluated before URLFilters\n\n\t// Leave it blank to allow any URLs to be visited\n\tURLFilters []*regexp.Regexp\n\n\t// AllowURLRevisit allows multiple downloads of the same URL\n\tAllowURLRevisit bool\n\t// MaxBodySize is the limit of the retrieved response body in bytes.\n\t// 0 means unlimited.\n\t// The default value for MaxBodySize is 10MB (10 * 1024 * 1024 bytes).\n\tMaxBodySize int\n\t// CacheDir specifies a location where GET requests are cached as files.\n\t// When it's not defined, caching is disabled.\n\tCacheDir string\n\t// IgnoreRobotsTxt allows the Collector to ignore any restrictions set by\n\t// the target host's robots.txt file.  See http://www.robotstxt.org/ for more\n\t// information.\n\tIgnoreRobotsTxt bool\n\t// Async turns on asynchronous network communication. Use Collector.Wait() to\n\t// be sure all requests have been finished.\n\tAsync bool\n\t// ParseHTTPErrorResponse allows parsing HTTP responses with non 2xx status codes.\n\t// By default, Colly parses only successful HTTP responses. Set ParseHTTPErrorResponse\n\t// to true to enable it.\n\tParseHTTPErrorResponse bool\n\t// ID is the unique identifier of a collector\n\tID uint32\n\t// DetectCharset can enable character encoding detection for non-utf8 response bodies\n\t// without explicit charset declaration. This feature uses https://github.com/saintfish/chardet\n\tDetectCharset bool\n\t// RedirectHandler allows control on how a redirect will be managed\n\tRedirectHandler func(req *http.Request, via []*http.Request) error\n\t// CheckHead performs a HEAD request before every GET to pre-validate the response\n\tCheckHead         bool\n\tstore             storage.Storage\n\tdebugger          debug.Debugger\n\trobotsMap         map[string]*robotstxt.RobotsData\n\thtmlCallbacks     []*htmlCallbackContainer\n\txmlCallbacks      []*xmlCallbackContainer\n\trequestCallbacks  []RequestCallback\n\tresponseCallbacks []ResponseCallback\n\terrorCallbacks    []ErrorCallback\n\tscrapedCallbacks  []ScrapedCallback\n\trequestCount      uint32\n\tresponseCount     uint32\n\tbackend           *httpBackend\n\twg                *sync.WaitGroup\n\tlock              *sync.RWMutex\n}\n```\n\n上面的具体属性我就不介绍了， 看看注释也就懂了。\n我就先按上面的示例解释源码\n```bash\n    // 创建一个 Collector对象\n\tc := colly.NewCollector(\n\t\t// Visit only domains: hackerspaces.org, wiki.hackerspaces.org\n\t\tcolly.AllowedDomains(\"hackerspaces.org\", \"wiki.hackerspaces.org\"),\n\t)\n\n\t// 添加一个HTML的回调函数\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\tlink := e.Attr(\"href\")\n\t\t// Print link\n\t\tfmt.Printf(\"Link found: %q -> %s\\n\", e.Text, link)\n\t\t// Visit link found on page\n\t\t// Only those links are visited which are in AllowedDomains\n\t\tc.Visit(e.Request.AbsoluteURL(link))\n\t})\n\n\t// 添加一个 Requset回调函数\n\tc.OnRequest(func(r *colly.Request) {\n\t\tfmt.Println(\"Visiting\", r.URL.String())\n\t})\n\n\t// 开始爬取\n\tc.Visit(\"https://hackerspaces.org/\")\n```\n回调函数如何用？ 什么作用？ 先卖个关子， `c.Visit(\"https://hackerspaces.org/\")`是入口， 那就先分析它，\n\n```go\n// Visit starts Collector's collecting job by creating a\n// request to the URL specified in parameter.\n// Visit also calls the previously provided callbacks\nfunc (c *Collector) Visit(URL string) error {\n\tif c.CheckHead {\n\t\tif check := c.scrape(URL, \"HEAD\", 1, nil, nil, nil, true); check != nil {\n\t\t\treturn check\n\t\t}\n\t}\n\treturn c.scrape(URL, \"GET\", 1, nil, nil, nil, true)\n}\n```\n👆又出来一个新的method，\n\n```go\nfunc (c *Collector) scrape(u, method string, depth int, requestData io.Reader, ctx *Context, hdr http.Header, checkRevisit bool) error {\n    // 检查请求是否合法\n\tif err := c.requestCheck(u, method, depth, checkRevisit); err != nil {\n\t\treturn err\n\t}\n    // 解析url，\n\tparsedURL, err := url.Parse(u)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif parsedURL.Scheme == \"\" {\n\t\tparsedURL.Scheme = \"http\"\n\t}\n\tif !c.isDomainAllowed(parsedURL.Hostname()) {\n\t\treturn ErrForbiddenDomain\n\t}\n    // robots协议\n\tif method != \"HEAD\" && !c.IgnoreRobotsTxt {\n\t\tif err = c.checkRobots(parsedURL); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n     // headers\n\tif hdr == nil {\n\t\thdr = http.Header{\"User-Agent\": []string{c.UserAgent}}\n\t}\n\trc, ok := requestData.(io.ReadCloser)\n\tif !ok && requestData != nil {\n\t\trc = ioutil.NopCloser(requestData)\n\t}\n\t// The Go HTTP API ignores \"Host\" in the headers, preferring the client\n\t// to use the Host field on Request.\n\thost := parsedURL.Host\n\tif hostHeader := hdr.Get(\"Host\"); hostHeader != \"\" {\n\t\thost = hostHeader\n\t}\n    // 构造http.Request\n\treq := &http.Request{\n\t\tMethod:     method,\n\t\tURL:        parsedURL,\n\t\tProto:      \"HTTP/1.1\",\n\t\tProtoMajor: 1,\n\t\tProtoMinor: 1,\n\t\tHeader:     hdr,\n\t\tBody:       rc,\n\t\tHost:       host,\n\t}\n    // 请求的数据（requestData）转换成io.ReadCloser接口数据\n\tsetRequestBody(req, requestData)\n\tu = parsedURL.String()\n\tc.wg.Add(1)\n    // 异步方式\n\tif c.Async {\n\t\tgo c.fetch(u, method, depth, requestData, ctx, hdr, req)\n\t\treturn nil\n\t}\n\treturn c.fetch(u, method, depth, requestData, ctx, hdr, req)\n}\n```\n\n上面很大篇幅都是检查， 现在还在 `request`的阶段， 还没有response，看`c.fetch`\n\nfetch就是colly的核心内容\n\n```go\nfunc (c *Collector) fetch(u, method string, depth int, requestData io.Reader, ctx *Context, hdr http.Header, req *http.Request) error {\n\tdefer c.wg.Done()\n\tif ctx == nil {\n\t\tctx = NewContext()\n\t}\n\trequest := &Request{\n\t\tURL:       req.URL,\n\t\tHeaders:   &req.Header,\n\t\tCtx:       ctx,\n\t\tDepth:     depth,\n\t\tMethod:    method,\n\t\tBody:      requestData,\n\t\tcollector: c, // 这里将Collector放到request中，这个可以对请求继续处理\n\t\tID:        atomic.AddUint32(&c.requestCount, 1),\n\t}\n    // 回调函数处理 request\n\tc.handleOnRequest(request)\n\n\tif request.abort {\n\t\treturn nil\n\t}\n\n\tif method == \"POST\" && req.Header.Get(\"Content-Type\") == \"\" {\n\t\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\t}\n\n\tif req.Header.Get(\"Accept\") == \"\" {\n\t\treq.Header.Set(\"Accept\", \"*/*\")\n\t}\n\n\torigURL := req.URL\n    // 这里是 去请求网络， 是调用了 `http.Client.Do`方法请求的\n\tresponse, err := c.backend.Cache(req, c.MaxBodySize, c.CacheDir)\n\tif proxyURL, ok := req.Context().Value(ProxyURLKey).(string); ok {\n\t\trequest.ProxyURL = proxyURL\n\t}\n    // 回调函数，处理error\n\tif err := c.handleOnError(response, err, request, ctx); err != nil {\n\t\treturn err\n\t}\n\tif req.URL != origURL {\n\t\trequest.URL = req.URL\n\t\trequest.Headers = &req.Header\n\t}\n\tatomic.AddUint32(&c.responseCount, 1)\n\tresponse.Ctx = ctx\n\tresponse.Request = request\n\n\terr = response.fixCharset(c.DetectCharset, request.ResponseCharacterEncoding)\n\tif err != nil {\n\t\treturn err\n\t}\n    // 回调函数 处理Response\n\tc.handleOnResponse(response)\n    \n    // 回调函数 HTML\n\terr = c.handleOnHTML(response)\n\tif err != nil {\n\t\tc.handleOnError(response, err, request, ctx)\n\t}\n    // 回调函数XML\n\terr = c.handleOnXML(response)\n\tif err != nil {\n\t\tc.handleOnError(response, err, request, ctx)\n\t}\n    // 回调函数 Scraped\n\tc.handleOnScraped(response)\n\n\treturn err\n}\n\n\n```\n\n看到了， 这就是一个完整的流程。 好， 我们看一下回调函数做了什么？\n```go\nfunc (c *Collector) handleOnRequest(r *Request) {\n\tif c.debugger != nil {\n\t\tc.debugger.Event(createEvent(\"request\", r.ID, c.ID, map[string]string{\n\t\t\t\"url\": r.URL.String(),\n\t\t}))\n\t}\n\tfor _, f := range c.requestCallbacks {\n\t\tf(r)\n\t}\n}\n```\n核心就 `for _, f := range c.requestCallbacks {\nf(r)\n}`这句，下面我每个回调函数都介绍一下\n\n\n### 回调函数\n\n这里介绍按生命周期的顺序来介绍\n\n\n#### 1. OnRequest\n ```go\n// OnRequest registers a function. Function will be executed on every\n// request made by the Collector\n// 这里是注册回调函数到 requestCallbacks\nfunc (c *Collector) OnRequest(f RequestCallback) {\n\tc.lock.Lock()\n\tif c.requestCallbacks == nil {\n\t\tc.requestCallbacks = make([]RequestCallback, 0, 4)\n\t}\n\tc.requestCallbacks = append(c.requestCallbacks, f)\n\tc.lock.Unlock()\n}\n\n\n// 在fetch中调用最早调用的\nfunc (c *Collector) handleOnRequest(r *Request) {\n\tif c.debugger != nil {\n\t\tc.debugger.Event(createEvent(\"request\", r.ID, c.ID, map[string]string{\n\t\t\t\"url\": r.URL.String(),\n\t\t}))\n\t}\n\tfor _, f := range c.requestCallbacks {\n\t\tf(r)\n\t}\n}\n```\n\n\n#### 2. OnResponse & handleOnResponse\n```go\n// OnResponse registers a function. Function will be executed on every response\nfunc (c *Collector) OnResponse(f ResponseCallback) {\n\tc.lock.Lock()\n\tif c.responseCallbacks == nil {\n\t\tc.responseCallbacks = make([]ResponseCallback, 0, 4)\n\t}\n\tc.responseCallbacks = append(c.responseCallbacks, f)\n\tc.lock.Unlock()\n}\n\n\nfunc (c *Collector) handleOnResponse(r *Response) {\n\tif c.debugger != nil {\n\t\tc.debugger.Event(createEvent(\"response\", r.Request.ID, c.ID, map[string]string{\n\t\t\t\"url\":    r.Request.URL.String(),\n\t\t\t\"status\": http.StatusText(r.StatusCode),\n\t\t}))\n\t}\n\tfor _, f := range c.responseCallbacks {\n\t\tf(r)\n\t}\n}\n\n```\n\n\n#### 3. OnHTML & handleOnHTML\n```go\n// OnHTML registers a function. Function will be executed on every HTML\n// element matched by the GoQuery Selector parameter.\n// GoQuery Selector is a selector used by https://github.com/PuerkitoBio/goquery\nfunc (c *Collector) OnHTML(goquerySelector string, f HTMLCallback) {\n\tc.lock.Lock()\n\tif c.htmlCallbacks == nil {\n\t\tc.htmlCallbacks = make([]*htmlCallbackContainer, 0, 4)\n\t}\n\tc.htmlCallbacks = append(c.htmlCallbacks, &htmlCallbackContainer{\n\t\tSelector: goquerySelector,\n\t\tFunction: f,\n\t})\n\tc.lock.Unlock()\n}\n\n// 这个解析html的逻辑比较多一些\nfunc (c *Collector) handleOnHTML(resp *Response) error {\n\tif len(c.htmlCallbacks) == 0 || !strings.Contains(strings.ToLower(resp.Headers.Get(\"Content-Type\")), \"html\") {\n\t\treturn nil\n\t}\n\tdoc, err := goquery.NewDocumentFromReader(bytes.NewBuffer(resp.Body))\n\tif err != nil {\n\t\treturn err\n\t}\n\tif href, found := doc.Find(\"base[href]\").Attr(\"href\"); found {\n\t\tresp.Request.baseURL, _ = url.Parse(href)\n\t}\n\tfor _, cc := range c.htmlCallbacks {\n\t\ti := 0\n\t\tdoc.Find(cc.Selector).Each(func(_ int, s *goquery.Selection) {\n\t\t\tfor _, n := range s.Nodes {\n\t\t\t\te := NewHTMLElementFromSelectionNode(resp, s, n, i)\n\t\t\t\ti++\n\t\t\t\tif c.debugger != nil {\n\t\t\t\t\tc.debugger.Event(createEvent(\"html\", resp.Request.ID, c.ID, map[string]string{\n\t\t\t\t\t\t\"selector\": cc.Selector,\n\t\t\t\t\t\t\"url\":      resp.Request.URL.String(),\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t\tcc.Function(e)\n\t\t\t}\n\t\t})\n\t}\n\treturn nil\n}\n\n```\n\n#### 4. OnXML & handleOnXML\n\n```go\n// OnXML registers a function. Function will be executed on every XML\n// element matched by the xpath Query parameter.\n// xpath Query is used by https://github.com/antchfx/xmlquery\nfunc (c *Collector) OnXML(xpathQuery string, f XMLCallback) {\n\tc.lock.Lock()\n\tif c.xmlCallbacks == nil {\n\t\tc.xmlCallbacks = make([]*xmlCallbackContainer, 0, 4)\n\t}\n\tc.xmlCallbacks = append(c.xmlCallbacks, &xmlCallbackContainer{\n\t\tQuery:    xpathQuery,\n\t\tFunction: f,\n\t})\n\tc.lock.Unlock()\n}\n\n\n\nfunc (c *Collector) handleOnXML(resp *Response) error {\n\tif len(c.xmlCallbacks) == 0 {\n\t\treturn nil\n\t}\n\tcontentType := strings.ToLower(resp.Headers.Get(\"Content-Type\"))\n\tisXMLFile := strings.HasSuffix(strings.ToLower(resp.Request.URL.Path), \".xml\") || strings.HasSuffix(strings.ToLower(resp.Request.URL.Path), \".xml.gz\")\n\tif !strings.Contains(contentType, \"html\") && (!strings.Contains(contentType, \"xml\") && !isXMLFile) {\n\t\treturn nil\n\t}\n\n\tif strings.Contains(contentType, \"html\") {\n\t\tdoc, err := htmlquery.Parse(bytes.NewBuffer(resp.Body))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif e := htmlquery.FindOne(doc, \"//base\"); e != nil {\n\t\t\tfor _, a := range e.Attr {\n\t\t\t\tif a.Key == \"href\" {\n\t\t\t\t\tresp.Request.baseURL, _ = url.Parse(a.Val)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, cc := range c.xmlCallbacks {\n\t\t\tfor _, n := range htmlquery.Find(doc, cc.Query) {\n\t\t\t\te := NewXMLElementFromHTMLNode(resp, n)\n\t\t\t\tif c.debugger != nil {\n\t\t\t\t\tc.debugger.Event(createEvent(\"xml\", resp.Request.ID, c.ID, map[string]string{\n\t\t\t\t\t\t\"selector\": cc.Query,\n\t\t\t\t\t\t\"url\":      resp.Request.URL.String(),\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t\tcc.Function(e)\n\t\t\t}\n\t\t}\n\t} else if strings.Contains(contentType, \"xml\") || isXMLFile {\n\t\tdoc, err := xmlquery.Parse(bytes.NewBuffer(resp.Body))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tfor _, cc := range c.xmlCallbacks {\n\t\t\txmlquery.FindEach(doc, cc.Query, func(i int, n *xmlquery.Node) {\n\t\t\t\te := NewXMLElementFromXMLNode(resp, n)\n\t\t\t\tif c.debugger != nil {\n\t\t\t\t\tc.debugger.Event(createEvent(\"xml\", resp.Request.ID, c.ID, map[string]string{\n\t\t\t\t\t\t\"selector\": cc.Query,\n\t\t\t\t\t\t\"url\":      resp.Request.URL.String(),\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t\tcc.Function(e)\n\t\t\t})\n\t\t}\n\t}\n\treturn nil\n}\n\n\n\n```\n\n\n#### 5. OnError & handleOnError\n这个会多次调用， 如果 `err != nil情况下调用比较多`， 爬虫异常的情况下，会调用\n\n```go\n// OnError registers a function. Function will be executed if an error\n// occurs during the HTTP request.\nfunc (c *Collector) OnError(f ErrorCallback) {\n\tc.lock.Lock()\n\tif c.errorCallbacks == nil {\n\t\tc.errorCallbacks = make([]ErrorCallback, 0, 4)\n\t}\n\tc.errorCallbacks = append(c.errorCallbacks, f)\n\tc.lock.Unlock()\n}\n\n\nfunc (c *Collector) handleOnError(response *Response, err error, request *Request, ctx *Context) error {\n\tif err == nil && (c.ParseHTTPErrorResponse || response.StatusCode < 203) {\n\t\treturn nil\n\t}\n\tif err == nil && response.StatusCode >= 203 {\n\t\terr = errors.New(http.StatusText(response.StatusCode))\n\t}\n\tif response == nil {\n\t\tresponse = &Response{\n\t\t\tRequest: request,\n\t\t\tCtx:     ctx,\n\t\t}\n\t}\n\tif c.debugger != nil {\n\t\tc.debugger.Event(createEvent(\"error\", request.ID, c.ID, map[string]string{\n\t\t\t\"url\":    request.URL.String(),\n\t\t\t\"status\": http.StatusText(response.StatusCode),\n\t\t}))\n\t}\n\tif response.Request == nil {\n\t\tresponse.Request = request\n\t}\n\tif response.Ctx == nil {\n\t\tresponse.Ctx = request.Ctx\n\t}\n\tfor _, f := range c.errorCallbacks {\n\t\tf(response, err)\n\t}\n\treturn err\n}\n```\n\n#### 6. OnScraped & handleOnScraped\n最后一步的回调函数处理\n```go\n// OnScraped registers a function. Function will be executed after\n// OnHTML, as a final part of the scraping.\nfunc (c *Collector) OnScraped(f ScrapedCallback) {\n\tc.lock.Lock()\n\tif c.scrapedCallbacks == nil {\n\t\tc.scrapedCallbacks = make([]ScrapedCallback, 0, 4)\n\t}\n\tc.scrapedCallbacks = append(c.scrapedCallbacks, f)\n\tc.lock.Unlock()\n}\n\nfunc (c *Collector) handleOnScraped(r *Response) {\n\tif c.debugger != nil {\n\t\tc.debugger.Event(createEvent(\"scraped\", r.Request.ID, c.ID, map[string]string{\n\t\t\t\"url\": r.Request.URL.String(),\n\t\t}))\n\t}\n\tfor _, f := range c.scrapedCallbacks {\n\t\tf(r)\n\t}\n}\n```\n注册回调函数的method还有几个没有列出来，感兴趣的，自己看一下，\n\n上面介绍完了， 再回头看🌰\n```go\n\t// On every a element which has href attribute call callback\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\tlink := e.Attr(\"href\")\n\t\t// Print link\n\t\tfmt.Printf(\"Link found: %q -> %s\\n\", e.Text, link)\n\t\t// Visit link found on page\n\t\t// Only those links are visited which are in AllowedDomains\n\t\tc.Visit(e.Request.AbsoluteURL(link))\n\t})\n\n\t// Before making a request print \"Visiting ...\"\n\tc.OnRequest(func(r *colly.Request) {\n\t\tfmt.Println(\"Visiting\", r.URL.String())\n\t})\n```\n一般文档解析放在html, xml 中\n\n\n\n### 页面跳转爬取\n一般处理就2种，一种是相同逻辑的页面，比如`下一页`，另一种，就是不同逻辑的，比如`子页面`\n1.  在`html`,`xml`，解析出来以后，构建新的请求，我们看一下，相同页面\n ```go\n\t// On every a element which has href attribute call callback\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\t// If attribute class is this long string return from callback\n\t\t// As this a is irrelevant\n\t\tif e.Attr(\"class\") == \"Button_1qxkboh-o_O-primary_cv02ee-o_O-md_28awn8-o_O-primaryLink_109aggg\" {\n\t\t\treturn\n\t\t}\n\t\tlink := e.Attr(\"href\")\n\t\t// If link start with browse or includes either signup or login return from callback\n\t\tif !strings.HasPrefix(link, \"/browse\") || strings.Index(link, \"=signup\") > -1 || strings.Index(link, \"=login\") > -1 {\n\t\t\treturn\n\t\t}\n\t\t// start scaping the page under the link found\n\t\te.Request.Visit(link)\n\t})\n\n```\n上面是 HTML的回调函数，解析页面，获取了`url`,使用 `e.Request.Visit(link)`, 其实就是 `e.Request.collector.Visit(link)`\n我解释一下\n```go\nfunc (c *Collector) fetch(u, method string, depth int, requestData io.Reader, ctx *Context, hdr http.Header, req *http.Request) error {\n\tdefer c.wg.Done()\n\tif ctx == nil {\n\t\tctx = NewContext()\n\t}\n\trequest := &Request{\n\t\tURL:       req.URL,\n\t\tHeaders:   &req.Header,\n\t\tCtx:       ctx,\n\t\tDepth:     depth,\n\t\tMethod:    method,\n\t\tBody:      requestData,\n\t\tcollector: c, // 这个上面有介绍\n\t\tID:        atomic.AddUint32(&c.requestCount, 1),\n\t}\n    ....\n    }}\n\n\n// Visit continues Collector's collecting job by creating a\n// request and preserves the Context of the previous request.\n// Visit also calls the previously provided callbacks\nfunc (r *Request) Visit(URL string) error {\n\treturn r.collector.scrape(r.AbsoluteURL(URL), \"GET\", r.Depth+1, nil, r.Ctx, nil, true)\n}\n```\n这种方法在实际开发中经常会用到。\n\n\n2. 子页面的处理逻辑\n   colly中主要是以`Collector`为中心， 然后各种回调函数进行处理，子页面需要不同的回调函数，所以就需要新的 `Collector`\n\n```go\n\t// Instantiate default collector\n\tc := colly.NewCollector(\n\t\t// Visit only domains: coursera.org, www.coursera.org\n\t\tcolly.AllowedDomains(\"coursera.org\", \"www.coursera.org\"),\n\n\t\t// Cache responses to prevent multiple download of pages\n\t\t// even if the collector is restarted\n\t\tcolly.CacheDir(\"./coursera_cache\"),\n\t)\n\n\t// Create another collector to scrape course details\n\tdetailCollector := c.Clone()\n\n\t// Before making a request print \"Visiting ...\"\n\tc.OnRequest(func(r *colly.Request) {\n\t\tlog.Println(\"visiting\", r.URL.String())\n\t})\n\n\t// On every a HTML element which has name attribute call callback\n\tc.OnHTML(`a[name]`, func(e *colly.HTMLElement) {\n\t\t// Activate detailCollector if the link contains \"coursera.org/learn\"\n\t\tcourseURL := e.Request.AbsoluteURL(e.Attr(\"href\"))\n\t\tif strings.Index(courseURL, \"coursera.org/learn\") != -1 {\n           // 子页面或其他页面\n\t\t\tdetailCollector.Visit(courseURL)\n\t\t}\n\t})\n```\n\n\n### 持久化\n`Collector`对象有一个属性 `store             storage.Storage`是存储的，这个是将数据直接存储下来，没有清洗。\n比如， 我需要将数据持久化到数据库中，其实很简单， 在回调函数中处理。\n\n给个例子\n```go\n\tc.OnHTML(\"#currencies-all tbody tr\", func(e *colly.HTMLElement) {\n\t\tmysql.WriteObjectStrings([]string{\n\t\t\te.ChildText(\".currency-name-container\"),\n\t\t\te.ChildText(\".col-symbol\"),\n\t\t\te.ChildAttr(\"a.price\", \"data-usd\"),\n\t\t\te.ChildAttr(\"a.volume\", \"data-usd\"),\n\t\t\te.ChildAttr(\".market-cap\", \"data-usd\"),\n\t\t\te.ChildAttr(\".percent-change[data-timespan=\\\"1h\\\"]\", \"data-percentusd\"),\n\t\t\te.ChildAttr(\".percent-change[data-timespan=\\\"24h\\\"]\", \"data-percentusd\"),\n\t\t\te.ChildAttr(\".percent-change[data-timespan=\\\"7d\\\"]\", \"data-percentusd\"),\n\t\t})\n\t})\n```\n\n\n### 总结\n好了，介绍完了，我没有介绍如何使用，我自己也没有写任何的代码， 我只想分享给你这种软件架构的特点以及设计模式， 希望你可以借鉴应用到工作中，一般写框架都是采用这种思维。  \n下面这张图很形象，爬虫框架就这些东西。\n![通用爬虫框架架构](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/BqC7ix.jpg)","source":"_posts/colly.md","raw":"---\ntitle: go爬虫框架colly源码以及软件架构分析\ndate: 2021-08-01 21:54:55\nimg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/RYdTI7.png\ntop: true\nhide: false\ncover: true\ncoverImg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/pL4vEU.jpg\ntoc: true\nmathjax: false\nsummary: 介绍go爬虫框架，从源码介绍colly数据流转过程\nkeywords:\n-  go\n- colly\n- 爬虫\n- crawler\n\ncategories: 技术\ntags:\n-  go\n-  colly\n- 爬虫\n- crawler\n\n\n---\n\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/6hvTNM.jpg)\n\n无意中发现了`colly`,我一直是使用python进行爬虫的， 学习golang的使用， 用`go`参考`scrapy`架构写了一个爬虫的框架demo。我一直以为go不适合做爬虫， go的领域是后端服务。然后去搜索了一下`colly`, 发现还是很流行。 我个人还是比较喜欢爬虫， 网络上的数据就是公开的API， 所以， 爬虫去请求接口获取数据。当然我是遵循君子协议的。\n\n好， 下面进入正题，介绍`colly`\n\n### colly介绍\n`Lightning Fast and Elegant Scraping Framework for Gophers`\n\n`Colly provides a clean interface to write any kind of crawler/scraper/spider.`\n官方的介绍，gocolly快速优雅，在单核上每秒可以发起1K以上请求；以回调函数的形式提供了一组接口，可以实现任意类型的爬虫；依赖goquery库可以像jquery一样选择web元素。\n\n\n### 安装使用\n[colly](https://github.com/gocolly/colly)\n[官网](http://go-colly.org/)\n\n```\ngo get -u github.com/gocolly/colly/...\n```\n\n```go\nimport \"github.com/gocolly/colly\"\n```\n\n\n\n### 架构特点\n了解爬虫的都知道一个爬虫请求的生命周期\n\n>1. 构建请求\n>2. 发送请求\n>3. 获取文档或数据\n>4. 解析文档或清洗数据\n>5. 数据处理或持久化\n\n\nscrapy的设计理念是将上面的每一个步骤抽离出来，然后做出组件的形式， 最后通过调度组成流水线的工作形式。\n我们看一下scrapy的架构图， 这里只是简单的介绍下， 后面有时间，我深入介绍scrapy\n![0kfy9f](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/0kfy9f.jpg)\n\n\n如图，`downloader`负责请求获取页面，`spiders`中写具体解析文档的逻辑，`item PipeLine`数据最后处理， 中间有一些中间件，可以一些功能的装饰。比如，代理，请求频率等。\n\n\n我们介绍一下colly的架构特点\ncolly的逻辑更像是面向过程编程的， colly的逻辑就是按上面生命周期的顺序管道处理， 只是在不同阶段，加上回调函数进行过滤的时候进行处理。\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/IS4YSc.jpg)\n\n\n\n\n\n下面也按照这个逻辑进行介绍\n\n\n### 源码分析\n\n先给一个🌰\n```go\n\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/gocolly/colly\"\n)\n\nfunc main() {\n\t// Instantiate default collector\n\tc := colly.NewCollector(\n\t\t// Visit only domains: hackerspaces.org, wiki.hackerspaces.org\n\t\tcolly.AllowedDomains(\"hackerspaces.org\", \"wiki.hackerspaces.org\"),\n\t)\n\n\t// On every a element which has href attribute call callback\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\tlink := e.Attr(\"href\")\n\t\t// Print link\n\t\tfmt.Printf(\"Link found: %q -> %s\\n\", e.Text, link)\n\t\t// Visit link found on page\n\t\t// Only those links are visited which are in AllowedDomains\n\t\tc.Visit(e.Request.AbsoluteURL(link))\n\t})\n\n\t// Before making a request print \"Visiting ...\"\n\tc.OnRequest(func(r *colly.Request) {\n\t\tfmt.Println(\"Visiting\", r.URL.String())\n\t})\n\n\t// Start scraping on https://hackerspaces.org\n\tc.Visit(\"https://hackerspaces.org/\")\n}\n\n```\n这是官方给的示例， 可以看到`colly.NewCollector`创建一个`收集器`， colly的所有处理逻辑都是以`Collector`为核心进行操作的。\n\n\n我们看一下 `Collector`结构体的定义\n```go\n// Collector provides the scraper instance for a scraping job\ntype Collector struct {\n\t// UserAgent is the User-Agent string used by HTTP requests\n\tUserAgent string\n\t// MaxDepth limits the recursion depth of visited URLs.\n\t// Set it to 0 for infinite recursion (default).\n\tMaxDepth int\n\t// AllowedDomains is a domain whitelist.\n\t// Leave it blank to allow any domains to be visited\n\tAllowedDomains []string\n\t// DisallowedDomains is a domain blacklist.\n\tDisallowedDomains []string\n\t// DisallowedURLFilters is a list of regular expressions which restricts\n\t// visiting URLs. If any of the rules matches to a URL the\n\t// request will be stopped. DisallowedURLFilters will\n\t// be evaluated before URLFilters\n\t// Leave it blank to allow any URLs to be visited\n\tDisallowedURLFilters []*regexp.Regexp\n\t// URLFilters is a list of regular expressions which restricts\n\t// visiting URLs. If any of the rules matches to a URL the\n\t// request won't be stopped. DisallowedURLFilters will\n\t// be evaluated before URLFilters\n\n\t// Leave it blank to allow any URLs to be visited\n\tURLFilters []*regexp.Regexp\n\n\t// AllowURLRevisit allows multiple downloads of the same URL\n\tAllowURLRevisit bool\n\t// MaxBodySize is the limit of the retrieved response body in bytes.\n\t// 0 means unlimited.\n\t// The default value for MaxBodySize is 10MB (10 * 1024 * 1024 bytes).\n\tMaxBodySize int\n\t// CacheDir specifies a location where GET requests are cached as files.\n\t// When it's not defined, caching is disabled.\n\tCacheDir string\n\t// IgnoreRobotsTxt allows the Collector to ignore any restrictions set by\n\t// the target host's robots.txt file.  See http://www.robotstxt.org/ for more\n\t// information.\n\tIgnoreRobotsTxt bool\n\t// Async turns on asynchronous network communication. Use Collector.Wait() to\n\t// be sure all requests have been finished.\n\tAsync bool\n\t// ParseHTTPErrorResponse allows parsing HTTP responses with non 2xx status codes.\n\t// By default, Colly parses only successful HTTP responses. Set ParseHTTPErrorResponse\n\t// to true to enable it.\n\tParseHTTPErrorResponse bool\n\t// ID is the unique identifier of a collector\n\tID uint32\n\t// DetectCharset can enable character encoding detection for non-utf8 response bodies\n\t// without explicit charset declaration. This feature uses https://github.com/saintfish/chardet\n\tDetectCharset bool\n\t// RedirectHandler allows control on how a redirect will be managed\n\tRedirectHandler func(req *http.Request, via []*http.Request) error\n\t// CheckHead performs a HEAD request before every GET to pre-validate the response\n\tCheckHead         bool\n\tstore             storage.Storage\n\tdebugger          debug.Debugger\n\trobotsMap         map[string]*robotstxt.RobotsData\n\thtmlCallbacks     []*htmlCallbackContainer\n\txmlCallbacks      []*xmlCallbackContainer\n\trequestCallbacks  []RequestCallback\n\tresponseCallbacks []ResponseCallback\n\terrorCallbacks    []ErrorCallback\n\tscrapedCallbacks  []ScrapedCallback\n\trequestCount      uint32\n\tresponseCount     uint32\n\tbackend           *httpBackend\n\twg                *sync.WaitGroup\n\tlock              *sync.RWMutex\n}\n```\n\n上面的具体属性我就不介绍了， 看看注释也就懂了。\n我就先按上面的示例解释源码\n```bash\n    // 创建一个 Collector对象\n\tc := colly.NewCollector(\n\t\t// Visit only domains: hackerspaces.org, wiki.hackerspaces.org\n\t\tcolly.AllowedDomains(\"hackerspaces.org\", \"wiki.hackerspaces.org\"),\n\t)\n\n\t// 添加一个HTML的回调函数\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\tlink := e.Attr(\"href\")\n\t\t// Print link\n\t\tfmt.Printf(\"Link found: %q -> %s\\n\", e.Text, link)\n\t\t// Visit link found on page\n\t\t// Only those links are visited which are in AllowedDomains\n\t\tc.Visit(e.Request.AbsoluteURL(link))\n\t})\n\n\t// 添加一个 Requset回调函数\n\tc.OnRequest(func(r *colly.Request) {\n\t\tfmt.Println(\"Visiting\", r.URL.String())\n\t})\n\n\t// 开始爬取\n\tc.Visit(\"https://hackerspaces.org/\")\n```\n回调函数如何用？ 什么作用？ 先卖个关子， `c.Visit(\"https://hackerspaces.org/\")`是入口， 那就先分析它，\n\n```go\n// Visit starts Collector's collecting job by creating a\n// request to the URL specified in parameter.\n// Visit also calls the previously provided callbacks\nfunc (c *Collector) Visit(URL string) error {\n\tif c.CheckHead {\n\t\tif check := c.scrape(URL, \"HEAD\", 1, nil, nil, nil, true); check != nil {\n\t\t\treturn check\n\t\t}\n\t}\n\treturn c.scrape(URL, \"GET\", 1, nil, nil, nil, true)\n}\n```\n👆又出来一个新的method，\n\n```go\nfunc (c *Collector) scrape(u, method string, depth int, requestData io.Reader, ctx *Context, hdr http.Header, checkRevisit bool) error {\n    // 检查请求是否合法\n\tif err := c.requestCheck(u, method, depth, checkRevisit); err != nil {\n\t\treturn err\n\t}\n    // 解析url，\n\tparsedURL, err := url.Parse(u)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif parsedURL.Scheme == \"\" {\n\t\tparsedURL.Scheme = \"http\"\n\t}\n\tif !c.isDomainAllowed(parsedURL.Hostname()) {\n\t\treturn ErrForbiddenDomain\n\t}\n    // robots协议\n\tif method != \"HEAD\" && !c.IgnoreRobotsTxt {\n\t\tif err = c.checkRobots(parsedURL); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n     // headers\n\tif hdr == nil {\n\t\thdr = http.Header{\"User-Agent\": []string{c.UserAgent}}\n\t}\n\trc, ok := requestData.(io.ReadCloser)\n\tif !ok && requestData != nil {\n\t\trc = ioutil.NopCloser(requestData)\n\t}\n\t// The Go HTTP API ignores \"Host\" in the headers, preferring the client\n\t// to use the Host field on Request.\n\thost := parsedURL.Host\n\tif hostHeader := hdr.Get(\"Host\"); hostHeader != \"\" {\n\t\thost = hostHeader\n\t}\n    // 构造http.Request\n\treq := &http.Request{\n\t\tMethod:     method,\n\t\tURL:        parsedURL,\n\t\tProto:      \"HTTP/1.1\",\n\t\tProtoMajor: 1,\n\t\tProtoMinor: 1,\n\t\tHeader:     hdr,\n\t\tBody:       rc,\n\t\tHost:       host,\n\t}\n    // 请求的数据（requestData）转换成io.ReadCloser接口数据\n\tsetRequestBody(req, requestData)\n\tu = parsedURL.String()\n\tc.wg.Add(1)\n    // 异步方式\n\tif c.Async {\n\t\tgo c.fetch(u, method, depth, requestData, ctx, hdr, req)\n\t\treturn nil\n\t}\n\treturn c.fetch(u, method, depth, requestData, ctx, hdr, req)\n}\n```\n\n上面很大篇幅都是检查， 现在还在 `request`的阶段， 还没有response，看`c.fetch`\n\nfetch就是colly的核心内容\n\n```go\nfunc (c *Collector) fetch(u, method string, depth int, requestData io.Reader, ctx *Context, hdr http.Header, req *http.Request) error {\n\tdefer c.wg.Done()\n\tif ctx == nil {\n\t\tctx = NewContext()\n\t}\n\trequest := &Request{\n\t\tURL:       req.URL,\n\t\tHeaders:   &req.Header,\n\t\tCtx:       ctx,\n\t\tDepth:     depth,\n\t\tMethod:    method,\n\t\tBody:      requestData,\n\t\tcollector: c, // 这里将Collector放到request中，这个可以对请求继续处理\n\t\tID:        atomic.AddUint32(&c.requestCount, 1),\n\t}\n    // 回调函数处理 request\n\tc.handleOnRequest(request)\n\n\tif request.abort {\n\t\treturn nil\n\t}\n\n\tif method == \"POST\" && req.Header.Get(\"Content-Type\") == \"\" {\n\t\treq.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n\t}\n\n\tif req.Header.Get(\"Accept\") == \"\" {\n\t\treq.Header.Set(\"Accept\", \"*/*\")\n\t}\n\n\torigURL := req.URL\n    // 这里是 去请求网络， 是调用了 `http.Client.Do`方法请求的\n\tresponse, err := c.backend.Cache(req, c.MaxBodySize, c.CacheDir)\n\tif proxyURL, ok := req.Context().Value(ProxyURLKey).(string); ok {\n\t\trequest.ProxyURL = proxyURL\n\t}\n    // 回调函数，处理error\n\tif err := c.handleOnError(response, err, request, ctx); err != nil {\n\t\treturn err\n\t}\n\tif req.URL != origURL {\n\t\trequest.URL = req.URL\n\t\trequest.Headers = &req.Header\n\t}\n\tatomic.AddUint32(&c.responseCount, 1)\n\tresponse.Ctx = ctx\n\tresponse.Request = request\n\n\terr = response.fixCharset(c.DetectCharset, request.ResponseCharacterEncoding)\n\tif err != nil {\n\t\treturn err\n\t}\n    // 回调函数 处理Response\n\tc.handleOnResponse(response)\n    \n    // 回调函数 HTML\n\terr = c.handleOnHTML(response)\n\tif err != nil {\n\t\tc.handleOnError(response, err, request, ctx)\n\t}\n    // 回调函数XML\n\terr = c.handleOnXML(response)\n\tif err != nil {\n\t\tc.handleOnError(response, err, request, ctx)\n\t}\n    // 回调函数 Scraped\n\tc.handleOnScraped(response)\n\n\treturn err\n}\n\n\n```\n\n看到了， 这就是一个完整的流程。 好， 我们看一下回调函数做了什么？\n```go\nfunc (c *Collector) handleOnRequest(r *Request) {\n\tif c.debugger != nil {\n\t\tc.debugger.Event(createEvent(\"request\", r.ID, c.ID, map[string]string{\n\t\t\t\"url\": r.URL.String(),\n\t\t}))\n\t}\n\tfor _, f := range c.requestCallbacks {\n\t\tf(r)\n\t}\n}\n```\n核心就 `for _, f := range c.requestCallbacks {\nf(r)\n}`这句，下面我每个回调函数都介绍一下\n\n\n### 回调函数\n\n这里介绍按生命周期的顺序来介绍\n\n\n#### 1. OnRequest\n ```go\n// OnRequest registers a function. Function will be executed on every\n// request made by the Collector\n// 这里是注册回调函数到 requestCallbacks\nfunc (c *Collector) OnRequest(f RequestCallback) {\n\tc.lock.Lock()\n\tif c.requestCallbacks == nil {\n\t\tc.requestCallbacks = make([]RequestCallback, 0, 4)\n\t}\n\tc.requestCallbacks = append(c.requestCallbacks, f)\n\tc.lock.Unlock()\n}\n\n\n// 在fetch中调用最早调用的\nfunc (c *Collector) handleOnRequest(r *Request) {\n\tif c.debugger != nil {\n\t\tc.debugger.Event(createEvent(\"request\", r.ID, c.ID, map[string]string{\n\t\t\t\"url\": r.URL.String(),\n\t\t}))\n\t}\n\tfor _, f := range c.requestCallbacks {\n\t\tf(r)\n\t}\n}\n```\n\n\n#### 2. OnResponse & handleOnResponse\n```go\n// OnResponse registers a function. Function will be executed on every response\nfunc (c *Collector) OnResponse(f ResponseCallback) {\n\tc.lock.Lock()\n\tif c.responseCallbacks == nil {\n\t\tc.responseCallbacks = make([]ResponseCallback, 0, 4)\n\t}\n\tc.responseCallbacks = append(c.responseCallbacks, f)\n\tc.lock.Unlock()\n}\n\n\nfunc (c *Collector) handleOnResponse(r *Response) {\n\tif c.debugger != nil {\n\t\tc.debugger.Event(createEvent(\"response\", r.Request.ID, c.ID, map[string]string{\n\t\t\t\"url\":    r.Request.URL.String(),\n\t\t\t\"status\": http.StatusText(r.StatusCode),\n\t\t}))\n\t}\n\tfor _, f := range c.responseCallbacks {\n\t\tf(r)\n\t}\n}\n\n```\n\n\n#### 3. OnHTML & handleOnHTML\n```go\n// OnHTML registers a function. Function will be executed on every HTML\n// element matched by the GoQuery Selector parameter.\n// GoQuery Selector is a selector used by https://github.com/PuerkitoBio/goquery\nfunc (c *Collector) OnHTML(goquerySelector string, f HTMLCallback) {\n\tc.lock.Lock()\n\tif c.htmlCallbacks == nil {\n\t\tc.htmlCallbacks = make([]*htmlCallbackContainer, 0, 4)\n\t}\n\tc.htmlCallbacks = append(c.htmlCallbacks, &htmlCallbackContainer{\n\t\tSelector: goquerySelector,\n\t\tFunction: f,\n\t})\n\tc.lock.Unlock()\n}\n\n// 这个解析html的逻辑比较多一些\nfunc (c *Collector) handleOnHTML(resp *Response) error {\n\tif len(c.htmlCallbacks) == 0 || !strings.Contains(strings.ToLower(resp.Headers.Get(\"Content-Type\")), \"html\") {\n\t\treturn nil\n\t}\n\tdoc, err := goquery.NewDocumentFromReader(bytes.NewBuffer(resp.Body))\n\tif err != nil {\n\t\treturn err\n\t}\n\tif href, found := doc.Find(\"base[href]\").Attr(\"href\"); found {\n\t\tresp.Request.baseURL, _ = url.Parse(href)\n\t}\n\tfor _, cc := range c.htmlCallbacks {\n\t\ti := 0\n\t\tdoc.Find(cc.Selector).Each(func(_ int, s *goquery.Selection) {\n\t\t\tfor _, n := range s.Nodes {\n\t\t\t\te := NewHTMLElementFromSelectionNode(resp, s, n, i)\n\t\t\t\ti++\n\t\t\t\tif c.debugger != nil {\n\t\t\t\t\tc.debugger.Event(createEvent(\"html\", resp.Request.ID, c.ID, map[string]string{\n\t\t\t\t\t\t\"selector\": cc.Selector,\n\t\t\t\t\t\t\"url\":      resp.Request.URL.String(),\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t\tcc.Function(e)\n\t\t\t}\n\t\t})\n\t}\n\treturn nil\n}\n\n```\n\n#### 4. OnXML & handleOnXML\n\n```go\n// OnXML registers a function. Function will be executed on every XML\n// element matched by the xpath Query parameter.\n// xpath Query is used by https://github.com/antchfx/xmlquery\nfunc (c *Collector) OnXML(xpathQuery string, f XMLCallback) {\n\tc.lock.Lock()\n\tif c.xmlCallbacks == nil {\n\t\tc.xmlCallbacks = make([]*xmlCallbackContainer, 0, 4)\n\t}\n\tc.xmlCallbacks = append(c.xmlCallbacks, &xmlCallbackContainer{\n\t\tQuery:    xpathQuery,\n\t\tFunction: f,\n\t})\n\tc.lock.Unlock()\n}\n\n\n\nfunc (c *Collector) handleOnXML(resp *Response) error {\n\tif len(c.xmlCallbacks) == 0 {\n\t\treturn nil\n\t}\n\tcontentType := strings.ToLower(resp.Headers.Get(\"Content-Type\"))\n\tisXMLFile := strings.HasSuffix(strings.ToLower(resp.Request.URL.Path), \".xml\") || strings.HasSuffix(strings.ToLower(resp.Request.URL.Path), \".xml.gz\")\n\tif !strings.Contains(contentType, \"html\") && (!strings.Contains(contentType, \"xml\") && !isXMLFile) {\n\t\treturn nil\n\t}\n\n\tif strings.Contains(contentType, \"html\") {\n\t\tdoc, err := htmlquery.Parse(bytes.NewBuffer(resp.Body))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif e := htmlquery.FindOne(doc, \"//base\"); e != nil {\n\t\t\tfor _, a := range e.Attr {\n\t\t\t\tif a.Key == \"href\" {\n\t\t\t\t\tresp.Request.baseURL, _ = url.Parse(a.Val)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor _, cc := range c.xmlCallbacks {\n\t\t\tfor _, n := range htmlquery.Find(doc, cc.Query) {\n\t\t\t\te := NewXMLElementFromHTMLNode(resp, n)\n\t\t\t\tif c.debugger != nil {\n\t\t\t\t\tc.debugger.Event(createEvent(\"xml\", resp.Request.ID, c.ID, map[string]string{\n\t\t\t\t\t\t\"selector\": cc.Query,\n\t\t\t\t\t\t\"url\":      resp.Request.URL.String(),\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t\tcc.Function(e)\n\t\t\t}\n\t\t}\n\t} else if strings.Contains(contentType, \"xml\") || isXMLFile {\n\t\tdoc, err := xmlquery.Parse(bytes.NewBuffer(resp.Body))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tfor _, cc := range c.xmlCallbacks {\n\t\t\txmlquery.FindEach(doc, cc.Query, func(i int, n *xmlquery.Node) {\n\t\t\t\te := NewXMLElementFromXMLNode(resp, n)\n\t\t\t\tif c.debugger != nil {\n\t\t\t\t\tc.debugger.Event(createEvent(\"xml\", resp.Request.ID, c.ID, map[string]string{\n\t\t\t\t\t\t\"selector\": cc.Query,\n\t\t\t\t\t\t\"url\":      resp.Request.URL.String(),\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t\tcc.Function(e)\n\t\t\t})\n\t\t}\n\t}\n\treturn nil\n}\n\n\n\n```\n\n\n#### 5. OnError & handleOnError\n这个会多次调用， 如果 `err != nil情况下调用比较多`， 爬虫异常的情况下，会调用\n\n```go\n// OnError registers a function. Function will be executed if an error\n// occurs during the HTTP request.\nfunc (c *Collector) OnError(f ErrorCallback) {\n\tc.lock.Lock()\n\tif c.errorCallbacks == nil {\n\t\tc.errorCallbacks = make([]ErrorCallback, 0, 4)\n\t}\n\tc.errorCallbacks = append(c.errorCallbacks, f)\n\tc.lock.Unlock()\n}\n\n\nfunc (c *Collector) handleOnError(response *Response, err error, request *Request, ctx *Context) error {\n\tif err == nil && (c.ParseHTTPErrorResponse || response.StatusCode < 203) {\n\t\treturn nil\n\t}\n\tif err == nil && response.StatusCode >= 203 {\n\t\terr = errors.New(http.StatusText(response.StatusCode))\n\t}\n\tif response == nil {\n\t\tresponse = &Response{\n\t\t\tRequest: request,\n\t\t\tCtx:     ctx,\n\t\t}\n\t}\n\tif c.debugger != nil {\n\t\tc.debugger.Event(createEvent(\"error\", request.ID, c.ID, map[string]string{\n\t\t\t\"url\":    request.URL.String(),\n\t\t\t\"status\": http.StatusText(response.StatusCode),\n\t\t}))\n\t}\n\tif response.Request == nil {\n\t\tresponse.Request = request\n\t}\n\tif response.Ctx == nil {\n\t\tresponse.Ctx = request.Ctx\n\t}\n\tfor _, f := range c.errorCallbacks {\n\t\tf(response, err)\n\t}\n\treturn err\n}\n```\n\n#### 6. OnScraped & handleOnScraped\n最后一步的回调函数处理\n```go\n// OnScraped registers a function. Function will be executed after\n// OnHTML, as a final part of the scraping.\nfunc (c *Collector) OnScraped(f ScrapedCallback) {\n\tc.lock.Lock()\n\tif c.scrapedCallbacks == nil {\n\t\tc.scrapedCallbacks = make([]ScrapedCallback, 0, 4)\n\t}\n\tc.scrapedCallbacks = append(c.scrapedCallbacks, f)\n\tc.lock.Unlock()\n}\n\nfunc (c *Collector) handleOnScraped(r *Response) {\n\tif c.debugger != nil {\n\t\tc.debugger.Event(createEvent(\"scraped\", r.Request.ID, c.ID, map[string]string{\n\t\t\t\"url\": r.Request.URL.String(),\n\t\t}))\n\t}\n\tfor _, f := range c.scrapedCallbacks {\n\t\tf(r)\n\t}\n}\n```\n注册回调函数的method还有几个没有列出来，感兴趣的，自己看一下，\n\n上面介绍完了， 再回头看🌰\n```go\n\t// On every a element which has href attribute call callback\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\tlink := e.Attr(\"href\")\n\t\t// Print link\n\t\tfmt.Printf(\"Link found: %q -> %s\\n\", e.Text, link)\n\t\t// Visit link found on page\n\t\t// Only those links are visited which are in AllowedDomains\n\t\tc.Visit(e.Request.AbsoluteURL(link))\n\t})\n\n\t// Before making a request print \"Visiting ...\"\n\tc.OnRequest(func(r *colly.Request) {\n\t\tfmt.Println(\"Visiting\", r.URL.String())\n\t})\n```\n一般文档解析放在html, xml 中\n\n\n\n### 页面跳转爬取\n一般处理就2种，一种是相同逻辑的页面，比如`下一页`，另一种，就是不同逻辑的，比如`子页面`\n1.  在`html`,`xml`，解析出来以后，构建新的请求，我们看一下，相同页面\n ```go\n\t// On every a element which has href attribute call callback\n\tc.OnHTML(\"a[href]\", func(e *colly.HTMLElement) {\n\t\t// If attribute class is this long string return from callback\n\t\t// As this a is irrelevant\n\t\tif e.Attr(\"class\") == \"Button_1qxkboh-o_O-primary_cv02ee-o_O-md_28awn8-o_O-primaryLink_109aggg\" {\n\t\t\treturn\n\t\t}\n\t\tlink := e.Attr(\"href\")\n\t\t// If link start with browse or includes either signup or login return from callback\n\t\tif !strings.HasPrefix(link, \"/browse\") || strings.Index(link, \"=signup\") > -1 || strings.Index(link, \"=login\") > -1 {\n\t\t\treturn\n\t\t}\n\t\t// start scaping the page under the link found\n\t\te.Request.Visit(link)\n\t})\n\n```\n上面是 HTML的回调函数，解析页面，获取了`url`,使用 `e.Request.Visit(link)`, 其实就是 `e.Request.collector.Visit(link)`\n我解释一下\n```go\nfunc (c *Collector) fetch(u, method string, depth int, requestData io.Reader, ctx *Context, hdr http.Header, req *http.Request) error {\n\tdefer c.wg.Done()\n\tif ctx == nil {\n\t\tctx = NewContext()\n\t}\n\trequest := &Request{\n\t\tURL:       req.URL,\n\t\tHeaders:   &req.Header,\n\t\tCtx:       ctx,\n\t\tDepth:     depth,\n\t\tMethod:    method,\n\t\tBody:      requestData,\n\t\tcollector: c, // 这个上面有介绍\n\t\tID:        atomic.AddUint32(&c.requestCount, 1),\n\t}\n    ....\n    }}\n\n\n// Visit continues Collector's collecting job by creating a\n// request and preserves the Context of the previous request.\n// Visit also calls the previously provided callbacks\nfunc (r *Request) Visit(URL string) error {\n\treturn r.collector.scrape(r.AbsoluteURL(URL), \"GET\", r.Depth+1, nil, r.Ctx, nil, true)\n}\n```\n这种方法在实际开发中经常会用到。\n\n\n2. 子页面的处理逻辑\n   colly中主要是以`Collector`为中心， 然后各种回调函数进行处理，子页面需要不同的回调函数，所以就需要新的 `Collector`\n\n```go\n\t// Instantiate default collector\n\tc := colly.NewCollector(\n\t\t// Visit only domains: coursera.org, www.coursera.org\n\t\tcolly.AllowedDomains(\"coursera.org\", \"www.coursera.org\"),\n\n\t\t// Cache responses to prevent multiple download of pages\n\t\t// even if the collector is restarted\n\t\tcolly.CacheDir(\"./coursera_cache\"),\n\t)\n\n\t// Create another collector to scrape course details\n\tdetailCollector := c.Clone()\n\n\t// Before making a request print \"Visiting ...\"\n\tc.OnRequest(func(r *colly.Request) {\n\t\tlog.Println(\"visiting\", r.URL.String())\n\t})\n\n\t// On every a HTML element which has name attribute call callback\n\tc.OnHTML(`a[name]`, func(e *colly.HTMLElement) {\n\t\t// Activate detailCollector if the link contains \"coursera.org/learn\"\n\t\tcourseURL := e.Request.AbsoluteURL(e.Attr(\"href\"))\n\t\tif strings.Index(courseURL, \"coursera.org/learn\") != -1 {\n           // 子页面或其他页面\n\t\t\tdetailCollector.Visit(courseURL)\n\t\t}\n\t})\n```\n\n\n### 持久化\n`Collector`对象有一个属性 `store             storage.Storage`是存储的，这个是将数据直接存储下来，没有清洗。\n比如， 我需要将数据持久化到数据库中，其实很简单， 在回调函数中处理。\n\n给个例子\n```go\n\tc.OnHTML(\"#currencies-all tbody tr\", func(e *colly.HTMLElement) {\n\t\tmysql.WriteObjectStrings([]string{\n\t\t\te.ChildText(\".currency-name-container\"),\n\t\t\te.ChildText(\".col-symbol\"),\n\t\t\te.ChildAttr(\"a.price\", \"data-usd\"),\n\t\t\te.ChildAttr(\"a.volume\", \"data-usd\"),\n\t\t\te.ChildAttr(\".market-cap\", \"data-usd\"),\n\t\t\te.ChildAttr(\".percent-change[data-timespan=\\\"1h\\\"]\", \"data-percentusd\"),\n\t\t\te.ChildAttr(\".percent-change[data-timespan=\\\"24h\\\"]\", \"data-percentusd\"),\n\t\t\te.ChildAttr(\".percent-change[data-timespan=\\\"7d\\\"]\", \"data-percentusd\"),\n\t\t})\n\t})\n```\n\n\n### 总结\n好了，介绍完了，我没有介绍如何使用，我自己也没有写任何的代码， 我只想分享给你这种软件架构的特点以及设计模式， 希望你可以借鉴应用到工作中，一般写框架都是采用这种思维。  \n下面这张图很形象，爬虫框架就这些东西。\n![通用爬虫框架架构](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/BqC7ix.jpg)","slug":"colly","published":1,"updated":"2021-08-01T14:09:58.381Z","_id":"ckrta5awx00000duq1xumgoao","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/6hvTNM.jpg\"></p>\n<p>无意中发现了<code>colly</code>,我一直是使用python进行爬虫的， 学习golang的使用， 用<code>go</code>参考<code>scrapy</code>架构写了一个爬虫的框架demo。我一直以为go不适合做爬虫， go的领域是后端服务。然后去搜索了一下<code>colly</code>, 发现还是很流行。 我个人还是比较喜欢爬虫， 网络上的数据就是公开的API， 所以， 爬虫去请求接口获取数据。当然我是遵循君子协议的。</p>\n<p>好， 下面进入正题，介绍<code>colly</code></p>\n<h3 id=\"colly介绍\"><a href=\"#colly介绍\" class=\"headerlink\" title=\"colly介绍\"></a>colly介绍</h3><p><code>Lightning Fast and Elegant Scraping Framework for Gophers</code></p>\n<p><code>Colly provides a clean interface to write any kind of crawler/scraper/spider.</code><br>官方的介绍，gocolly快速优雅，在单核上每秒可以发起1K以上请求；以回调函数的形式提供了一组接口，可以实现任意类型的爬虫；依赖goquery库可以像jquery一样选择web元素。</p>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><p><a href=\"https://github.com/gocolly/colly\">colly</a><br><a href=\"http://go-colly.org/\">官网</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">go get -u github.com/gocolly/colly/...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/gocolly/colly\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"架构特点\"><a href=\"#架构特点\" class=\"headerlink\" title=\"架构特点\"></a>架构特点</h3><p>了解爬虫的都知道一个爬虫请求的生命周期</p>\n<blockquote>\n<ol>\n<li>构建请求</li>\n<li>发送请求</li>\n<li>获取文档或数据</li>\n<li>解析文档或清洗数据</li>\n<li>数据处理或持久化</li>\n</ol>\n</blockquote>\n<p>scrapy的设计理念是将上面的每一个步骤抽离出来，然后做出组件的形式， 最后通过调度组成流水线的工作形式。<br>我们看一下scrapy的架构图， 这里只是简单的介绍下， 后面有时间，我深入介绍scrapy<br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/0kfy9f.jpg\" alt=\"0kfy9f\"></p>\n<p>如图，<code>downloader</code>负责请求获取页面，<code>spiders</code>中写具体解析文档的逻辑，<code>item PipeLine</code>数据最后处理， 中间有一些中间件，可以一些功能的装饰。比如，代理，请求频率等。</p>\n<p>我们介绍一下colly的架构特点<br>colly的逻辑更像是面向过程编程的， colly的逻辑就是按上面生命周期的顺序管道处理， 只是在不同阶段，加上回调函数进行过滤的时候进行处理。<br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/IS4YSc.jpg\"></p>\n<p>下面也按照这个逻辑进行介绍</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>先给一个🌰</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\n\t<span class=\"token string\">\"github.com/gocolly/colly\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Instantiate default collector</span>\n\tc <span class=\"token operator\">:=</span> colly<span class=\"token punctuation\">.</span><span class=\"token function\">NewCollector</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token comment\">// Visit only domains: hackerspaces.org, wiki.hackerspaces.org</span>\n\t\tcolly<span class=\"token punctuation\">.</span><span class=\"token function\">AllowedDomains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hackerspaces.org\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wiki.hackerspaces.org\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// On every a element which has href attribute call callback</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[href]\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tlink <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// Print link</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Link found: %q -&gt; %s\\n\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// Visit link found on page</span>\n\t\t<span class=\"token comment\">// Only those links are visited which are in AllowedDomains</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteURL</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Before making a request print \"Visiting ...\"</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">OnRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Visiting\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Start scraping on https://hackerspaces.org</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://hackerspaces.org/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是官方给的示例， 可以看到<code>colly.NewCollector</code>创建一个<code>收集器</code>， colly的所有处理逻辑都是以<code>Collector</code>为核心进行操作的。</p>\n<p>我们看一下 <code>Collector</code>结构体的定义</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Collector provides the scraper instance for a scraping job</span>\n<span class=\"token keyword\">type</span> Collector <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// UserAgent is the User-Agent string used by HTTP requests</span>\n\tUserAgent <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// MaxDepth limits the recursion depth of visited URLs.</span>\n\t<span class=\"token comment\">// Set it to 0 for infinite recursion (default).</span>\n\tMaxDepth <span class=\"token builtin\">int</span>\n\t<span class=\"token comment\">// AllowedDomains is a domain whitelist.</span>\n\t<span class=\"token comment\">// Leave it blank to allow any domains to be visited</span>\n\tAllowedDomains <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// DisallowedDomains is a domain blacklist.</span>\n\tDisallowedDomains <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// DisallowedURLFilters is a list of regular expressions which restricts</span>\n\t<span class=\"token comment\">// visiting URLs. If any of the rules matches to a URL the</span>\n\t<span class=\"token comment\">// request will be stopped. DisallowedURLFilters will</span>\n\t<span class=\"token comment\">// be evaluated before URLFilters</span>\n\t<span class=\"token comment\">// Leave it blank to allow any URLs to be visited</span>\n\tDisallowedURLFilters <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>regexp<span class=\"token punctuation\">.</span>Regexp\n\t<span class=\"token comment\">// URLFilters is a list of regular expressions which restricts</span>\n\t<span class=\"token comment\">// visiting URLs. If any of the rules matches to a URL the</span>\n\t<span class=\"token comment\">// request won't be stopped. DisallowedURLFilters will</span>\n\t<span class=\"token comment\">// be evaluated before URLFilters</span>\n\n\t<span class=\"token comment\">// Leave it blank to allow any URLs to be visited</span>\n\tURLFilters <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>regexp<span class=\"token punctuation\">.</span>Regexp\n\n\t<span class=\"token comment\">// AllowURLRevisit allows multiple downloads of the same URL</span>\n\tAllowURLRevisit <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// MaxBodySize is the limit of the retrieved response body in bytes.</span>\n\t<span class=\"token comment\">// 0 means unlimited.</span>\n\t<span class=\"token comment\">// The default value for MaxBodySize is 10MB (10 * 1024 * 1024 bytes).</span>\n\tMaxBodySize <span class=\"token builtin\">int</span>\n\t<span class=\"token comment\">// CacheDir specifies a location where GET requests are cached as files.</span>\n\t<span class=\"token comment\">// When it's not defined, caching is disabled.</span>\n\tCacheDir <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// IgnoreRobotsTxt allows the Collector to ignore any restrictions set by</span>\n\t<span class=\"token comment\">// the target host's robots.txt file.  See http://www.robotstxt.org/ for more</span>\n\t<span class=\"token comment\">// information.</span>\n\tIgnoreRobotsTxt <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// Async turns on asynchronous network communication. Use Collector.Wait() to</span>\n\t<span class=\"token comment\">// be sure all requests have been finished.</span>\n\tAsync <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// ParseHTTPErrorResponse allows parsing HTTP responses with non 2xx status codes.</span>\n\t<span class=\"token comment\">// By default, Colly parses only successful HTTP responses. Set ParseHTTPErrorResponse</span>\n\t<span class=\"token comment\">// to true to enable it.</span>\n\tParseHTTPErrorResponse <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// ID is the unique identifier of a collector</span>\n\tID <span class=\"token builtin\">uint32</span>\n\t<span class=\"token comment\">// DetectCharset can enable character encoding detection for non-utf8 response bodies</span>\n\t<span class=\"token comment\">// without explicit charset declaration. This feature uses https://github.com/saintfish/chardet</span>\n\tDetectCharset <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// RedirectHandler allows control on how a redirect will be managed</span>\n\tRedirectHandler <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>req <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> via <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\t<span class=\"token comment\">// CheckHead performs a HEAD request before every GET to pre-validate the response</span>\n\tCheckHead         <span class=\"token builtin\">bool</span>\n\tstore             storage<span class=\"token punctuation\">.</span>Storage\n\tdebugger          debug<span class=\"token punctuation\">.</span>Debugger\n\trobotsMap         <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>robotstxt<span class=\"token punctuation\">.</span>RobotsData\n\thtmlCallbacks     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>htmlCallbackContainer\n\txmlCallbacks      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>xmlCallbackContainer\n\trequestCallbacks  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>RequestCallback\n\tresponseCallbacks <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ResponseCallback\n\terrorCallbacks    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ErrorCallback\n\tscrapedCallbacks  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ScrapedCallback\n\trequestCount      <span class=\"token builtin\">uint32</span>\n\tresponseCount     <span class=\"token builtin\">uint32</span>\n\tbackend           <span class=\"token operator\">*</span>httpBackend\n\twg                <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup\n\tlock              <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>RWMutex\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的具体属性我就不介绍了， 看看注释也就懂了。<br>我就先按上面的示例解释源码</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">   // 创建一个 Collector对象\nc :<span class=\"token operator\">=</span> colly.NewCollector<span class=\"token punctuation\">(</span>\n\t// Visit only domains: hackerspaces.org, wiki.hackerspaces.org\n\tcolly.AllowedDomains<span class=\"token punctuation\">(</span><span class=\"token string\">\"hackerspaces.org\"</span>, <span class=\"token string\">\"wiki.hackerspaces.org\"</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">)</span>\n\n// 添加一个HTML的回调函数\nc.OnHTML<span class=\"token punctuation\">(</span><span class=\"token string\">\"a[href]\"</span>, func<span class=\"token punctuation\">(</span>e *colly.HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">link</span> :<span class=\"token operator\">=</span> e.Attr<span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n\t// Print <span class=\"token function\">link</span>\n\tfmt.Printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Link found: %q -&gt; %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, e.Text, <span class=\"token function\">link</span><span class=\"token punctuation\">)</span>\n\t// Visit <span class=\"token function\">link</span> found on page\n\t// Only those links are visited <span class=\"token function\">which</span> are <span class=\"token keyword\">in</span> AllowedDomains\n\tc.Visit<span class=\"token punctuation\">(</span>e.Request.AbsoluteURL<span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">))</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n// 添加一个 Requset回调函数\nc.OnRequest<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">(</span>r *colly.Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt.Println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Visiting\"</span>, r.URL.String<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n// 开始爬取\nc.Visit<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://hackerspaces.org/\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>回调函数如何用？ 什么作用？ 先卖个关子， <code>c.Visit(\"https://hackerspaces.org/\")</code>是入口， 那就先分析它，</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Visit starts Collector's collecting job by creating a</span>\n<span class=\"token comment\">// request to the URL specified in parameter.</span>\n<span class=\"token comment\">// Visit also calls the previously provided callbacks</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>URL <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>CheckHead <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> check <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">scrape</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"HEAD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> check <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> check\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">scrape</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>👆又出来一个新的method，</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">scrape</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> depth <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> requestData io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">,</span> ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">,</span> hdr http<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">,</span> checkRevisit <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 检查请求是否合法</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">requestCheck</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">,</span> checkRevisit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 解析url，</span>\n\tparsedURL<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> parsedURL<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\tparsedURL<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">=</span> <span class=\"token string\">\"http\"</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">isDomainAllowed</span><span class=\"token punctuation\">(</span>parsedURL<span class=\"token punctuation\">.</span><span class=\"token function\">Hostname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> ErrForbiddenDomain\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// robots协议</span>\n\t<span class=\"token keyword\">if</span> method <span class=\"token operator\">!=</span> <span class=\"token string\">\"HEAD\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>c<span class=\"token punctuation\">.</span>IgnoreRobotsTxt <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">checkRobots</span><span class=\"token punctuation\">(</span>parsedURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// headers</span>\n\t<span class=\"token keyword\">if</span> hdr <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\thdr <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">{</span><span class=\"token string\">\"User-Agent\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>c<span class=\"token punctuation\">.</span>UserAgent<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\trc<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> requestData<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>ReadCloser<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token operator\">&amp;&amp;</span> requestData <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\trc <span class=\"token operator\">=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">NopCloser</span><span class=\"token punctuation\">(</span>requestData<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// The Go HTTP API ignores \"Host\" in the headers, preferring the client</span>\n\t<span class=\"token comment\">// to use the Host field on Request.</span>\n\thost <span class=\"token operator\">:=</span> parsedURL<span class=\"token punctuation\">.</span>Host\n\t<span class=\"token keyword\">if</span> hostHeader <span class=\"token operator\">:=</span> hdr<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> hostHeader <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\thost <span class=\"token operator\">=</span> hostHeader\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 构造http.Request</span>\n\treq <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">{</span>\n\t\tMethod<span class=\"token punctuation\">:</span>     method<span class=\"token punctuation\">,</span>\n\t\tURL<span class=\"token punctuation\">:</span>        parsedURL<span class=\"token punctuation\">,</span>\n\t\tProto<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"HTTP/1.1\"</span><span class=\"token punctuation\">,</span>\n\t\tProtoMajor<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\tProtoMinor<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\tHeader<span class=\"token punctuation\">:</span>     hdr<span class=\"token punctuation\">,</span>\n\t\tBody<span class=\"token punctuation\">:</span>       rc<span class=\"token punctuation\">,</span>\n\t\tHost<span class=\"token punctuation\">:</span>       host<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 请求的数据（requestData）转换成io.ReadCloser接口数据</span>\n\t<span class=\"token function\">setRequestBody</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> requestData<span class=\"token punctuation\">)</span>\n\tu <span class=\"token operator\">=</span> parsedURL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 异步方式</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>Async <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">go</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">,</span> requestData<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> hdr<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">,</span> requestData<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> hdr<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面很大篇幅都是检查， 现在还在 <code>request</code>的阶段， 还没有response，看<code>c.fetch</code></p>\n<p>fetch就是colly的核心内容</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> depth <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> requestData io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">,</span> ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">,</span> hdr http<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> ctx <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tctx <span class=\"token operator\">=</span> <span class=\"token function\">NewContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\trequest <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Request<span class=\"token punctuation\">{</span>\n\t\tURL<span class=\"token punctuation\">:</span>       req<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">,</span>\n\t\tHeaders<span class=\"token punctuation\">:</span>   <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">,</span>\n\t\tCtx<span class=\"token punctuation\">:</span>       ctx<span class=\"token punctuation\">,</span>\n\t\tDepth<span class=\"token punctuation\">:</span>     depth<span class=\"token punctuation\">,</span>\n\t\tMethod<span class=\"token punctuation\">:</span>    method<span class=\"token punctuation\">,</span>\n\t\tBody<span class=\"token punctuation\">:</span>      requestData<span class=\"token punctuation\">,</span>\n\t\tcollector<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 这里将Collector放到request中，这个可以对请求继续处理</span>\n\t\tID<span class=\"token punctuation\">:</span>        atomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>requestCount<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 回调函数处理 request</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>abort <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> method <span class=\"token operator\">==</span> <span class=\"token string\">\"POST\"</span> <span class=\"token operator\">&amp;&amp;</span> req<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\treq<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> req<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\treq<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*/*\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\torigURL <span class=\"token operator\">:=</span> req<span class=\"token punctuation\">.</span>URL\n    <span class=\"token comment\">// 这里是 去请求网络， 是调用了 `http.Client.Do`方法请求的</span>\n\tresponse<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>backend<span class=\"token punctuation\">.</span><span class=\"token function\">Cache</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>MaxBodySize<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>CacheDir<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> proxyURL<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>ProxyURLKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\trequest<span class=\"token punctuation\">.</span>ProxyURL <span class=\"token operator\">=</span> proxyURL\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 回调函数，处理error</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnError</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> req<span class=\"token punctuation\">.</span>URL <span class=\"token operator\">!=</span> origURL <span class=\"token punctuation\">{</span>\n\t\trequest<span class=\"token punctuation\">.</span>URL <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>URL\n\t\trequest<span class=\"token punctuation\">.</span>Headers <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">.</span>Header\n\t<span class=\"token punctuation\">}</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>responseCount<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tresponse<span class=\"token punctuation\">.</span>Ctx <span class=\"token operator\">=</span> ctx\n\tresponse<span class=\"token punctuation\">.</span>Request <span class=\"token operator\">=</span> request\n\n\terr <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">fixCharset</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>DetectCharset<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>ResponseCharacterEncoding<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 回调函数 处理Response</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 回调函数 HTML</span>\n\terr <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnHTML</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnError</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 回调函数XML</span>\n\terr <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnXML</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnError</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 回调函数 Scraped</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnScraped</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">}</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看到了， 这就是一个完整的流程。 好， 我们看一下回调函数做了什么？</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnRequest</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>requestCallbacks <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>核心就 <code>for _, f := range c.requestCallbacks { f(r) }</code>这句，下面我每个回调函数都介绍一下</p>\n<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>这里介绍按生命周期的顺序来介绍</p>\n<h4 id=\"1-OnRequest\"><a href=\"#1-OnRequest\" class=\"headerlink\" title=\"1. OnRequest\"></a>1. OnRequest</h4> <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnRequest registers a function. Function will be executed on every</span>\n<span class=\"token comment\">// request made by the Collector</span>\n<span class=\"token comment\">// 这里是注册回调函数到 requestCallbacks</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnRequest</span><span class=\"token punctuation\">(</span>f RequestCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>requestCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span>requestCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>RequestCallback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tc<span class=\"token punctuation\">.</span>requestCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>requestCallbacks<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// 在fetch中调用最早调用的</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnRequest</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>requestCallbacks <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"2-OnResponse-amp-handleOnResponse\"><a href=\"#2-OnResponse-amp-handleOnResponse\" class=\"headerlink\" title=\"2. OnResponse &amp; handleOnResponse\"></a>2. OnResponse &amp; handleOnResponse</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnResponse registers a function. Function will be executed on every response</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnResponse</span><span class=\"token punctuation\">(</span>f ResponseCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>responseCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span>responseCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ResponseCallback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tc<span class=\"token punctuation\">.</span>responseCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>responseCallbacks<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnResponse</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span>    r<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">StatusText</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>responseCallbacks <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"3-OnHTML-amp-handleOnHTML\"><a href=\"#3-OnHTML-amp-handleOnHTML\" class=\"headerlink\" title=\"3. OnHTML &amp; handleOnHTML\"></a>3. OnHTML &amp; handleOnHTML</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnHTML registers a function. Function will be executed on every HTML</span>\n<span class=\"token comment\">// element matched by the GoQuery Selector parameter.</span>\n<span class=\"token comment\">// GoQuery Selector is a selector used by https://github.com/PuerkitoBio/goquery</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span>goquerySelector <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> f HTMLCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>htmlCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span>htmlCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>htmlCallbackContainer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tc<span class=\"token punctuation\">.</span>htmlCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>htmlCallbacks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>htmlCallbackContainer<span class=\"token punctuation\">{</span>\n\t\tSelector<span class=\"token punctuation\">:</span> goquerySelector<span class=\"token punctuation\">,</span>\n\t\tFunction<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 这个解析html的逻辑比较多一些</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnHTML</span><span class=\"token punctuation\">(</span>resp <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>htmlCallbacks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\tdoc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> goquery<span class=\"token punctuation\">.</span><span class=\"token function\">NewDocumentFromReader</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewBuffer</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> href<span class=\"token punctuation\">,</span> found <span class=\"token operator\">:=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base[href]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> found <span class=\"token punctuation\">{</span>\n\t\tresp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>baseURL<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>href<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> cc <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>htmlCallbacks <span class=\"token punctuation\">{</span>\n\t\ti <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t\tdoc<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">.</span>Selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">*</span>goquery<span class=\"token punctuation\">.</span>Selection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s<span class=\"token punctuation\">.</span>Nodes <span class=\"token punctuation\">{</span>\n\t\t\t\te <span class=\"token operator\">:=</span> <span class=\"token function\">NewHTMLElementFromSelectionNode</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t\t\t\ti<span class=\"token operator\">++</span>\n\t\t\t\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> cc<span class=\"token punctuation\">.</span>Selector<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span>      resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tcc<span class=\"token punctuation\">.</span><span class=\"token function\">Function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-OnXML-amp-handleOnXML\"><a href=\"#4-OnXML-amp-handleOnXML\" class=\"headerlink\" title=\"4. OnXML &amp; handleOnXML\"></a>4. OnXML &amp; handleOnXML</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnXML registers a function. Function will be executed on every XML</span>\n<span class=\"token comment\">// element matched by the xpath Query parameter.</span>\n<span class=\"token comment\">// xpath Query is used by https://github.com/antchfx/xmlquery</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnXML</span><span class=\"token punctuation\">(</span>xpathQuery <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> f XMLCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>xmlCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span>xmlCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>xmlCallbackContainer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tc<span class=\"token punctuation\">.</span>xmlCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>xmlCallbacks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>xmlCallbackContainer<span class=\"token punctuation\">{</span>\n\t\tQuery<span class=\"token punctuation\">:</span>    xpathQuery<span class=\"token punctuation\">,</span>\n\t\tFunction<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnXML</span><span class=\"token punctuation\">(</span>resp <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>xmlCallbacks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\tcontentType <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tisXMLFile <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasSuffix</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".xml\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasSuffix</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".xml.gz\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">,</span> <span class=\"token string\">\"xml\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isXMLFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tdoc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> htmlquery<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewBuffer</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> e <span class=\"token operator\">:=</span> htmlquery<span class=\"token punctuation\">.</span><span class=\"token function\">FindOne</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">,</span> <span class=\"token string\">\"//base\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> e<span class=\"token punctuation\">.</span>Attr <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">==</span> <span class=\"token string\">\"href\"</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tresp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>baseURL<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>Val<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> cc <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>xmlCallbacks <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> htmlquery<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">,</span> cc<span class=\"token punctuation\">.</span>Query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\te <span class=\"token operator\">:=</span> <span class=\"token function\">NewXMLElementFromHTMLNode</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xml\"</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> cc<span class=\"token punctuation\">.</span>Query<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span>      resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tcc<span class=\"token punctuation\">.</span><span class=\"token function\">Function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">,</span> <span class=\"token string\">\"xml\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> isXMLFile <span class=\"token punctuation\">{</span>\n\t\tdoc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> xmlquery<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewBuffer</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> cc <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>xmlCallbacks <span class=\"token punctuation\">{</span>\n\t\t\txmlquery<span class=\"token punctuation\">.</span><span class=\"token function\">FindEach</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">,</span> cc<span class=\"token punctuation\">.</span>Query<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">*</span>xmlquery<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\te <span class=\"token operator\">:=</span> <span class=\"token function\">NewXMLElementFromXMLNode</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xml\"</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> cc<span class=\"token punctuation\">.</span>Query<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span>      resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tcc<span class=\"token punctuation\">.</span><span class=\"token function\">Function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"5-OnError-amp-handleOnError\"><a href=\"#5-OnError-amp-handleOnError\" class=\"headerlink\" title=\"5. OnError &amp; handleOnError\"></a>5. OnError &amp; handleOnError</h4><p>这个会多次调用， 如果 <code>err != nil情况下调用比较多</code>， 爬虫异常的情况下，会调用</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnError registers a function. Function will be executed if an error</span>\n<span class=\"token comment\">// occurs during the HTTP request.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnError</span><span class=\"token punctuation\">(</span>f ErrorCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>errorCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span>errorCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ErrorCallback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tc<span class=\"token punctuation\">.</span>errorCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>errorCallbacks<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnError</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> request <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">,</span> ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>ParseHTTPErrorResponse <span class=\"token operator\">||</span> response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">&lt;</span> <span class=\"token number\">203</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">&gt;=</span> <span class=\"token number\">203</span> <span class=\"token punctuation\">{</span>\n\t\terr <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">StatusText</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> response <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tresponse <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Response<span class=\"token punctuation\">{</span>\n\t\t\tRequest<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">,</span>\n\t\t\tCtx<span class=\"token punctuation\">:</span>     ctx<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span>    request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">StatusText</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>Request <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tresponse<span class=\"token punctuation\">.</span>Request <span class=\"token operator\">=</span> request\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>Ctx <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tresponse<span class=\"token punctuation\">.</span>Ctx <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>Ctx\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>errorCallbacks <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6-OnScraped-amp-handleOnScraped\"><a href=\"#6-OnScraped-amp-handleOnScraped\" class=\"headerlink\" title=\"6. OnScraped &amp; handleOnScraped\"></a>6. OnScraped &amp; handleOnScraped</h4><p>最后一步的回调函数处理</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnScraped registers a function. Function will be executed after</span>\n<span class=\"token comment\">// OnHTML, as a final part of the scraping.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnScraped</span><span class=\"token punctuation\">(</span>f ScrapedCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>scrapedCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span>scrapedCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ScrapedCallback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tc<span class=\"token punctuation\">.</span>scrapedCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>scrapedCallbacks<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnScraped</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scraped\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>scrapedCallbacks <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注册回调函数的method还有几个没有列出来，感兴趣的，自己看一下，</p>\n<p>上面介绍完了， 再回头看🌰</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// On every a element which has href attribute call callback</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[href]\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tlink <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Print link</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Link found: %q -&gt; %s\\n\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Visit link found on page</span>\n\t<span class=\"token comment\">// Only those links are visited which are in AllowedDomains</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteURL</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Before making a request print \"Visiting ...\"</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">OnRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Visiting\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>一般文档解析放在html, xml 中</p>\n<h3 id=\"页面跳转爬取\"><a href=\"#页面跳转爬取\" class=\"headerlink\" title=\"页面跳转爬取\"></a>页面跳转爬取</h3><p>一般处理就2种，一种是相同逻辑的页面，比如<code>下一页</code>，另一种，就是不同逻辑的，比如<code>子页面</code></p>\n<ol>\n<li>在<code>html</code>,<code>xml</code>，解析出来以后，构建新的请求，我们看一下，相同页面<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// On every a element which has href attribute call callback</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[href]\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// If attribute class is this long string return from callback</span>\n\t<span class=\"token comment\">// As this a is irrelevant</span>\n\t<span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Button_1qxkboh-o_O-primary_cv02ee-o_O-md_28awn8-o_O-primaryLink_109aggg\"</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\tlink <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// If link start with browse or includes either signup or login return from callback</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/browse\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> <span class=\"token string\">\"=signup\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> <span class=\"token string\">\"=login\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// start scaping the page under the link found</span>\n\te<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n上面是 HTML的回调函数，解析页面，获取了<code>url</code>,使用 <code>e.Request.Visit(link)</code>, 其实就是 <code>e.Request.collector.Visit(link)</code><br>我解释一下<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> depth <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> requestData io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">,</span> ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">,</span> hdr http<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> ctx <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tctx <span class=\"token operator\">=</span> <span class=\"token function\">NewContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\trequest <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Request<span class=\"token punctuation\">{</span>\n\t\tURL<span class=\"token punctuation\">:</span>       req<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">,</span>\n\t\tHeaders<span class=\"token punctuation\">:</span>   <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">,</span>\n\t\tCtx<span class=\"token punctuation\">:</span>       ctx<span class=\"token punctuation\">,</span>\n\t\tDepth<span class=\"token punctuation\">:</span>     depth<span class=\"token punctuation\">,</span>\n\t\tMethod<span class=\"token punctuation\">:</span>    method<span class=\"token punctuation\">,</span>\n\t\tBody<span class=\"token punctuation\">:</span>      requestData<span class=\"token punctuation\">,</span>\n\t\tcollector<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 这个上面有介绍</span>\n\t\tID<span class=\"token punctuation\">:</span>        atomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>requestCount<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// Visit continues Collector's collecting job by creating a</span>\n<span class=\"token comment\">// request and preserves the Context of the previous request.</span>\n<span class=\"token comment\">// Visit also calls the previously provided callbacks</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>URL <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span>collector<span class=\"token punctuation\">.</span><span class=\"token function\">scrape</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteURL</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Depth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Ctx<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n这种方法在实际开发中经常会用到。</li>\n</ol>\n<ol start=\"2\">\n<li>子页面的处理逻辑<br>colly中主要是以<code>Collector</code>为中心， 然后各种回调函数进行处理，子页面需要不同的回调函数，所以就需要新的 <code>Collector</code></li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Instantiate default collector</span>\nc <span class=\"token operator\">:=</span> colly<span class=\"token punctuation\">.</span><span class=\"token function\">NewCollector</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">// Visit only domains: coursera.org, www.coursera.org</span>\n\tcolly<span class=\"token punctuation\">.</span><span class=\"token function\">AllowedDomains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coursera.org\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"www.coursera.org\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\">// Cache responses to prevent multiple download of pages</span>\n\t<span class=\"token comment\">// even if the collector is restarted</span>\n\tcolly<span class=\"token punctuation\">.</span><span class=\"token function\">CacheDir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./coursera_cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Create another collector to scrape course details</span>\ndetailCollector <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Before making a request print \"Visiting ...\"</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">OnRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"visiting\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// On every a HTML element which has name attribute call callback</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">`a[name]`</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Activate detailCollector if the link contains \"coursera.org/learn\"</span>\n\tcourseURL <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteURL</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>courseURL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"coursera.org/learn\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 子页面或其他页面</span>\n\t\tdetailCollector<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>courseURL<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h3><p><code>Collector</code>对象有一个属性 <code>store             storage.Storage</code>是存储的，这个是将数据直接存储下来，没有清洗。<br>比如， 我需要将数据持久化到数据库中，其实很简单， 在回调函数中处理。</p>\n<p>给个例子</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">c<span class=\"token punctuation\">.</span><span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#currencies-all tbody tr\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmysql<span class=\"token punctuation\">.</span><span class=\"token function\">WriteObjectStrings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".currency-name-container\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".col-symbol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.price\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-usd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.volume\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-usd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".market-cap\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-usd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".percent-change[data-timespan=\\\"1h\\\"]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-percentusd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".percent-change[data-timespan=\\\"24h\\\"]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-percentusd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".percent-change[data-timespan=\\\"7d\\\"]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-percentusd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>好了，介绍完了，我没有介绍如何使用，我自己也没有写任何的代码， 我只想分享给你这种软件架构的特点以及设计模式， 希望你可以借鉴应用到工作中，一般写框架都是采用这种思维。<br>下面这张图很形象，爬虫框架就这些东西。<br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/BqC7ix.jpg\" alt=\"通用爬虫框架架构\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/6hvTNM.jpg\"></p>\n<p>无意中发现了<code>colly</code>,我一直是使用python进行爬虫的， 学习golang的使用， 用<code>go</code>参考<code>scrapy</code>架构写了一个爬虫的框架demo。我一直以为go不适合做爬虫， go的领域是后端服务。然后去搜索了一下<code>colly</code>, 发现还是很流行。 我个人还是比较喜欢爬虫， 网络上的数据就是公开的API， 所以， 爬虫去请求接口获取数据。当然我是遵循君子协议的。</p>\n<p>好， 下面进入正题，介绍<code>colly</code></p>\n<h3 id=\"colly介绍\"><a href=\"#colly介绍\" class=\"headerlink\" title=\"colly介绍\"></a>colly介绍</h3><p><code>Lightning Fast and Elegant Scraping Framework for Gophers</code></p>\n<p><code>Colly provides a clean interface to write any kind of crawler/scraper/spider.</code><br>官方的介绍，gocolly快速优雅，在单核上每秒可以发起1K以上请求；以回调函数的形式提供了一组接口，可以实现任意类型的爬虫；依赖goquery库可以像jquery一样选择web元素。</p>\n<h3 id=\"安装使用\"><a href=\"#安装使用\" class=\"headerlink\" title=\"安装使用\"></a>安装使用</h3><p><a href=\"https://github.com/gocolly/colly\">colly</a><br><a href=\"http://go-colly.org/\">官网</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">go get -u github.com&#x2F;gocolly&#x2F;colly&#x2F;...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/gocolly/colly\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"架构特点\"><a href=\"#架构特点\" class=\"headerlink\" title=\"架构特点\"></a>架构特点</h3><p>了解爬虫的都知道一个爬虫请求的生命周期</p>\n<blockquote>\n<ol>\n<li>构建请求</li>\n<li>发送请求</li>\n<li>获取文档或数据</li>\n<li>解析文档或清洗数据</li>\n<li>数据处理或持久化</li>\n</ol>\n</blockquote>\n<p>scrapy的设计理念是将上面的每一个步骤抽离出来，然后做出组件的形式， 最后通过调度组成流水线的工作形式。<br>我们看一下scrapy的架构图， 这里只是简单的介绍下， 后面有时间，我深入介绍scrapy<br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/0kfy9f.jpg\" alt=\"0kfy9f\"></p>\n<p>如图，<code>downloader</code>负责请求获取页面，<code>spiders</code>中写具体解析文档的逻辑，<code>item PipeLine</code>数据最后处理， 中间有一些中间件，可以一些功能的装饰。比如，代理，请求频率等。</p>\n<p>我们介绍一下colly的架构特点<br>colly的逻辑更像是面向过程编程的， colly的逻辑就是按上面生命周期的顺序管道处理， 只是在不同阶段，加上回调函数进行过滤的时候进行处理。<br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/IS4YSc.jpg\"></p>\n<p>下面也按照这个逻辑进行介绍</p>\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><p>先给一个🌰</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\n\t<span class=\"token string\">\"github.com/gocolly/colly\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Instantiate default collector</span>\n\tc <span class=\"token operator\">:=</span> colly<span class=\"token punctuation\">.</span><span class=\"token function\">NewCollector</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token comment\">// Visit only domains: hackerspaces.org, wiki.hackerspaces.org</span>\n\t\tcolly<span class=\"token punctuation\">.</span><span class=\"token function\">AllowedDomains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hackerspaces.org\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wiki.hackerspaces.org\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// On every a element which has href attribute call callback</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[href]\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlink <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// Print link</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Link found: %q -> %s\\n\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// Visit link found on page</span>\n\t\t<span class=\"token comment\">// Only those links are visited which are in AllowedDomains</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteURL</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Before making a request print \"Visiting ...\"</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">OnRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Visiting\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Start scraping on https://hackerspaces.org</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://hackerspaces.org/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是官方给的示例， 可以看到<code>colly.NewCollector</code>创建一个<code>收集器</code>， colly的所有处理逻辑都是以<code>Collector</code>为核心进行操作的。</p>\n<p>我们看一下 <code>Collector</code>结构体的定义</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Collector provides the scraper instance for a scraping job</span>\n<span class=\"token keyword\">type</span> Collector <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// UserAgent is the User-Agent string used by HTTP requests</span>\n\tUserAgent <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// MaxDepth limits the recursion depth of visited URLs.</span>\n\t<span class=\"token comment\">// Set it to 0 for infinite recursion (default).</span>\n\tMaxDepth <span class=\"token builtin\">int</span>\n\t<span class=\"token comment\">// AllowedDomains is a domain whitelist.</span>\n\t<span class=\"token comment\">// Leave it blank to allow any domains to be visited</span>\n\tAllowedDomains <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// DisallowedDomains is a domain blacklist.</span>\n\tDisallowedDomains <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// DisallowedURLFilters is a list of regular expressions which restricts</span>\n\t<span class=\"token comment\">// visiting URLs. If any of the rules matches to a URL the</span>\n\t<span class=\"token comment\">// request will be stopped. DisallowedURLFilters will</span>\n\t<span class=\"token comment\">// be evaluated before URLFilters</span>\n\t<span class=\"token comment\">// Leave it blank to allow any URLs to be visited</span>\n\tDisallowedURLFilters <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>regexp<span class=\"token punctuation\">.</span>Regexp\n\t<span class=\"token comment\">// URLFilters is a list of regular expressions which restricts</span>\n\t<span class=\"token comment\">// visiting URLs. If any of the rules matches to a URL the</span>\n\t<span class=\"token comment\">// request won't be stopped. DisallowedURLFilters will</span>\n\t<span class=\"token comment\">// be evaluated before URLFilters</span>\n\n\t<span class=\"token comment\">// Leave it blank to allow any URLs to be visited</span>\n\tURLFilters <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>regexp<span class=\"token punctuation\">.</span>Regexp\n\n\t<span class=\"token comment\">// AllowURLRevisit allows multiple downloads of the same URL</span>\n\tAllowURLRevisit <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// MaxBodySize is the limit of the retrieved response body in bytes.</span>\n\t<span class=\"token comment\">// 0 means unlimited.</span>\n\t<span class=\"token comment\">// The default value for MaxBodySize is 10MB (10 * 1024 * 1024 bytes).</span>\n\tMaxBodySize <span class=\"token builtin\">int</span>\n\t<span class=\"token comment\">// CacheDir specifies a location where GET requests are cached as files.</span>\n\t<span class=\"token comment\">// When it's not defined, caching is disabled.</span>\n\tCacheDir <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// IgnoreRobotsTxt allows the Collector to ignore any restrictions set by</span>\n\t<span class=\"token comment\">// the target host's robots.txt file.  See http://www.robotstxt.org/ for more</span>\n\t<span class=\"token comment\">// information.</span>\n\tIgnoreRobotsTxt <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// Async turns on asynchronous network communication. Use Collector.Wait() to</span>\n\t<span class=\"token comment\">// be sure all requests have been finished.</span>\n\tAsync <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// ParseHTTPErrorResponse allows parsing HTTP responses with non 2xx status codes.</span>\n\t<span class=\"token comment\">// By default, Colly parses only successful HTTP responses. Set ParseHTTPErrorResponse</span>\n\t<span class=\"token comment\">// to true to enable it.</span>\n\tParseHTTPErrorResponse <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// ID is the unique identifier of a collector</span>\n\tID <span class=\"token builtin\">uint32</span>\n\t<span class=\"token comment\">// DetectCharset can enable character encoding detection for non-utf8 response bodies</span>\n\t<span class=\"token comment\">// without explicit charset declaration. This feature uses https://github.com/saintfish/chardet</span>\n\tDetectCharset <span class=\"token builtin\">bool</span>\n\t<span class=\"token comment\">// RedirectHandler allows control on how a redirect will be managed</span>\n\tRedirectHandler <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>req <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> via <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n\t<span class=\"token comment\">// CheckHead performs a HEAD request before every GET to pre-validate the response</span>\n\tCheckHead         <span class=\"token builtin\">bool</span>\n\tstore             storage<span class=\"token punctuation\">.</span>Storage\n\tdebugger          debug<span class=\"token punctuation\">.</span>Debugger\n\trobotsMap         <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>robotstxt<span class=\"token punctuation\">.</span>RobotsData\n\thtmlCallbacks     <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>htmlCallbackContainer\n\txmlCallbacks      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>xmlCallbackContainer\n\trequestCallbacks  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>RequestCallback\n\tresponseCallbacks <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ResponseCallback\n\terrorCallbacks    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ErrorCallback\n\tscrapedCallbacks  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ScrapedCallback\n\trequestCount      <span class=\"token builtin\">uint32</span>\n\tresponseCount     <span class=\"token builtin\">uint32</span>\n\tbackend           <span class=\"token operator\">*</span>httpBackend\n\twg                <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>WaitGroup\n\tlock              <span class=\"token operator\">*</span>sync<span class=\"token punctuation\">.</span>RWMutex\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的具体属性我就不介绍了， 看看注释也就懂了。<br>我就先按上面的示例解释源码</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">   // 创建一个 Collector对象\nc :<span class=\"token operator\">=</span> colly.NewCollector<span class=\"token punctuation\">(</span>\n\t// Visit only domains: hackerspaces.org, wiki.hackerspaces.org\n\tcolly.AllowedDomains<span class=\"token punctuation\">(</span><span class=\"token string\">\"hackerspaces.org\"</span>, <span class=\"token string\">\"wiki.hackerspaces.org\"</span><span class=\"token punctuation\">)</span>,\n<span class=\"token punctuation\">)</span>\n\n// 添加一个HTML的回调函数\nc.OnHTML<span class=\"token punctuation\">(</span><span class=\"token string\">\"a[href]\"</span>, func<span class=\"token punctuation\">(</span>e *colly.HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">link</span> :<span class=\"token operator\">=</span> e.Attr<span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n\t// Print <span class=\"token function\">link</span>\n\tfmt.Printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"Link found: %q -> %s<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, e.Text, <span class=\"token function\">link</span><span class=\"token punctuation\">)</span>\n\t// Visit <span class=\"token function\">link</span> found on page\n\t// Only those links are visited <span class=\"token function\">which</span> are <span class=\"token keyword\">in</span> AllowedDomains\n\tc.Visit<span class=\"token punctuation\">(</span>e.Request.AbsoluteURL<span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">))</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n// 添加一个 Requset回调函数\nc.OnRequest<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">(</span>r *colly.Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt.Println<span class=\"token punctuation\">(</span><span class=\"token string\">\"Visiting\"</span>, r.URL.String<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n// 开始爬取\nc.Visit<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://hackerspaces.org/\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>回调函数如何用？ 什么作用？ 先卖个关子， <code>c.Visit(&quot;https://hackerspaces.org/&quot;)</code>是入口， 那就先分析它，</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Visit starts Collector's collecting job by creating a</span>\n<span class=\"token comment\">// request to the URL specified in parameter.</span>\n<span class=\"token comment\">// Visit also calls the previously provided callbacks</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>URL <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>CheckHead <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> check <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">scrape</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"HEAD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> check <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> check\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">scrape</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>👆又出来一个新的method，</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">scrape</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> depth <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> requestData io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">,</span> ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">,</span> hdr http<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">,</span> checkRevisit <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 检查请求是否合法</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">requestCheck</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">,</span> checkRevisit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 解析url，</span>\n\tparsedURL<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> parsedURL<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n\t\tparsedURL<span class=\"token punctuation\">.</span>Scheme <span class=\"token operator\">=</span> <span class=\"token string\">\"http\"</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">isDomainAllowed</span><span class=\"token punctuation\">(</span>parsedURL<span class=\"token punctuation\">.</span><span class=\"token function\">Hostname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> ErrForbiddenDomain\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// robots协议</span>\n\t<span class=\"token keyword\">if</span> method <span class=\"token operator\">!=</span> <span class=\"token string\">\"HEAD\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>c<span class=\"token punctuation\">.</span>IgnoreRobotsTxt <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">checkRobots</span><span class=\"token punctuation\">(</span>parsedURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n     <span class=\"token comment\">// headers</span>\n\t<span class=\"token keyword\">if</span> hdr <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\thdr <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"User-Agent\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">.</span>UserAgent<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\trc<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> requestData<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>ReadCloser<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token operator\">&amp;&amp;</span> requestData <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\trc <span class=\"token operator\">=</span> ioutil<span class=\"token punctuation\">.</span><span class=\"token function\">NopCloser</span><span class=\"token punctuation\">(</span>requestData<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// The Go HTTP API ignores \"Host\" in the headers, preferring the client</span>\n\t<span class=\"token comment\">// to use the Host field on Request.</span>\n\thost <span class=\"token operator\">:=</span> parsedURL<span class=\"token punctuation\">.</span>Host\n\t<span class=\"token keyword\">if</span> hostHeader <span class=\"token operator\">:=</span> hdr<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> hostHeader <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n\t\thost <span class=\"token operator\">=</span> hostHeader\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 构造http.Request</span>\n\treq <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">&#123;</span>\n\t\tMethod<span class=\"token punctuation\">:</span>     method<span class=\"token punctuation\">,</span>\n\t\tURL<span class=\"token punctuation\">:</span>        parsedURL<span class=\"token punctuation\">,</span>\n\t\tProto<span class=\"token punctuation\">:</span>      <span class=\"token string\">\"HTTP/1.1\"</span><span class=\"token punctuation\">,</span>\n\t\tProtoMajor<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\tProtoMinor<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\tHeader<span class=\"token punctuation\">:</span>     hdr<span class=\"token punctuation\">,</span>\n\t\tBody<span class=\"token punctuation\">:</span>       rc<span class=\"token punctuation\">,</span>\n\t\tHost<span class=\"token punctuation\">:</span>       host<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 请求的数据（requestData）转换成io.ReadCloser接口数据</span>\n\t<span class=\"token function\">setRequestBody</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> requestData<span class=\"token punctuation\">)</span>\n\tu <span class=\"token operator\">=</span> parsedURL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 异步方式</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>Async <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">go</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">,</span> requestData<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> hdr<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> depth<span class=\"token punctuation\">,</span> requestData<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> hdr<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面很大篇幅都是检查， 现在还在 <code>request</code>的阶段， 还没有response，看<code>c.fetch</code></p>\n<p>fetch就是colly的核心内容</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> depth <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> requestData io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">,</span> ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">,</span> hdr http<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> ctx <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tctx <span class=\"token operator\">=</span> <span class=\"token function\">NewContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\trequest <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Request<span class=\"token punctuation\">&#123;</span>\n\t\tURL<span class=\"token punctuation\">:</span>       req<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">,</span>\n\t\tHeaders<span class=\"token punctuation\">:</span>   <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">,</span>\n\t\tCtx<span class=\"token punctuation\">:</span>       ctx<span class=\"token punctuation\">,</span>\n\t\tDepth<span class=\"token punctuation\">:</span>     depth<span class=\"token punctuation\">,</span>\n\t\tMethod<span class=\"token punctuation\">:</span>    method<span class=\"token punctuation\">,</span>\n\t\tBody<span class=\"token punctuation\">:</span>      requestData<span class=\"token punctuation\">,</span>\n\t\tcollector<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 这里将Collector放到request中，这个可以对请求继续处理</span>\n\t\tID<span class=\"token punctuation\">:</span>        atomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>requestCount<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 回调函数处理 request</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>abort <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">if</span> method <span class=\"token operator\">==</span> <span class=\"token string\">\"POST\"</span> <span class=\"token operator\">&amp;&amp;</span> req<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n\t\treq<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">if</span> req<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">&#123;</span>\n\t\treq<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*/*\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\torigURL <span class=\"token operator\">:=</span> req<span class=\"token punctuation\">.</span>URL\n    <span class=\"token comment\">// 这里是 去请求网络， 是调用了 `http.Client.Do`方法请求的</span>\n\tresponse<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span>backend<span class=\"token punctuation\">.</span><span class=\"token function\">Cache</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>MaxBodySize<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>CacheDir<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> proxyURL<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">Context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span>ProxyURLKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\trequest<span class=\"token punctuation\">.</span>ProxyURL <span class=\"token operator\">=</span> proxyURL\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 回调函数，处理error</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnError</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> req<span class=\"token punctuation\">.</span>URL <span class=\"token operator\">!=</span> origURL <span class=\"token punctuation\">&#123;</span>\n\t\trequest<span class=\"token punctuation\">.</span>URL <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>URL\n\t\trequest<span class=\"token punctuation\">.</span>Headers <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">.</span>Header\n\t<span class=\"token punctuation\">&#125;</span>\n\tatomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>responseCount<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tresponse<span class=\"token punctuation\">.</span>Ctx <span class=\"token operator\">=</span> ctx\n\tresponse<span class=\"token punctuation\">.</span>Request <span class=\"token operator\">=</span> request\n\n\terr <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">fixCharset</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>DetectCharset<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>ResponseCharacterEncoding<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 回调函数 处理Response</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 回调函数 HTML</span>\n\terr <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnHTML</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnError</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 回调函数XML</span>\n\terr <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnXML</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnError</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 回调函数 Scraped</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">handleOnScraped</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">&#125;</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看到了， 这就是一个完整的流程。 好， 我们看一下回调函数做了什么？</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnRequest</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>requestCallbacks <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>核心就 <code>for _, f := range c.requestCallbacks &#123; f(r) &#125;</code>这句，下面我每个回调函数都介绍一下</p>\n<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>这里介绍按生命周期的顺序来介绍</p>\n<h4 id=\"1-OnRequest\"><a href=\"#1-OnRequest\" class=\"headerlink\" title=\"1. OnRequest\"></a>1. OnRequest</h4> <pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnRequest registers a function. Function will be executed on every</span>\n<span class=\"token comment\">// request made by the Collector</span>\n<span class=\"token comment\">// 这里是注册回调函数到 requestCallbacks</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnRequest</span><span class=\"token punctuation\">(</span>f RequestCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>requestCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>requestCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>RequestCallback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>requestCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>requestCallbacks<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// 在fetch中调用最早调用的</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnRequest</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>requestCallbacks <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"2-OnResponse-amp-handleOnResponse\"><a href=\"#2-OnResponse-amp-handleOnResponse\" class=\"headerlink\" title=\"2. OnResponse &amp; handleOnResponse\"></a>2. OnResponse &amp; handleOnResponse</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnResponse registers a function. Function will be executed on every response</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnResponse</span><span class=\"token punctuation\">(</span>f ResponseCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>responseCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>responseCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ResponseCallback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>responseCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>responseCallbacks<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnResponse</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"response\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span>    r<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">StatusText</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>responseCallbacks <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"3-OnHTML-amp-handleOnHTML\"><a href=\"#3-OnHTML-amp-handleOnHTML\" class=\"headerlink\" title=\"3. OnHTML &amp; handleOnHTML\"></a>3. OnHTML &amp; handleOnHTML</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnHTML registers a function. Function will be executed on every HTML</span>\n<span class=\"token comment\">// element matched by the GoQuery Selector parameter.</span>\n<span class=\"token comment\">// GoQuery Selector is a selector used by https://github.com/PuerkitoBio/goquery</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span>goquerySelector <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> f HTMLCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>htmlCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>htmlCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>htmlCallbackContainer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>htmlCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>htmlCallbacks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>htmlCallbackContainer<span class=\"token punctuation\">&#123;</span>\n\t\tSelector<span class=\"token punctuation\">:</span> goquerySelector<span class=\"token punctuation\">,</span>\n\t\tFunction<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 这个解析html的逻辑比较多一些</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnHTML</span><span class=\"token punctuation\">(</span>resp <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>htmlCallbacks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tdoc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> goquery<span class=\"token punctuation\">.</span><span class=\"token function\">NewDocumentFromReader</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewBuffer</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> href<span class=\"token punctuation\">,</span> found <span class=\"token operator\">:=</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"base[href]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> found <span class=\"token punctuation\">&#123;</span>\n\t\tresp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>baseURL<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>href<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> cc <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>htmlCallbacks <span class=\"token punctuation\">&#123;</span>\n\t\ti <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t\tdoc<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">.</span>Selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">*</span>goquery<span class=\"token punctuation\">.</span>Selection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s<span class=\"token punctuation\">.</span>Nodes <span class=\"token punctuation\">&#123;</span>\n\t\t\t\te <span class=\"token operator\">:=</span> <span class=\"token function\">NewHTMLElementFromSelectionNode</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n\t\t\t\ti<span class=\"token operator\">++</span>\n\t\t\t\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t<span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> cc<span class=\"token punctuation\">.</span>Selector<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span>      resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tcc<span class=\"token punctuation\">.</span><span class=\"token function\">Function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"4-OnXML-amp-handleOnXML\"><a href=\"#4-OnXML-amp-handleOnXML\" class=\"headerlink\" title=\"4. OnXML &amp; handleOnXML\"></a>4. OnXML &amp; handleOnXML</h4><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnXML registers a function. Function will be executed on every XML</span>\n<span class=\"token comment\">// element matched by the xpath Query parameter.</span>\n<span class=\"token comment\">// xpath Query is used by https://github.com/antchfx/xmlquery</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnXML</span><span class=\"token punctuation\">(</span>xpathQuery <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> f XMLCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>xmlCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>xmlCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>xmlCallbackContainer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>xmlCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>xmlCallbacks<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>xmlCallbackContainer<span class=\"token punctuation\">&#123;</span>\n\t\tQuery<span class=\"token punctuation\">:</span>    xpathQuery<span class=\"token punctuation\">,</span>\n\t\tFunction<span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnXML</span><span class=\"token punctuation\">(</span>resp <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>xmlCallbacks<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tcontentType <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tisXMLFile <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasSuffix</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".xml\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasSuffix</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".xml.gz\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">,</span> <span class=\"token string\">\"xml\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isXMLFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\tdoc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> htmlquery<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewBuffer</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">if</span> e <span class=\"token operator\">:=</span> htmlquery<span class=\"token punctuation\">.</span><span class=\"token function\">FindOne</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">,</span> <span class=\"token string\">\"//base\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> e<span class=\"token punctuation\">.</span>Attr <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> a<span class=\"token punctuation\">.</span>Key <span class=\"token operator\">==</span> <span class=\"token string\">\"href\"</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tresp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>baseURL<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>Val<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> cc <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>xmlCallbacks <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> htmlquery<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">,</span> cc<span class=\"token punctuation\">.</span>Query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\te <span class=\"token operator\">:=</span> <span class=\"token function\">NewXMLElementFromHTMLNode</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xml\"</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t<span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> cc<span class=\"token punctuation\">.</span>Query<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span>      resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tcc<span class=\"token punctuation\">.</span><span class=\"token function\">Function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">,</span> <span class=\"token string\">\"xml\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> isXMLFile <span class=\"token punctuation\">&#123;</span>\n\t\tdoc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> xmlquery<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewBuffer</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> err\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> cc <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>xmlCallbacks <span class=\"token punctuation\">&#123;</span>\n\t\t\txmlquery<span class=\"token punctuation\">.</span><span class=\"token function\">FindEach</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">,</span> cc<span class=\"token punctuation\">.</span>Query<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">*</span>xmlquery<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\te <span class=\"token operator\">:=</span> <span class=\"token function\">NewXMLElementFromXMLNode</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xml\"</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t<span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">:</span> cc<span class=\"token punctuation\">.</span>Query<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span>      resp<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t\tcc<span class=\"token punctuation\">.</span><span class=\"token function\">Function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h4 id=\"5-OnError-amp-handleOnError\"><a href=\"#5-OnError-amp-handleOnError\" class=\"headerlink\" title=\"5. OnError &amp; handleOnError\"></a>5. OnError &amp; handleOnError</h4><p>这个会多次调用， 如果 <code>err != nil情况下调用比较多</code>， 爬虫异常的情况下，会调用</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnError registers a function. Function will be executed if an error</span>\n<span class=\"token comment\">// occurs during the HTTP request.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnError</span><span class=\"token punctuation\">(</span>f ErrorCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>errorCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>errorCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ErrorCallback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>errorCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>errorCallbacks<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnError</span><span class=\"token punctuation\">(</span>response <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> request <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">,</span> ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>ParseHTTPErrorResponse <span class=\"token operator\">||</span> response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">&lt;</span> <span class=\"token number\">203</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>StatusCode <span class=\"token operator\">>=</span> <span class=\"token number\">203</span> <span class=\"token punctuation\">&#123;</span>\n\t\terr <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">StatusText</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> response <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tresponse <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Response<span class=\"token punctuation\">&#123;</span>\n\t\t\tRequest<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">,</span>\n\t\t\tCtx<span class=\"token punctuation\">:</span>     ctx<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span>    request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"status\"</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">StatusText</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>Request <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tresponse<span class=\"token punctuation\">.</span>Request <span class=\"token operator\">=</span> request\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>Ctx <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tresponse<span class=\"token punctuation\">.</span>Ctx <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>Ctx\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>errorCallbacks <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"6-OnScraped-amp-handleOnScraped\"><a href=\"#6-OnScraped-amp-handleOnScraped\" class=\"headerlink\" title=\"6. OnScraped &amp; handleOnScraped\"></a>6. OnScraped &amp; handleOnScraped</h4><p>最后一步的回调函数处理</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// OnScraped registers a function. Function will be executed after</span>\n<span class=\"token comment\">// OnHTML, as a final part of the scraping.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">OnScraped</span><span class=\"token punctuation\">(</span>f ScrapedCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>scrapedCallbacks <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>scrapedCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>ScrapedCallback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tc<span class=\"token punctuation\">.</span>scrapedCallbacks <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>scrapedCallbacks<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">handleOnScraped</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> c<span class=\"token punctuation\">.</span>debugger <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tc<span class=\"token punctuation\">.</span>debugger<span class=\"token punctuation\">.</span><span class=\"token function\">Event</span><span class=\"token punctuation\">(</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scraped\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> f <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> c<span class=\"token punctuation\">.</span>scrapedCallbacks <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注册回调函数的method还有几个没有列出来，感兴趣的，自己看一下，</p>\n<p>上面介绍完了， 再回头看🌰</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// On every a element which has href attribute call callback</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[href]\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tlink <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Print link</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Link found: %q -> %s\\n\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Visit link found on page</span>\n\t<span class=\"token comment\">// Only those links are visited which are in AllowedDomains</span>\n\tc<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteURL</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Before making a request print \"Visiting ...\"</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">OnRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Visiting\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>一般文档解析放在html, xml 中</p>\n<h3 id=\"页面跳转爬取\"><a href=\"#页面跳转爬取\" class=\"headerlink\" title=\"页面跳转爬取\"></a>页面跳转爬取</h3><p>一般处理就2种，一种是相同逻辑的页面，比如<code>下一页</code>，另一种，就是不同逻辑的，比如<code>子页面</code></p>\n<ol>\n<li>在<code>html</code>,<code>xml</code>，解析出来以后，构建新的请求，我们看一下，相同页面<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// On every a element which has href attribute call callback</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a[href]\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// If attribute class is this long string return from callback</span>\n\t<span class=\"token comment\">// As this a is irrelevant</span>\n\t<span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Button_1qxkboh-o_O-primary_cv02ee-o_O-md_28awn8-o_O-primaryLink_109aggg\"</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tlink <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// If link start with browse or includes either signup or login return from callback</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/browse\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> <span class=\"token string\">\"=signup\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> <span class=\"token string\">\"=login\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// start scaping the page under the link found</span>\n\te<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n上面是 HTML的回调函数，解析页面，获取了<code>url</code>,使用 <code>e.Request.Visit(link)</code>, 其实就是 <code>e.Request.collector.Visit(link)</code><br>我解释一下<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>Collector<span class=\"token punctuation\">)</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> method <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> depth <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> requestData io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">,</span> ctx <span class=\"token operator\">*</span>Context<span class=\"token punctuation\">,</span> hdr http<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">,</span> req <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">defer</span> c<span class=\"token punctuation\">.</span>wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> ctx <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tctx <span class=\"token operator\">=</span> <span class=\"token function\">NewContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\trequest <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Request<span class=\"token punctuation\">&#123;</span>\n\t\tURL<span class=\"token punctuation\">:</span>       req<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">,</span>\n\t\tHeaders<span class=\"token punctuation\">:</span>   <span class=\"token operator\">&amp;</span>req<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">,</span>\n\t\tCtx<span class=\"token punctuation\">:</span>       ctx<span class=\"token punctuation\">,</span>\n\t\tDepth<span class=\"token punctuation\">:</span>     depth<span class=\"token punctuation\">,</span>\n\t\tMethod<span class=\"token punctuation\">:</span>    method<span class=\"token punctuation\">,</span>\n\t\tBody<span class=\"token punctuation\">:</span>      requestData<span class=\"token punctuation\">,</span>\n\t\tcollector<span class=\"token punctuation\">:</span> c<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 这个上面有介绍</span>\n\t\tID<span class=\"token punctuation\">:</span>        atomic<span class=\"token punctuation\">.</span><span class=\"token function\">AddUint32</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">.</span>requestCount<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// Visit continues Collector's collecting job by creating a</span>\n<span class=\"token comment\">// request and preserves the Context of the previous request.</span>\n<span class=\"token comment\">// Visit also calls the previously provided callbacks</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span> <span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>URL <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span>collector<span class=\"token punctuation\">.</span><span class=\"token function\">scrape</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteURL</span><span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Depth<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Ctx<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n这种方法在实际开发中经常会用到。</li>\n</ol>\n<ol start=\"2\">\n<li>子页面的处理逻辑<br>colly中主要是以<code>Collector</code>为中心， 然后各种回调函数进行处理，子页面需要不同的回调函数，所以就需要新的 <code>Collector</code></li>\n</ol>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// Instantiate default collector</span>\nc <span class=\"token operator\">:=</span> colly<span class=\"token punctuation\">.</span><span class=\"token function\">NewCollector</span><span class=\"token punctuation\">(</span>\n\t<span class=\"token comment\">// Visit only domains: coursera.org, www.coursera.org</span>\n\tcolly<span class=\"token punctuation\">.</span><span class=\"token function\">AllowedDomains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coursera.org\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"www.coursera.org\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\">// Cache responses to prevent multiple download of pages</span>\n\t<span class=\"token comment\">// even if the collector is restarted</span>\n\tcolly<span class=\"token punctuation\">.</span><span class=\"token function\">CacheDir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./coursera_cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Create another collector to scrape course details</span>\ndetailCollector <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Before making a request print \"Visiting ...\"</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">OnRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"visiting\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// On every a HTML element which has name attribute call callback</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">`a[name]`</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Activate detailCollector if the link contains \"coursera.org/learn\"</span>\n\tcourseURL <span class=\"token operator\">:=</span> e<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span><span class=\"token function\">AbsoluteURL</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">Attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>courseURL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"coursera.org/learn\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 子页面或其他页面</span>\n\t\tdetailCollector<span class=\"token punctuation\">.</span><span class=\"token function\">Visit</span><span class=\"token punctuation\">(</span>courseURL<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h3><p><code>Collector</code>对象有一个属性 <code>store             storage.Storage</code>是存储的，这个是将数据直接存储下来，没有清洗。<br>比如， 我需要将数据持久化到数据库中，其实很简单， 在回调函数中处理。</p>\n<p>给个例子</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">c<span class=\"token punctuation\">.</span><span class=\"token function\">OnHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#currencies-all tbody tr\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>colly<span class=\"token punctuation\">.</span>HTMLElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tmysql<span class=\"token punctuation\">.</span><span class=\"token function\">WriteObjectStrings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".currency-name-container\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".col-symbol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.price\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-usd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.volume\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-usd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".market-cap\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-usd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".percent-change[data-timespan=\\\"1h\\\"]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-percentusd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".percent-change[data-timespan=\\\"24h\\\"]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-percentusd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">ChildAttr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".percent-change[data-timespan=\\\"7d\\\"]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"data-percentusd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>好了，介绍完了，我没有介绍如何使用，我自己也没有写任何的代码， 我只想分享给你这种软件架构的特点以及设计模式， 希望你可以借鉴应用到工作中，一般写框架都是采用这种思维。<br>下面这张图很形象，爬虫框架就这些东西。<br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/BqC7ix.jpg\" alt=\"通用爬虫框架架构\"></p>\n"},{"title":"项目管理工具maven","date":"2021-08-01T14:15:35.000Z","img":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/xwoLGY.jpg","top":true,"hide":false,"cover":true,"coverImg":"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/jmn7kh.jpg","toc":true,"mathjax":false,"summary":"介绍maven在开发中使用，以及一些专业术语相关的东西","keywords":["java","maven","tool"],"_content":"\n\n在学习的技术越来越多，写的代码越来越多，会发现代码管理越来越复杂，就自然有了包的概念。我个人前面的jar包都是手动管理的，由于，我经常使用python的pip以及golang的 govender以及 gomods，所以，会想到java的包管理工具，查了一下，发现maven很强大，可以极大的提高开发效率，故学习，下面是学习过程中整理的笔记。\n\n## 目前在技术开发中存在的问题\n1. 一个项目就是一个工程\n   如果项目非常庞大，就不适合继续使用package来划分模块。最好是每一个模块对应一个项目，利于分工协作。\n   借助于maven就可以将一个项目拆分成多个工程。\n\n2. 项目中需要的jar包必须手动“复制”、”粘贴” 到WEB-INF/lib 项目下\n   带来的问题：同样的jar包文件重复出现在不同的项目工程中，一方面浪费存储空间，另外也让工程比较臃肿。\n   借助Maven，可以将jar包仅仅保存在“仓库”中，有需要使用的工程“引用”这个文件，并不需要重复复制。\n\n3. jar包需要别人替我们准备好，或到官网下载\n   所有知名框架或第三方工具jar包已经按照统一规范放在了Maven的中央仓库中。\n\n4. 一个jar包依赖的其他jar包需要自己手动加到项目中\n   Maven会自动将被依赖的jar包导入进来。\n\n\n## maven是什么\n\n1. Maven 是 Apache 软件基金会组织维护的一款自动化构建工具，专注服务于 Java 平台的项目构建和依赖管理 。Maven 这个单词的本意是：专家，内行。读音是[‘meɪv(ə)n]或[‘mevn]。\n   构建工具的发展：Make→Ant→Maven→Gradle\n\n\n\n2. 构建：就是以我们编写的Java代码、框架配置文件、国际化等其他资源文件、jsp页面和图片等静态资源作为“原材料”，去“生产”出一个可以运行的项目的过程。\n   理想的项目构建：高度自动化，跨平台，可重用的组件，标准化的\n\n\n3.构建过程中的几个主要环节\n①清理：删除以前的编译结果，为重新编译做好准备。\n②编译：将Java源程序编译为字节码文件。\n③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。\n④报告：将每一次测试后以标准的格式记录和展示测试结果。\n⑤打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对象war包。\n⑥安装：在Maven环境下特指将打包的结果——Jar包或War包安装到本地仓库中。\n⑦部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/PeaY9R.jpg)\n\n\n\n日常开发中，如果不通过maven，以上步骤全部是程序员自己手动一个一个的去编译执行操作，有了maven， 只需要简单的一个命令，全部搞定，解放双手。\n\n\n4. 什么是依赖？为什么要进行依赖管理？\n   依赖是Maven中最关键的部分，我们之所以在工程中使用Maven，就是因为它的依赖管理功能。\n   自动下载，统一依赖管理，避免jar包引起的错误。\n\n### maven安装\n```bash\nbrew install maven\n```\n\n安装完成后，查看安装文件\n```bash\n\nmacbookpro > brew list maven\n/usr/local/Cellar/maven/3.6.1/bin/mvn\n/usr/local/Cellar/maven/3.6.1/bin/mvnDebug\n/usr/local/Cellar/maven/3.6.1/bin/mvnyjp\n/usr/local/Cellar/maven/3.6.1/libexec/bin/ (4 files)\n/usr/local/Cellar/maven/3.6.1/libexec/boot/plexus-classworlds-2.6.0.jar\n/usr/local/Cellar/maven/3.6.1/libexec/conf/ (3 files)\n/usr/local/Cellar/maven/3.6.1/libexec/lib/ (63 files)\n```\n测试一下：\n\n```bash\nmacbookpro> mvn --v\nApache Maven 3.6.1 (d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555; 2019-04-05T03:00:29+08:00)\nMaven home: /usr/local/Cellar/maven/3.6.1/libexec\nJava version: 1.8.0_172, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/jre\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.15\", arch: \"x86_64\", family: \"mac\"\n```\n\n可以使用`mvn --help`查看帮助\n\n\n### maven的核心概念\n>约定的目录结构\nPOM\n坐标\n依赖\n仓库\n生命周期/插件/目标\n继承\n聚合\n\n\n以下内容就是按上面进行展开的\n\n#### 使用idea创建一个maven工程\n1. idea支持创建maven项目\n   ![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/NFqnYK.jpg)\n\n   ![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Oo9fzo.jpg)\n\n   ![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/ZhCzDy.jpg)\n\n   ![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/C70JLZ.jpg)\n\n\npom.xml文件为Maven工程的核心配置文件\n\n2. 为什么要遵循约定的目录结构呢？\n   我们在开发中如果需要让第三方工具或框架知道我们自己创建的资源在哪，那么基本上就是两种方式：\n   ①以配置文件的方式明确告诉框架 如 < param-value>classpath:spring-context.xml < /param-value>\n   ②遵循框架内部已经存在的约定 如log4j的配置文件名规定必须为 log4j.properties 或 log4j.xml ；Maven 使用约定的目录结构\n\n\n#### maven常用命令\n1. 注意：执行与构建过程相关的Maven命令，必须进入pom.xml 所在的目录。\n2. 常用命令\n> mvn clean : 清理\nmvn compile : 编译主程序\nmvn test-compile : 编译测试程序\nmvn test : 执行测试\nmvn package : 打包\nmvn install ： 安装\nmvn site ：生成站点\n\n\n#### maven网络问题\n\n1. Maven 的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须有特定的插件来完成。而插件本身不包含在Maven核心程序中。\n2. 当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找。\n3. 本地仓库的默认位置：~/.m2/repository\n4. Maven核心程序如果在本地仓库中找不到需要的插件，那么它会自动连接外网，到中央仓库下载。\n5. 如果此时无法连接外网，则构建失败。\n6. 修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好的目录下查找插件\n   ①找到Maven解压目录\\conf\\settings.xml\n   ②在setting.xml 文件中找到 localRepository 标签\n   ③将 < localRepository>/path/to/local/repo< /localRepository>从注释中取出\n   ④将标签体内容修改为自定义的Maven仓库目录\n\n如果网络慢，也可以配置阿里的国内镜像。\n\n\n\n## POM\n\n1. 含义：Project Object Model 项目对象模型\n   DOM ：Document Object Model 文档对象模型\n\n2. pom.xml 对于 Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置。\n   重要程度相当于web.xml 对于动态web工程\n\nPOM 中可以指定以下配置：\n\n>项目依赖\n插件\n执行目标\n项目构建 profile\n项目版本\n项目开发者列表\n相关邮件列表信息\n\n示例：\n```xml\n<project xmlns = \"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation = \"http://maven.apache.org/POM/4.0.0\n    http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n \n    <!-- 模型版本 -->\n    <modelVersion>4.0.0</modelVersion>\n    <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group -->\n    <groupId>com.companyname.project-group</groupId>\n \n    <!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 -->\n    <artifactId>project</artifactId>\n \n    <!-- 版本号 -->\n    <version>1.0</version>\n</project>\n```\n所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。也就是下面需要说的 坐标\n\n\n### 坐标\n坐标就是用来定位的\n\nMaven的坐标：\n使用下面三个向量在仓库中唯一定位一个Maven工程\n①groupid:公司或组织域名倒序+项目名\n`<groupId>com.jackson.youdi</groupId>`\n②artifactid:模块名\n`<artifactId>TheOne</artifactId>`\n③version：版本\n`<version>1.0-SNAPSHOT</version>`\n\n\n3. Maven 工程的坐标与仓库中路径的对应关系,下面给两个例子\n```xml\n< groupId>org.springframework< /groupId>\n< artifactId>spring-core</artifactId>\n< version>4.0.0.RELEASE< /version>\n\norg/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar\n\n<groupId>mysql</groupId>\n<artifactId>mysql-connector-java</artifactId>\n<version>8.0.18</version>\n\nmysql/mysql-connector-java/8.0.18/mysql-connector-java-8.0.18.jar\n绝对路径： ~/.m2/repository/mysql/mysql-connector-java/8.0.18/mysql-connector-java-8.0.18.jar\n```\n\n注意：我们自己的 Maven 工程必须执行安装操作才会进入仓库。安装的命令是：mvn install\n\n\n### 仓库\n1. 仓库的分类\n   ①本地仓库：当前电脑上部署的仓库目录，为当前电脑上所有Maven工程服务\n   ②远程仓库\n   （1）私服：搭建在局域网环境中，为局域网范围内的所有Maven工程服务\n   （2）中央仓库：假设在Internet上，为全世界所有Maven工程服务\n   （3）中央仓库镜像：为了分担中央仓库流量，提升用户访问速度\n\n2. 仓库中保存的内容：Maven工程\n   ①Maven自身所需要的插件\n   ②第三方框架或工具的jar包\n   ③我们自己开发的Maven工程\n\n不管是什么样的 jar 包，在仓库中都是按照坐标生成目录结构，所以可以通过统一的方式查询或依赖。\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/i512Gx.jpg)\n\n\n\n### 依赖\n1. 当 A jar 包用到了 B jar 包中的某些类时，A 就对 B 产生了依赖，这是概念上的描述。Maven解析依赖信息时会到仓库中查找被依赖的jar包。\n   对于我们自己开发的Maven工程，要使用mvn install 命令安装后就可以进入仓库。\n\n```xml\n    <!--    dependecies 项目运行时的jar包-->\n    <dependencies>\n        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.18</version>\n        </dependency>\n    </dependencies>\n```\n\n2. 依赖的范围\n   ①从项目结构角度理解compile和test的区别\n\n```bash\n.\n├── main\n│   ├── java  // compile范围依赖\n│   └── resources\n└── test\n    └── java  //  test范围依赖\n```\n\ncompile范围依赖\n》对主程序是否有效：有效\n》对测试程序是否有效：有效\n》是否参与打包：参与\n》是否参与部署：参与\n》典型例子：spring-core\n\ntest范围依赖\n》对主程序是否有效：无效\n》对测试程序是否有效：有效\n》是否参与打包：不参与\n》是否参与部署：不参与\n》典型例子：Junit\n\n②从开发和运行这两个阶段理解compile 和 provided 的区别\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/R1yMAr.jpg)\n\n\n\n》对主程序是否有效：有效\n》对测试程序是否有效：有效\n》是否参与打包：不参与\n》是否参与部署：不参与\n》典型例子：Servlet-api.jar\n\n③有效性总结\n\n||compile|test|provided|\n|-|-|-|-|\n|主程序|√|x|√|\n|测试程序|√|√|√|\n|参与部署|√|x|x|\n\n3. 依赖的传递性\n   一种相当常见的情况，比如说 A 依赖于其他库 B。如果，另外一个项目 C 想要使用 A ，那么 C 项目也需要使用库 B。\n   Maven 可以避免去搜索所有所需库的需求。Maven 通过读取项目文件（pom.xml），找出它们项目之间的依赖关系。\n   我们需要做的只是在每个项目的 pom 中定义好直接的依赖关系。其他的事情 Maven 会帮我们搞定。\n   通过可传递性的依赖，所有被包含的库的图形会快速的增长。当有重复库时，可能出现的情形将会持续上升。Maven 提供一些功能来控制可传递的依赖的程度。\n\n\n\n### 生命周期\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Ljs75u.jpg)\n\n\n各个构建环节执行的顺序：不能打乱顺序，必须按照既定的正确顺序来执行。\nMaven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。\nMaven核心程序为了更好的实现自动化构建，按照这一特点执行生命周期中各个阶段：不论现在要执行生命周期中的哪一阶段，都是从这个生命周期最初的位置开始执行。\nMaven有三套相互独立的生命周期，分别是：\n\n\n#### 生命周期\n\n①Clean Lifecycle 在进行真正的构建之前进行一些清理工作。\n②Default Lifecycle 构建的核心部分，编译、测试、打包、安装、部署等等。\n③Site Lifecycle 生成项目报告，站点，发布站点。\n\n他们相互独立。也可以直接运行 mvn clean install site 运行所有这三套生命周期。\n\n每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行 mvn clean，这个 clean 是 Clean 生命周期的一个阶段。有 Clean 生命周期，也有 clean 阶段。\n\n#### Clean声明周期\n①pre-clean 执行一些需要在clean之前完成的工作\n②clean 移除所有上一次构建生成的文件\n③post-clean 执行一些需要在clean 之后立刻完成的工作\n\n#### Default声明周期\nDefault 生命周期是 Maven 生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：\n\n\n>validate\ngenerate-sources\nprocess-sources\ngenerate-resources\nprocess-resources 复制并处理资源文件，至目标目录，准备打包。\ncompile 编译项目的源代码。\nprocess-classes\ngenerate-test-sources\nprocess-test-sources\ngenerate-test-resources\nprocess-test-resources 复制并处理资源文件，至目标测试目录。\ntest-compile 编译测试源代码。\nprocess-test-classes\ntest 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。\nprepare-package\npackage 接受编译好的代码，打包成可发布的格式，如 JAR。\npre-integration-test\nintegration-test\npost-integration-test\nverify\ninstall 将包安装至本地仓库，以让其它项目依赖。\ndeploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享或部署到服务器上运行。\n\n#### Site生命周期\n①pre-site 执行一些需要在生成站点文档之前完成的工作\n②site 生成项目的站点文档\n③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备\n④site-deploy 将生成的站点文档部署到特定的服务器上\n\n这里经常用到的是 site 阶段和 site-deploy 阶段，用以生成和发布 Maven 站点，这可是 Maven 相当强大的功能，Manager 比较喜欢，文档及统计数据自动生成，很好看。\n\n\n#### 插件和目标\nMaven的核心仅仅定义了抽象的声明周期，具体的任务都是交由插件完成的。\n每个插件都实现多个功能，每个功能就是一个插件目标\nMaven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。\n可以将目标看做“调用插件功能的命令”\n\n例如：compile 就是插件 maven-compiler-plugin 的一个目标；pre-clean 是插件 maven-clean-plugin 的一个目标。\n\n\n以上内容来源于网络，推荐给大家比较好的资源： [https://www.runoob.com/maven/maven-tutorial.html](https://www.runoob.com/maven/maven-tutorial.html)\n\n","source":"_posts/maven.md","raw":"---\ntitle: 项目管理工具maven\ndate: 2021-08-01 22:15:35\nimg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/xwoLGY.jpg\ntop: true\nhide: false\ncover: true\ncoverImg: https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/jmn7kh.jpg\ntoc: true\nmathjax: false\nsummary: 介绍maven在开发中使用，以及一些专业术语相关的东西\nkeywords:\n-  java\n-  maven\n-  tool\n\ncategories: 工具软件\ntags:\n-  java\n- package manager\n- maven\n\n---\n\n\n在学习的技术越来越多，写的代码越来越多，会发现代码管理越来越复杂，就自然有了包的概念。我个人前面的jar包都是手动管理的，由于，我经常使用python的pip以及golang的 govender以及 gomods，所以，会想到java的包管理工具，查了一下，发现maven很强大，可以极大的提高开发效率，故学习，下面是学习过程中整理的笔记。\n\n## 目前在技术开发中存在的问题\n1. 一个项目就是一个工程\n   如果项目非常庞大，就不适合继续使用package来划分模块。最好是每一个模块对应一个项目，利于分工协作。\n   借助于maven就可以将一个项目拆分成多个工程。\n\n2. 项目中需要的jar包必须手动“复制”、”粘贴” 到WEB-INF/lib 项目下\n   带来的问题：同样的jar包文件重复出现在不同的项目工程中，一方面浪费存储空间，另外也让工程比较臃肿。\n   借助Maven，可以将jar包仅仅保存在“仓库”中，有需要使用的工程“引用”这个文件，并不需要重复复制。\n\n3. jar包需要别人替我们准备好，或到官网下载\n   所有知名框架或第三方工具jar包已经按照统一规范放在了Maven的中央仓库中。\n\n4. 一个jar包依赖的其他jar包需要自己手动加到项目中\n   Maven会自动将被依赖的jar包导入进来。\n\n\n## maven是什么\n\n1. Maven 是 Apache 软件基金会组织维护的一款自动化构建工具，专注服务于 Java 平台的项目构建和依赖管理 。Maven 这个单词的本意是：专家，内行。读音是[‘meɪv(ə)n]或[‘mevn]。\n   构建工具的发展：Make→Ant→Maven→Gradle\n\n\n\n2. 构建：就是以我们编写的Java代码、框架配置文件、国际化等其他资源文件、jsp页面和图片等静态资源作为“原材料”，去“生产”出一个可以运行的项目的过程。\n   理想的项目构建：高度自动化，跨平台，可重用的组件，标准化的\n\n\n3.构建过程中的几个主要环节\n①清理：删除以前的编译结果，为重新编译做好准备。\n②编译：将Java源程序编译为字节码文件。\n③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。\n④报告：将每一次测试后以标准的格式记录和展示测试结果。\n⑤打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对象war包。\n⑥安装：在Maven环境下特指将打包的结果——Jar包或War包安装到本地仓库中。\n⑦部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/PeaY9R.jpg)\n\n\n\n日常开发中，如果不通过maven，以上步骤全部是程序员自己手动一个一个的去编译执行操作，有了maven， 只需要简单的一个命令，全部搞定，解放双手。\n\n\n4. 什么是依赖？为什么要进行依赖管理？\n   依赖是Maven中最关键的部分，我们之所以在工程中使用Maven，就是因为它的依赖管理功能。\n   自动下载，统一依赖管理，避免jar包引起的错误。\n\n### maven安装\n```bash\nbrew install maven\n```\n\n安装完成后，查看安装文件\n```bash\n\nmacbookpro > brew list maven\n/usr/local/Cellar/maven/3.6.1/bin/mvn\n/usr/local/Cellar/maven/3.6.1/bin/mvnDebug\n/usr/local/Cellar/maven/3.6.1/bin/mvnyjp\n/usr/local/Cellar/maven/3.6.1/libexec/bin/ (4 files)\n/usr/local/Cellar/maven/3.6.1/libexec/boot/plexus-classworlds-2.6.0.jar\n/usr/local/Cellar/maven/3.6.1/libexec/conf/ (3 files)\n/usr/local/Cellar/maven/3.6.1/libexec/lib/ (63 files)\n```\n测试一下：\n\n```bash\nmacbookpro> mvn --v\nApache Maven 3.6.1 (d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555; 2019-04-05T03:00:29+08:00)\nMaven home: /usr/local/Cellar/maven/3.6.1/libexec\nJava version: 1.8.0_172, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/jre\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: \"mac os x\", version: \"10.15\", arch: \"x86_64\", family: \"mac\"\n```\n\n可以使用`mvn --help`查看帮助\n\n\n### maven的核心概念\n>约定的目录结构\nPOM\n坐标\n依赖\n仓库\n生命周期/插件/目标\n继承\n聚合\n\n\n以下内容就是按上面进行展开的\n\n#### 使用idea创建一个maven工程\n1. idea支持创建maven项目\n   ![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/NFqnYK.jpg)\n\n   ![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Oo9fzo.jpg)\n\n   ![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/ZhCzDy.jpg)\n\n   ![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/C70JLZ.jpg)\n\n\npom.xml文件为Maven工程的核心配置文件\n\n2. 为什么要遵循约定的目录结构呢？\n   我们在开发中如果需要让第三方工具或框架知道我们自己创建的资源在哪，那么基本上就是两种方式：\n   ①以配置文件的方式明确告诉框架 如 < param-value>classpath:spring-context.xml < /param-value>\n   ②遵循框架内部已经存在的约定 如log4j的配置文件名规定必须为 log4j.properties 或 log4j.xml ；Maven 使用约定的目录结构\n\n\n#### maven常用命令\n1. 注意：执行与构建过程相关的Maven命令，必须进入pom.xml 所在的目录。\n2. 常用命令\n> mvn clean : 清理\nmvn compile : 编译主程序\nmvn test-compile : 编译测试程序\nmvn test : 执行测试\nmvn package : 打包\nmvn install ： 安装\nmvn site ：生成站点\n\n\n#### maven网络问题\n\n1. Maven 的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须有特定的插件来完成。而插件本身不包含在Maven核心程序中。\n2. 当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找。\n3. 本地仓库的默认位置：~/.m2/repository\n4. Maven核心程序如果在本地仓库中找不到需要的插件，那么它会自动连接外网，到中央仓库下载。\n5. 如果此时无法连接外网，则构建失败。\n6. 修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好的目录下查找插件\n   ①找到Maven解压目录\\conf\\settings.xml\n   ②在setting.xml 文件中找到 localRepository 标签\n   ③将 < localRepository>/path/to/local/repo< /localRepository>从注释中取出\n   ④将标签体内容修改为自定义的Maven仓库目录\n\n如果网络慢，也可以配置阿里的国内镜像。\n\n\n\n## POM\n\n1. 含义：Project Object Model 项目对象模型\n   DOM ：Document Object Model 文档对象模型\n\n2. pom.xml 对于 Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置。\n   重要程度相当于web.xml 对于动态web工程\n\nPOM 中可以指定以下配置：\n\n>项目依赖\n插件\n执行目标\n项目构建 profile\n项目版本\n项目开发者列表\n相关邮件列表信息\n\n示例：\n```xml\n<project xmlns = \"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation = \"http://maven.apache.org/POM/4.0.0\n    http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n \n    <!-- 模型版本 -->\n    <modelVersion>4.0.0</modelVersion>\n    <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group -->\n    <groupId>com.companyname.project-group</groupId>\n \n    <!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 -->\n    <artifactId>project</artifactId>\n \n    <!-- 版本号 -->\n    <version>1.0</version>\n</project>\n```\n所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。也就是下面需要说的 坐标\n\n\n### 坐标\n坐标就是用来定位的\n\nMaven的坐标：\n使用下面三个向量在仓库中唯一定位一个Maven工程\n①groupid:公司或组织域名倒序+项目名\n`<groupId>com.jackson.youdi</groupId>`\n②artifactid:模块名\n`<artifactId>TheOne</artifactId>`\n③version：版本\n`<version>1.0-SNAPSHOT</version>`\n\n\n3. Maven 工程的坐标与仓库中路径的对应关系,下面给两个例子\n```xml\n< groupId>org.springframework< /groupId>\n< artifactId>spring-core</artifactId>\n< version>4.0.0.RELEASE< /version>\n\norg/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar\n\n<groupId>mysql</groupId>\n<artifactId>mysql-connector-java</artifactId>\n<version>8.0.18</version>\n\nmysql/mysql-connector-java/8.0.18/mysql-connector-java-8.0.18.jar\n绝对路径： ~/.m2/repository/mysql/mysql-connector-java/8.0.18/mysql-connector-java-8.0.18.jar\n```\n\n注意：我们自己的 Maven 工程必须执行安装操作才会进入仓库。安装的命令是：mvn install\n\n\n### 仓库\n1. 仓库的分类\n   ①本地仓库：当前电脑上部署的仓库目录，为当前电脑上所有Maven工程服务\n   ②远程仓库\n   （1）私服：搭建在局域网环境中，为局域网范围内的所有Maven工程服务\n   （2）中央仓库：假设在Internet上，为全世界所有Maven工程服务\n   （3）中央仓库镜像：为了分担中央仓库流量，提升用户访问速度\n\n2. 仓库中保存的内容：Maven工程\n   ①Maven自身所需要的插件\n   ②第三方框架或工具的jar包\n   ③我们自己开发的Maven工程\n\n不管是什么样的 jar 包，在仓库中都是按照坐标生成目录结构，所以可以通过统一的方式查询或依赖。\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/i512Gx.jpg)\n\n\n\n### 依赖\n1. 当 A jar 包用到了 B jar 包中的某些类时，A 就对 B 产生了依赖，这是概念上的描述。Maven解析依赖信息时会到仓库中查找被依赖的jar包。\n   对于我们自己开发的Maven工程，要使用mvn install 命令安装后就可以进入仓库。\n\n```xml\n    <!--    dependecies 项目运行时的jar包-->\n    <dependencies>\n        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.18</version>\n        </dependency>\n    </dependencies>\n```\n\n2. 依赖的范围\n   ①从项目结构角度理解compile和test的区别\n\n```bash\n.\n├── main\n│   ├── java  // compile范围依赖\n│   └── resources\n└── test\n    └── java  //  test范围依赖\n```\n\ncompile范围依赖\n》对主程序是否有效：有效\n》对测试程序是否有效：有效\n》是否参与打包：参与\n》是否参与部署：参与\n》典型例子：spring-core\n\ntest范围依赖\n》对主程序是否有效：无效\n》对测试程序是否有效：有效\n》是否参与打包：不参与\n》是否参与部署：不参与\n》典型例子：Junit\n\n②从开发和运行这两个阶段理解compile 和 provided 的区别\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/R1yMAr.jpg)\n\n\n\n》对主程序是否有效：有效\n》对测试程序是否有效：有效\n》是否参与打包：不参与\n》是否参与部署：不参与\n》典型例子：Servlet-api.jar\n\n③有效性总结\n\n||compile|test|provided|\n|-|-|-|-|\n|主程序|√|x|√|\n|测试程序|√|√|√|\n|参与部署|√|x|x|\n\n3. 依赖的传递性\n   一种相当常见的情况，比如说 A 依赖于其他库 B。如果，另外一个项目 C 想要使用 A ，那么 C 项目也需要使用库 B。\n   Maven 可以避免去搜索所有所需库的需求。Maven 通过读取项目文件（pom.xml），找出它们项目之间的依赖关系。\n   我们需要做的只是在每个项目的 pom 中定义好直接的依赖关系。其他的事情 Maven 会帮我们搞定。\n   通过可传递性的依赖，所有被包含的库的图形会快速的增长。当有重复库时，可能出现的情形将会持续上升。Maven 提供一些功能来控制可传递的依赖的程度。\n\n\n\n### 生命周期\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Ljs75u.jpg)\n\n\n各个构建环节执行的顺序：不能打乱顺序，必须按照既定的正确顺序来执行。\nMaven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。\nMaven核心程序为了更好的实现自动化构建，按照这一特点执行生命周期中各个阶段：不论现在要执行生命周期中的哪一阶段，都是从这个生命周期最初的位置开始执行。\nMaven有三套相互独立的生命周期，分别是：\n\n\n#### 生命周期\n\n①Clean Lifecycle 在进行真正的构建之前进行一些清理工作。\n②Default Lifecycle 构建的核心部分，编译、测试、打包、安装、部署等等。\n③Site Lifecycle 生成项目报告，站点，发布站点。\n\n他们相互独立。也可以直接运行 mvn clean install site 运行所有这三套生命周期。\n\n每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行 mvn clean，这个 clean 是 Clean 生命周期的一个阶段。有 Clean 生命周期，也有 clean 阶段。\n\n#### Clean声明周期\n①pre-clean 执行一些需要在clean之前完成的工作\n②clean 移除所有上一次构建生成的文件\n③post-clean 执行一些需要在clean 之后立刻完成的工作\n\n#### Default声明周期\nDefault 生命周期是 Maven 生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：\n\n\n>validate\ngenerate-sources\nprocess-sources\ngenerate-resources\nprocess-resources 复制并处理资源文件，至目标目录，准备打包。\ncompile 编译项目的源代码。\nprocess-classes\ngenerate-test-sources\nprocess-test-sources\ngenerate-test-resources\nprocess-test-resources 复制并处理资源文件，至目标测试目录。\ntest-compile 编译测试源代码。\nprocess-test-classes\ntest 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。\nprepare-package\npackage 接受编译好的代码，打包成可发布的格式，如 JAR。\npre-integration-test\nintegration-test\npost-integration-test\nverify\ninstall 将包安装至本地仓库，以让其它项目依赖。\ndeploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享或部署到服务器上运行。\n\n#### Site生命周期\n①pre-site 执行一些需要在生成站点文档之前完成的工作\n②site 生成项目的站点文档\n③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备\n④site-deploy 将生成的站点文档部署到特定的服务器上\n\n这里经常用到的是 site 阶段和 site-deploy 阶段，用以生成和发布 Maven 站点，这可是 Maven 相当强大的功能，Manager 比较喜欢，文档及统计数据自动生成，很好看。\n\n\n#### 插件和目标\nMaven的核心仅仅定义了抽象的声明周期，具体的任务都是交由插件完成的。\n每个插件都实现多个功能，每个功能就是一个插件目标\nMaven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。\n可以将目标看做“调用插件功能的命令”\n\n例如：compile 就是插件 maven-compiler-plugin 的一个目标；pre-clean 是插件 maven-clean-plugin 的一个目标。\n\n\n以上内容来源于网络，推荐给大家比较好的资源： [https://www.runoob.com/maven/maven-tutorial.html](https://www.runoob.com/maven/maven-tutorial.html)\n\n","slug":"maven","published":1,"updated":"2021-08-01T14:31:38.575Z","_id":"ckrtasa9h0000dbuqcr4h1xtm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在学习的技术越来越多，写的代码越来越多，会发现代码管理越来越复杂，就自然有了包的概念。我个人前面的jar包都是手动管理的，由于，我经常使用python的pip以及golang的 govender以及 gomods，所以，会想到java的包管理工具，查了一下，发现maven很强大，可以极大的提高开发效率，故学习，下面是学习过程中整理的笔记。</p>\n<h2 id=\"目前在技术开发中存在的问题\"><a href=\"#目前在技术开发中存在的问题\" class=\"headerlink\" title=\"目前在技术开发中存在的问题\"></a>目前在技术开发中存在的问题</h2><ol>\n<li><p>一个项目就是一个工程<br>如果项目非常庞大，就不适合继续使用package来划分模块。最好是每一个模块对应一个项目，利于分工协作。<br>借助于maven就可以将一个项目拆分成多个工程。</p>\n</li>\n<li><p>项目中需要的jar包必须手动“复制”、”粘贴” 到WEB-INF/lib 项目下<br>带来的问题：同样的jar包文件重复出现在不同的项目工程中，一方面浪费存储空间，另外也让工程比较臃肿。<br>借助Maven，可以将jar包仅仅保存在“仓库”中，有需要使用的工程“引用”这个文件，并不需要重复复制。</p>\n</li>\n<li><p>jar包需要别人替我们准备好，或到官网下载<br>所有知名框架或第三方工具jar包已经按照统一规范放在了Maven的中央仓库中。</p>\n</li>\n<li><p>一个jar包依赖的其他jar包需要自己手动加到项目中<br>Maven会自动将被依赖的jar包导入进来。</p>\n</li>\n</ol>\n<h2 id=\"maven是什么\"><a href=\"#maven是什么\" class=\"headerlink\" title=\"maven是什么\"></a>maven是什么</h2><ol>\n<li>Maven 是 Apache 软件基金会组织维护的一款自动化构建工具，专注服务于 Java 平台的项目构建和依赖管理 。Maven 这个单词的本意是：专家，内行。读音是[‘meɪv(ə)n]或[‘mevn]。<br>构建工具的发展：Make→Ant→Maven→Gradle</li>\n</ol>\n<ol start=\"2\">\n<li>构建：就是以我们编写的Java代码、框架配置文件、国际化等其他资源文件、jsp页面和图片等静态资源作为“原材料”，去“生产”出一个可以运行的项目的过程。<br>理想的项目构建：高度自动化，跨平台，可重用的组件，标准化的</li>\n</ol>\n<p>3.构建过程中的几个主要环节<br>①清理：删除以前的编译结果，为重新编译做好准备。<br>②编译：将Java源程序编译为字节码文件。<br>③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。<br>④报告：将每一次测试后以标准的格式记录和展示测试结果。<br>⑤打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对象war包。<br>⑥安装：在Maven环境下特指将打包的结果——Jar包或War包安装到本地仓库中。<br>⑦部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/PeaY9R.jpg\"></p>\n<p>日常开发中，如果不通过maven，以上步骤全部是程序员自己手动一个一个的去编译执行操作，有了maven， 只需要简单的一个命令，全部搞定，解放双手。</p>\n<ol start=\"4\">\n<li>什么是依赖？为什么要进行依赖管理？<br>依赖是Maven中最关键的部分，我们之所以在工程中使用Maven，就是因为它的依赖管理功能。<br>自动下载，统一依赖管理，避免jar包引起的错误。</li>\n</ol>\n<h3 id=\"maven安装\"><a href=\"#maven安装\" class=\"headerlink\" title=\"maven安装\"></a>maven安装</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> maven<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装完成后，查看安装文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\nmacbookpro <span class=\"token operator\">&gt;</span> brew list maven\n/usr/local/Cellar/maven/3.6.1/bin/mvn\n/usr/local/Cellar/maven/3.6.1/bin/mvnDebug\n/usr/local/Cellar/maven/3.6.1/bin/mvnyjp\n/usr/local/Cellar/maven/3.6.1/libexec/bin/ <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> files<span class=\"token punctuation\">)</span>\n/usr/local/Cellar/maven/3.6.1/libexec/boot/plexus-classworlds-2.6.0.jar\n/usr/local/Cellar/maven/3.6.1/libexec/conf/ <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> files<span class=\"token punctuation\">)</span>\n/usr/local/Cellar/maven/3.6.1/libexec/lib/ <span class=\"token punctuation\">(</span><span class=\"token number\">63</span> files<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>测试一下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">macbookpro<span class=\"token operator\">&gt;</span> mvn --v\nApache Maven <span class=\"token number\">3.6</span>.1 <span class=\"token punctuation\">(</span>d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555<span class=\"token punctuation\">;</span> <span class=\"token number\">2019</span>-04-05T03:00:29+08:00<span class=\"token punctuation\">)</span>\nMaven home: /usr/local/Cellar/maven/3.6.1/libexec\nJava version: <span class=\"token number\">1.8</span>.0_172, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/jre\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: <span class=\"token string\">\"mac os x\"</span>, version: <span class=\"token string\">\"10.15\"</span>, arch: <span class=\"token string\">\"x86_64\"</span>, family: <span class=\"token string\">\"mac\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以使用<code>mvn --help</code>查看帮助</p>\n<h3 id=\"maven的核心概念\"><a href=\"#maven的核心概念\" class=\"headerlink\" title=\"maven的核心概念\"></a>maven的核心概念</h3><blockquote>\n<p>约定的目录结构<br>POM<br>坐标<br>依赖<br>仓库<br>生命周期/插件/目标<br>继承<br>聚合</p>\n</blockquote>\n<p>以下内容就是按上面进行展开的</p>\n<h4 id=\"使用idea创建一个maven工程\"><a href=\"#使用idea创建一个maven工程\" class=\"headerlink\" title=\"使用idea创建一个maven工程\"></a>使用idea创建一个maven工程</h4><ol>\n<li><p>idea支持创建maven项目<br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/NFqnYK.jpg\"></p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Oo9fzo.jpg\"></p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/ZhCzDy.jpg\"></p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/C70JLZ.jpg\"></p>\n</li>\n</ol>\n<p>pom.xml文件为Maven工程的核心配置文件</p>\n<ol start=\"2\">\n<li>为什么要遵循约定的目录结构呢？<br>我们在开发中如果需要让第三方工具或框架知道我们自己创建的资源在哪，那么基本上就是两种方式：<br>①以配置文件的方式明确告诉框架 如 &lt; param-value&gt;classpath:spring-context.xml &lt; /param-value&gt;<br>②遵循框架内部已经存在的约定 如log4j的配置文件名规定必须为 log4j.properties 或 log4j.xml ；Maven 使用约定的目录结构</li>\n</ol>\n<h4 id=\"maven常用命令\"><a href=\"#maven常用命令\" class=\"headerlink\" title=\"maven常用命令\"></a>maven常用命令</h4><ol>\n<li>注意：执行与构建过程相关的Maven命令，必须进入pom.xml 所在的目录。</li>\n<li>常用命令<blockquote>\n<p>mvn clean : 清理<br>mvn compile : 编译主程序<br>mvn test-compile : 编译测试程序<br>mvn test : 执行测试<br>mvn package : 打包<br>mvn install ： 安装<br>mvn site ：生成站点</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"maven网络问题\"><a href=\"#maven网络问题\" class=\"headerlink\" title=\"maven网络问题\"></a>maven网络问题</h4><ol>\n<li>Maven 的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须有特定的插件来完成。而插件本身不包含在Maven核心程序中。</li>\n<li>当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找。</li>\n<li>本地仓库的默认位置：~/.m2/repository</li>\n<li>Maven核心程序如果在本地仓库中找不到需要的插件，那么它会自动连接外网，到中央仓库下载。</li>\n<li>如果此时无法连接外网，则构建失败。</li>\n<li>修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好的目录下查找插件<br>①找到Maven解压目录\\conf\\settings.xml<br>②在setting.xml 文件中找到 localRepository 标签<br>③将 &lt; localRepository&gt;/path/to/local/repo&lt; /localRepository&gt;从注释中取出<br>④将标签体内容修改为自定义的Maven仓库目录</li>\n</ol>\n<p>如果网络慢，也可以配置阿里的国内镜像。</p>\n<h2 id=\"POM\"><a href=\"#POM\" class=\"headerlink\" title=\"POM\"></a>POM</h2><ol>\n<li><p>含义：Project Object Model 项目对象模型<br>DOM ：Document Object Model 文档对象模型</p>\n</li>\n<li><p>pom.xml 对于 Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置。<br>重要程度相当于web.xml 对于动态web工程</p>\n</li>\n</ol>\n<p>POM 中可以指定以下配置：</p>\n<blockquote>\n<p>项目依赖<br>插件<br>执行目标<br>项目构建 profile<br>项目版本<br>项目开发者列表<br>相关邮件列表信息</p>\n</blockquote>\n<p>示例：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0\n    http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n \n    <span class=\"token comment\">&lt;!-- 模型版本 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">&gt;</span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.companyname.project-group<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n \n    <span class=\"token comment\">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>project<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n \n    <span class=\"token comment\">&lt;!-- 版本号 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。也就是下面需要说的 坐标</p>\n<h3 id=\"坐标\"><a href=\"#坐标\" class=\"headerlink\" title=\"坐标\"></a>坐标</h3><p>坐标就是用来定位的</p>\n<p>Maven的坐标：<br>使用下面三个向量在仓库中唯一定位一个Maven工程<br>①groupid:公司或组织域名倒序+项目名<br><code>&lt;groupId&gt;com.jackson.youdi&lt;/groupId&gt;</code><br>②artifactid:模块名<br><code>&lt;artifactId&gt;TheOne&lt;/artifactId&gt;</code><br>③version：版本<br><code>&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</code></p>\n<ol start=\"3\">\n<li>Maven 工程的坐标与仓库中路径的对应关系,下面给两个例子<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt; groupId&gt;org.springframework&lt; /groupId&gt;\n&lt; artifactId&gt;spring-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n&lt; version&gt;4.0.0.RELEASE&lt; /version&gt;\n\norg/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>8.0.18<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n\nmysql/mysql-connector-java/8.0.18/mysql-connector-java-8.0.18.jar\n绝对路径： ~/.m2/repository/mysql/mysql-connector-java/8.0.18/mysql-connector-java-8.0.18.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>注意：我们自己的 Maven 工程必须执行安装操作才会进入仓库。安装的命令是：mvn install</p>\n<h3 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h3><ol>\n<li><p>仓库的分类<br>①本地仓库：当前电脑上部署的仓库目录，为当前电脑上所有Maven工程服务<br>②远程仓库<br>（1）私服：搭建在局域网环境中，为局域网范围内的所有Maven工程服务<br>（2）中央仓库：假设在Internet上，为全世界所有Maven工程服务<br>（3）中央仓库镜像：为了分担中央仓库流量，提升用户访问速度</p>\n</li>\n<li><p>仓库中保存的内容：Maven工程<br>①Maven自身所需要的插件<br>②第三方框架或工具的jar包<br>③我们自己开发的Maven工程</p>\n</li>\n</ol>\n<p>不管是什么样的 jar 包，在仓库中都是按照坐标生成目录结构，所以可以通过统一的方式查询或依赖。</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/i512Gx.jpg\"></p>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><ol>\n<li>当 A jar 包用到了 B jar 包中的某些类时，A 就对 B 产生了依赖，这是概念上的描述。Maven解析依赖信息时会到仓库中查找被依赖的jar包。<br>对于我们自己开发的Maven工程，要使用mvn install 命令安装后就可以进入仓库。</li>\n</ol>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--    dependecies 项目运行时的jar包--&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>8.0.18<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>依赖的范围<br>①从项目结构角度理解compile和test的区别</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── main\n│   ├── java  // compile范围依赖\n│   └── resources\n└── <span class=\"token builtin class-name\">test</span>\n    └── java  //  test范围依赖<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>compile范围依赖<br>》对主程序是否有效：有效<br>》对测试程序是否有效：有效<br>》是否参与打包：参与<br>》是否参与部署：参与<br>》典型例子：spring-core</p>\n<p>test范围依赖<br>》对主程序是否有效：无效<br>》对测试程序是否有效：有效<br>》是否参与打包：不参与<br>》是否参与部署：不参与<br>》典型例子：Junit</p>\n<p>②从开发和运行这两个阶段理解compile 和 provided 的区别</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/R1yMAr.jpg\"></p>\n<p>》对主程序是否有效：有效<br>》对测试程序是否有效：有效<br>》是否参与打包：不参与<br>》是否参与部署：不参与<br>》典型例子：Servlet-api.jar</p>\n<p>③有效性总结</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>compile</th>\n<th>test</th>\n<th>provided</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主程序</td>\n<td>√</td>\n<td>x</td>\n<td>√</td>\n</tr>\n<tr>\n<td>测试程序</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>参与部署</td>\n<td>√</td>\n<td>x</td>\n<td>x</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>依赖的传递性<br>一种相当常见的情况，比如说 A 依赖于其他库 B。如果，另外一个项目 C 想要使用 A ，那么 C 项目也需要使用库 B。<br>Maven 可以避免去搜索所有所需库的需求。Maven 通过读取项目文件（pom.xml），找出它们项目之间的依赖关系。<br>我们需要做的只是在每个项目的 pom 中定义好直接的依赖关系。其他的事情 Maven 会帮我们搞定。<br>通过可传递性的依赖，所有被包含的库的图形会快速的增长。当有重复库时，可能出现的情形将会持续上升。Maven 提供一些功能来控制可传递的依赖的程度。</li>\n</ol>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Ljs75u.jpg\"></p>\n<p>各个构建环节执行的顺序：不能打乱顺序，必须按照既定的正确顺序来执行。<br>Maven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。<br>Maven核心程序为了更好的实现自动化构建，按照这一特点执行生命周期中各个阶段：不论现在要执行生命周期中的哪一阶段，都是从这个生命周期最初的位置开始执行。<br>Maven有三套相互独立的生命周期，分别是：</p>\n<h4 id=\"生命周期-1\"><a href=\"#生命周期-1\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><p>①Clean Lifecycle 在进行真正的构建之前进行一些清理工作。<br>②Default Lifecycle 构建的核心部分，编译、测试、打包、安装、部署等等。<br>③Site Lifecycle 生成项目报告，站点，发布站点。</p>\n<p>他们相互独立。也可以直接运行 mvn clean install site 运行所有这三套生命周期。</p>\n<p>每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行 mvn clean，这个 clean 是 Clean 生命周期的一个阶段。有 Clean 生命周期，也有 clean 阶段。</p>\n<h4 id=\"Clean声明周期\"><a href=\"#Clean声明周期\" class=\"headerlink\" title=\"Clean声明周期\"></a>Clean声明周期</h4><p>①pre-clean 执行一些需要在clean之前完成的工作<br>②clean 移除所有上一次构建生成的文件<br>③post-clean 执行一些需要在clean 之后立刻完成的工作</p>\n<h4 id=\"Default声明周期\"><a href=\"#Default声明周期\" class=\"headerlink\" title=\"Default声明周期\"></a>Default声明周期</h4><p>Default 生命周期是 Maven 生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：</p>\n<blockquote>\n<p>validate<br>generate-sources<br>process-sources<br>generate-resources<br>process-resources 复制并处理资源文件，至目标目录，准备打包。<br>compile 编译项目的源代码。<br>process-classes<br>generate-test-sources<br>process-test-sources<br>generate-test-resources<br>process-test-resources 复制并处理资源文件，至目标测试目录。<br>test-compile 编译测试源代码。<br>process-test-classes<br>test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。<br>prepare-package<br>package 接受编译好的代码，打包成可发布的格式，如 JAR。<br>pre-integration-test<br>integration-test<br>post-integration-test<br>verify<br>install 将包安装至本地仓库，以让其它项目依赖。<br>deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享或部署到服务器上运行。</p>\n</blockquote>\n<h4 id=\"Site生命周期\"><a href=\"#Site生命周期\" class=\"headerlink\" title=\"Site生命周期\"></a>Site生命周期</h4><p>①pre-site 执行一些需要在生成站点文档之前完成的工作<br>②site 生成项目的站点文档<br>③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备<br>④site-deploy 将生成的站点文档部署到特定的服务器上</p>\n<p>这里经常用到的是 site 阶段和 site-deploy 阶段，用以生成和发布 Maven 站点，这可是 Maven 相当强大的功能，Manager 比较喜欢，文档及统计数据自动生成，很好看。</p>\n<h4 id=\"插件和目标\"><a href=\"#插件和目标\" class=\"headerlink\" title=\"插件和目标\"></a>插件和目标</h4><p>Maven的核心仅仅定义了抽象的声明周期，具体的任务都是交由插件完成的。<br>每个插件都实现多个功能，每个功能就是一个插件目标<br>Maven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。<br>可以将目标看做“调用插件功能的命令”</p>\n<p>例如：compile 就是插件 maven-compiler-plugin 的一个目标；pre-clean 是插件 maven-clean-plugin 的一个目标。</p>\n<p>以上内容来源于网络，推荐给大家比较好的资源： <a href=\"https://www.runoob.com/maven/maven-tutorial.html\">https://www.runoob.com/maven/maven-tutorial.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在学习的技术越来越多，写的代码越来越多，会发现代码管理越来越复杂，就自然有了包的概念。我个人前面的jar包都是手动管理的，由于，我经常使用python的pip以及golang的 govender以及 gomods，所以，会想到java的包管理工具，查了一下，发现maven很强大，可以极大的提高开发效率，故学习，下面是学习过程中整理的笔记。</p>\n<h2 id=\"目前在技术开发中存在的问题\"><a href=\"#目前在技术开发中存在的问题\" class=\"headerlink\" title=\"目前在技术开发中存在的问题\"></a>目前在技术开发中存在的问题</h2><ol>\n<li><p>一个项目就是一个工程<br>如果项目非常庞大，就不适合继续使用package来划分模块。最好是每一个模块对应一个项目，利于分工协作。<br>借助于maven就可以将一个项目拆分成多个工程。</p>\n</li>\n<li><p>项目中需要的jar包必须手动“复制”、”粘贴” 到WEB-INF/lib 项目下<br>带来的问题：同样的jar包文件重复出现在不同的项目工程中，一方面浪费存储空间，另外也让工程比较臃肿。<br>借助Maven，可以将jar包仅仅保存在“仓库”中，有需要使用的工程“引用”这个文件，并不需要重复复制。</p>\n</li>\n<li><p>jar包需要别人替我们准备好，或到官网下载<br>所有知名框架或第三方工具jar包已经按照统一规范放在了Maven的中央仓库中。</p>\n</li>\n<li><p>一个jar包依赖的其他jar包需要自己手动加到项目中<br>Maven会自动将被依赖的jar包导入进来。</p>\n</li>\n</ol>\n<h2 id=\"maven是什么\"><a href=\"#maven是什么\" class=\"headerlink\" title=\"maven是什么\"></a>maven是什么</h2><ol>\n<li>Maven 是 Apache 软件基金会组织维护的一款自动化构建工具，专注服务于 Java 平台的项目构建和依赖管理 。Maven 这个单词的本意是：专家，内行。读音是[‘meɪv(ə)n]或[‘mevn]。<br>构建工具的发展：Make→Ant→Maven→Gradle</li>\n</ol>\n<ol start=\"2\">\n<li>构建：就是以我们编写的Java代码、框架配置文件、国际化等其他资源文件、jsp页面和图片等静态资源作为“原材料”，去“生产”出一个可以运行的项目的过程。<br>理想的项目构建：高度自动化，跨平台，可重用的组件，标准化的</li>\n</ol>\n<p>3.构建过程中的几个主要环节<br>①清理：删除以前的编译结果，为重新编译做好准备。<br>②编译：将Java源程序编译为字节码文件。<br>③测试：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。<br>④报告：将每一次测试后以标准的格式记录和展示测试结果。<br>⑤打包：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对应jar包，Web工程对象war包。<br>⑥安装：在Maven环境下特指将打包的结果——Jar包或War包安装到本地仓库中。<br>⑦部署：将打包的结果部署到远程仓库或将war包部署到服务器上运行。</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/PeaY9R.jpg\"></p>\n<p>日常开发中，如果不通过maven，以上步骤全部是程序员自己手动一个一个的去编译执行操作，有了maven， 只需要简单的一个命令，全部搞定，解放双手。</p>\n<ol start=\"4\">\n<li>什么是依赖？为什么要进行依赖管理？<br>依赖是Maven中最关键的部分，我们之所以在工程中使用Maven，就是因为它的依赖管理功能。<br>自动下载，统一依赖管理，避免jar包引起的错误。</li>\n</ol>\n<h3 id=\"maven安装\"><a href=\"#maven安装\" class=\"headerlink\" title=\"maven安装\"></a>maven安装</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> maven<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装完成后，查看安装文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\nmacbookpro <span class=\"token operator\">></span> brew list maven\n/usr/local/Cellar/maven/3.6.1/bin/mvn\n/usr/local/Cellar/maven/3.6.1/bin/mvnDebug\n/usr/local/Cellar/maven/3.6.1/bin/mvnyjp\n/usr/local/Cellar/maven/3.6.1/libexec/bin/ <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> files<span class=\"token punctuation\">)</span>\n/usr/local/Cellar/maven/3.6.1/libexec/boot/plexus-classworlds-2.6.0.jar\n/usr/local/Cellar/maven/3.6.1/libexec/conf/ <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> files<span class=\"token punctuation\">)</span>\n/usr/local/Cellar/maven/3.6.1/libexec/lib/ <span class=\"token punctuation\">(</span><span class=\"token number\">63</span> files<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>测试一下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">macbookpro<span class=\"token operator\">></span> mvn --v\nApache Maven <span class=\"token number\">3.6</span>.1 <span class=\"token punctuation\">(</span>d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555<span class=\"token punctuation\">;</span> <span class=\"token number\">2019</span>-04-05T03:00:29+08:00<span class=\"token punctuation\">)</span>\nMaven home: /usr/local/Cellar/maven/3.6.1/libexec\nJava version: <span class=\"token number\">1.8</span>.0_172, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/jre\nDefault locale: zh_CN, platform encoding: UTF-8\nOS name: <span class=\"token string\">\"mac os x\"</span>, version: <span class=\"token string\">\"10.15\"</span>, arch: <span class=\"token string\">\"x86_64\"</span>, family: <span class=\"token string\">\"mac\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以使用<code>mvn --help</code>查看帮助</p>\n<h3 id=\"maven的核心概念\"><a href=\"#maven的核心概念\" class=\"headerlink\" title=\"maven的核心概念\"></a>maven的核心概念</h3><blockquote>\n<p>约定的目录结构<br>POM<br>坐标<br>依赖<br>仓库<br>生命周期/插件/目标<br>继承<br>聚合</p>\n</blockquote>\n<p>以下内容就是按上面进行展开的</p>\n<h4 id=\"使用idea创建一个maven工程\"><a href=\"#使用idea创建一个maven工程\" class=\"headerlink\" title=\"使用idea创建一个maven工程\"></a>使用idea创建一个maven工程</h4><ol>\n<li><p>idea支持创建maven项目<br><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/NFqnYK.jpg\"></p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Oo9fzo.jpg\"></p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/ZhCzDy.jpg\"></p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/C70JLZ.jpg\"></p>\n</li>\n</ol>\n<p>pom.xml文件为Maven工程的核心配置文件</p>\n<ol start=\"2\">\n<li>为什么要遵循约定的目录结构呢？<br>我们在开发中如果需要让第三方工具或框架知道我们自己创建的资源在哪，那么基本上就是两种方式：<br>①以配置文件的方式明确告诉框架 如 &lt; param-value&gt;classpath:spring-context.xml &lt; /param-value&gt;<br>②遵循框架内部已经存在的约定 如log4j的配置文件名规定必须为 log4j.properties 或 log4j.xml ；Maven 使用约定的目录结构</li>\n</ol>\n<h4 id=\"maven常用命令\"><a href=\"#maven常用命令\" class=\"headerlink\" title=\"maven常用命令\"></a>maven常用命令</h4><ol>\n<li>注意：执行与构建过程相关的Maven命令，必须进入pom.xml 所在的目录。</li>\n<li>常用命令<blockquote>\n<p>mvn clean : 清理<br>mvn compile : 编译主程序<br>mvn test-compile : 编译测试程序<br>mvn test : 执行测试<br>mvn package : 打包<br>mvn install ： 安装<br>mvn site ：生成站点</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"maven网络问题\"><a href=\"#maven网络问题\" class=\"headerlink\" title=\"maven网络问题\"></a>maven网络问题</h4><ol>\n<li>Maven 的核心程序中仅仅定义了抽象的生命周期，但是具体的工作必须有特定的插件来完成。而插件本身不包含在Maven核心程序中。</li>\n<li>当我们执行的Maven命令需要用到某些插件时，Maven核心程序会首先到本地仓库中查找。</li>\n<li>本地仓库的默认位置：~/.m2/repository</li>\n<li>Maven核心程序如果在本地仓库中找不到需要的插件，那么它会自动连接外网，到中央仓库下载。</li>\n<li>如果此时无法连接外网，则构建失败。</li>\n<li>修改默认本地仓库的位置可以让Maven核心程序到我们事先准备好的目录下查找插件<br>①找到Maven解压目录\\conf\\settings.xml<br>②在setting.xml 文件中找到 localRepository 标签<br>③将 &lt; localRepository&gt;/path/to/local/repo&lt; /localRepository&gt;从注释中取出<br>④将标签体内容修改为自定义的Maven仓库目录</li>\n</ol>\n<p>如果网络慢，也可以配置阿里的国内镜像。</p>\n<h2 id=\"POM\"><a href=\"#POM\" class=\"headerlink\" title=\"POM\"></a>POM</h2><ol>\n<li><p>含义：Project Object Model 项目对象模型<br>DOM ：Document Object Model 文档对象模型</p>\n</li>\n<li><p>pom.xml 对于 Maven工程是核心配置文件，与构建过程相关的一切设置都在这个文件中进行配置。<br>重要程度相当于web.xml 对于动态web工程</p>\n</li>\n</ol>\n<p>POM 中可以指定以下配置：</p>\n<blockquote>\n<p>项目依赖<br>插件<br>执行目标<br>项目构建 profile<br>项目版本<br>项目开发者列表<br>相关邮件列表信息</p>\n</blockquote>\n<p>示例：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0\n    http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n \n    <span class=\"token comment\">&lt;!-- 模型版本 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.companyname.project-group<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n \n    <span class=\"token comment\">&lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>project<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n \n    <span class=\"token comment\">&lt;!-- 版本号 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。也就是下面需要说的 坐标</p>\n<h3 id=\"坐标\"><a href=\"#坐标\" class=\"headerlink\" title=\"坐标\"></a>坐标</h3><p>坐标就是用来定位的</p>\n<p>Maven的坐标：<br>使用下面三个向量在仓库中唯一定位一个Maven工程<br>①groupid:公司或组织域名倒序+项目名<br><code>&lt;groupId&gt;com.jackson.youdi&lt;/groupId&gt;</code><br>②artifactid:模块名<br><code>&lt;artifactId&gt;TheOne&lt;/artifactId&gt;</code><br>③version：版本<br><code>&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</code></p>\n<ol start=\"3\">\n<li>Maven 工程的坐标与仓库中路径的对应关系,下面给两个例子<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt; groupId>org.springframework&lt; /groupId>\n&lt; artifactId>spring-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n&lt; version>4.0.0.RELEASE&lt; /version>\n\norg/springframework/spring-core/4.0.0.RELEASE/spring-core-4.0.0.RELEASE.jar\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.18<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n\nmysql/mysql-connector-java/8.0.18/mysql-connector-java-8.0.18.jar\n绝对路径： ~/.m2/repository/mysql/mysql-connector-java/8.0.18/mysql-connector-java-8.0.18.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p>注意：我们自己的 Maven 工程必须执行安装操作才会进入仓库。安装的命令是：mvn install</p>\n<h3 id=\"仓库\"><a href=\"#仓库\" class=\"headerlink\" title=\"仓库\"></a>仓库</h3><ol>\n<li><p>仓库的分类<br>①本地仓库：当前电脑上部署的仓库目录，为当前电脑上所有Maven工程服务<br>②远程仓库<br>（1）私服：搭建在局域网环境中，为局域网范围内的所有Maven工程服务<br>（2）中央仓库：假设在Internet上，为全世界所有Maven工程服务<br>（3）中央仓库镜像：为了分担中央仓库流量，提升用户访问速度</p>\n</li>\n<li><p>仓库中保存的内容：Maven工程<br>①Maven自身所需要的插件<br>②第三方框架或工具的jar包<br>③我们自己开发的Maven工程</p>\n</li>\n</ol>\n<p>不管是什么样的 jar 包，在仓库中都是按照坐标生成目录结构，所以可以通过统一的方式查询或依赖。</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/i512Gx.jpg\"></p>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><ol>\n<li>当 A jar 包用到了 B jar 包中的某些类时，A 就对 B 产生了依赖，这是概念上的描述。Maven解析依赖信息时会到仓库中查找被依赖的jar包。<br>对于我们自己开发的Maven工程，要使用mvn install 命令安装后就可以进入仓库。</li>\n</ol>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--    dependecies 项目运行时的jar包--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.18<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>依赖的范围<br>①从项目结构角度理解compile和test的区别</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── main\n│   ├── java  // compile范围依赖\n│   └── resources\n└── <span class=\"token builtin class-name\">test</span>\n    └── java  //  test范围依赖<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>compile范围依赖<br>》对主程序是否有效：有效<br>》对测试程序是否有效：有效<br>》是否参与打包：参与<br>》是否参与部署：参与<br>》典型例子：spring-core</p>\n<p>test范围依赖<br>》对主程序是否有效：无效<br>》对测试程序是否有效：有效<br>》是否参与打包：不参与<br>》是否参与部署：不参与<br>》典型例子：Junit</p>\n<p>②从开发和运行这两个阶段理解compile 和 provided 的区别</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/R1yMAr.jpg\"></p>\n<p>》对主程序是否有效：有效<br>》对测试程序是否有效：有效<br>》是否参与打包：不参与<br>》是否参与部署：不参与<br>》典型例子：Servlet-api.jar</p>\n<p>③有效性总结</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>compile</th>\n<th>test</th>\n<th>provided</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主程序</td>\n<td>√</td>\n<td>x</td>\n<td>√</td>\n</tr>\n<tr>\n<td>测试程序</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>参与部署</td>\n<td>√</td>\n<td>x</td>\n<td>x</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>依赖的传递性<br>一种相当常见的情况，比如说 A 依赖于其他库 B。如果，另外一个项目 C 想要使用 A ，那么 C 项目也需要使用库 B。<br>Maven 可以避免去搜索所有所需库的需求。Maven 通过读取项目文件（pom.xml），找出它们项目之间的依赖关系。<br>我们需要做的只是在每个项目的 pom 中定义好直接的依赖关系。其他的事情 Maven 会帮我们搞定。<br>通过可传递性的依赖，所有被包含的库的图形会快速的增长。当有重复库时，可能出现的情形将会持续上升。Maven 提供一些功能来控制可传递的依赖的程度。</li>\n</ol>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Ljs75u.jpg\"></p>\n<p>各个构建环节执行的顺序：不能打乱顺序，必须按照既定的正确顺序来执行。<br>Maven的核心程序中定义了抽象的生命周期，生命周期中各个阶段的具体任务是由插件来完成的。<br>Maven核心程序为了更好的实现自动化构建，按照这一特点执行生命周期中各个阶段：不论现在要执行生命周期中的哪一阶段，都是从这个生命周期最初的位置开始执行。<br>Maven有三套相互独立的生命周期，分别是：</p>\n<h4 id=\"生命周期-1\"><a href=\"#生命周期-1\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><p>①Clean Lifecycle 在进行真正的构建之前进行一些清理工作。<br>②Default Lifecycle 构建的核心部分，编译、测试、打包、安装、部署等等。<br>③Site Lifecycle 生成项目报告，站点，发布站点。</p>\n<p>他们相互独立。也可以直接运行 mvn clean install site 运行所有这三套生命周期。</p>\n<p>每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行 mvn clean，这个 clean 是 Clean 生命周期的一个阶段。有 Clean 生命周期，也有 clean 阶段。</p>\n<h4 id=\"Clean声明周期\"><a href=\"#Clean声明周期\" class=\"headerlink\" title=\"Clean声明周期\"></a>Clean声明周期</h4><p>①pre-clean 执行一些需要在clean之前完成的工作<br>②clean 移除所有上一次构建生成的文件<br>③post-clean 执行一些需要在clean 之后立刻完成的工作</p>\n<h4 id=\"Default声明周期\"><a href=\"#Default声明周期\" class=\"headerlink\" title=\"Default声明周期\"></a>Default声明周期</h4><p>Default 生命周期是 Maven 生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：</p>\n<blockquote>\n<p>validate<br>generate-sources<br>process-sources<br>generate-resources<br>process-resources 复制并处理资源文件，至目标目录，准备打包。<br>compile 编译项目的源代码。<br>process-classes<br>generate-test-sources<br>process-test-sources<br>generate-test-resources<br>process-test-resources 复制并处理资源文件，至目标测试目录。<br>test-compile 编译测试源代码。<br>process-test-classes<br>test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。<br>prepare-package<br>package 接受编译好的代码，打包成可发布的格式，如 JAR。<br>pre-integration-test<br>integration-test<br>post-integration-test<br>verify<br>install 将包安装至本地仓库，以让其它项目依赖。<br>deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享或部署到服务器上运行。</p>\n</blockquote>\n<h4 id=\"Site生命周期\"><a href=\"#Site生命周期\" class=\"headerlink\" title=\"Site生命周期\"></a>Site生命周期</h4><p>①pre-site 执行一些需要在生成站点文档之前完成的工作<br>②site 生成项目的站点文档<br>③post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备<br>④site-deploy 将生成的站点文档部署到特定的服务器上</p>\n<p>这里经常用到的是 site 阶段和 site-deploy 阶段，用以生成和发布 Maven 站点，这可是 Maven 相当强大的功能，Manager 比较喜欢，文档及统计数据自动生成，很好看。</p>\n<h4 id=\"插件和目标\"><a href=\"#插件和目标\" class=\"headerlink\" title=\"插件和目标\"></a>插件和目标</h4><p>Maven的核心仅仅定义了抽象的声明周期，具体的任务都是交由插件完成的。<br>每个插件都实现多个功能，每个功能就是一个插件目标<br>Maven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。<br>可以将目标看做“调用插件功能的命令”</p>\n<p>例如：compile 就是插件 maven-compiler-plugin 的一个目标；pre-clean 是插件 maven-clean-plugin 的一个目标。</p>\n<p>以上内容来源于网络，推荐给大家比较好的资源： <a href=\"https://www.runoob.com/maven/maven-tutorial.html\">https://www.runoob.com/maven/maven-tutorial.html</a></p>\n"},{"title":"supervisor源码解析","date":"2021-08-01T14:38:07.000Z","top":true,"hide":false,"cover":true,"toc":true,"mathjax":false,"summary":"通过源码介绍supervisor，学习一些通用的软件架构和技巧","keywords":["go","supervisor","源码","python"],"_content":"\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/mTUPK0.jpg)\n\n今天介绍一下supervisor的源码。 supervisor是python写的。如果你不懂python，我也介绍一下golang版的实现。 如果你不会，其他语言的实现，应该也有，github找一下。 自己读一下。实现原理应该都是一样的。\n\n[源码](https://github.com/Supervisor/supervisor)\n\n\n## supervisor的组件\n### 1. supervisord\n\n>服务器主进程名为supervisord。它负责在自己的调用中启动子程序，响应来自客户端的命令，重新启动崩溃或退出的子进程，记录其子进程stdout和stderr 输出，以及生成和处理与子进程生命周期中的点相对应的“事件”。\n\n服务器进程使用配置文件。这通常位于/etc/supervisord.conf中。此配置文件是“Windows-INI”样式配置文件。通过适当的文件系统权限保持此文件的安全非常重要，因为它可能包含未加密的用户名和密码。\n\n### 2. supervisorctl\n\n主进程的命令行客户端部分名为 supervisorctl。它为supervisord提供的功能提供了类似shell的界面。从 supervisorctl，用户可以连接到不同的 supervisord进程（一次一个），获取由子进程控制的状态，停止和启动子进程，并获取supervisord的运行进程列表。\n\n命令行客户机通过UNIX域套接字或internet (TCP)套接字与服务器通信。服务器可以断言客户机的用户应该在执行命令之前提供身份验证凭据。客户机进程通常使用与服务器相同的配置文件，但是其中包含[supervisorctl]部分的任何配置文件都可以工作。\n\n### 3. Web Server\n\n如果您针对internet套接字启动了adminord，那么可以通过浏览器访问具有与supervise orctl类似功能的(稀疏的)web用户界面。在激活配置文件的`[inet_http_server]`部分之后，访问服务器URL(例如`http://localhost:9001/`)，通过web界面查看和控制进程状态。\n\n### 4. XML-RPC Interface\n服务于web UI的同一个HTTP服务器提供一个XML-RPC接口，该接口可用于询问和控制管理器及其运行的程序。参见XML-RPC API文档。\n\n\n### 5. 目录结构\n\n整体看一下目录结构：\n\n```bash\n├── __init__.py\n├── childutils.py\n├── compat.py\n├── confecho.py\n├── datatypes.py\n├── dispatchers.py\n├── events.py\n├── http.py\n├── http_client.py\n├── loggers.py\n├── medusa\n│   ├── CHANGES.txt\n│   ├── LICENSE.txt\n│   ├── README.txt\n│   ├── TODO.txt\n│   ├── __init__.py\n│   ├── asynchat_25.py\n│   ├── asyncore_25.py\n│   ├── auth_handler.py\n│   ├── counter.py\n│   ├── default_handler.py\n│   ├── docs\n│   │   ├── README.html\n│   │   ├── async_blurbs.txt\n│   │   ├── composing_producers.gif\n│   │   ├── data_flow.gif\n│   │   ├── data_flow.html\n│   │   ├── producers.gif\n│   │   ├── programming.html\n│   │   ├── proxy_notes.txt\n│   │   ├── threads.txt\n│   │   └── tkinter.txt\n│   ├── filesys.py\n│   ├── http_date.py\n│   ├── http_server.py\n│   ├── logger.py\n│   ├── producers.py\n│   ├── util.py\n│   └── xmlrpc_handler.py\n├── options.py\n├── pidproxy.py\n├── poller.py\n├── process.py\n├── rpcinterface.py\n├── scripts\n│   ├── loop_eventgen.py\n│   ├── loop_listener.py\n│   ├── sample_commevent.py\n│   ├── sample_eventlistener.py\n│   └── sample_exiting_eventlistener.py\n├── skel\n│   └── sample.conf\n├── socket_manager.py\n├── states.py\n├── supervisorctl.py\n├── supervisord.py\n├── tests\n│   ├── __init__.py\n│   ├── base.py\n│   ├── fixtures\n│   │   ├── donothing.conf\n│   │   ├── example\n│   │   │   └── included.conf\n│   │   ├── hello.sh\n│   │   ├── include.conf\n│   │   ├── issue-1054.conf\n│   │   ├── issue-565.conf\n│   │   ├── issue-638.conf\n│   │   ├── issue-663.conf\n│   │   ├── issue-664.conf\n│   │   ├── issue-835.conf\n│   │   ├── issue-836.conf\n│   │   ├── listener.py\n│   │   ├── spew.py\n│   │   └── unkillable_spew.py\n│   ├── test_childutils.py\n│   ├── test_confecho.py\n│   ├── test_datatypes.py\n│   ├── test_dispatchers.py\n│   ├── test_end_to_end.py\n│   ├── test_events.py\n│   ├── test_http.py\n│   ├── test_http_client.py\n│   ├── test_loggers.py\n│   ├── test_options.py\n│   ├── test_poller.py\n│   ├── test_process.py\n│   ├── test_rpcinterfaces.py\n│   ├── test_socket_manager.py\n│   ├── test_states.py\n│   ├── test_supervisorctl.py\n│   ├── test_supervisord.py\n│   ├── test_web.py\n│   └── test_xmlrpc.py\n├── ui\n│   ├── images\n│   │   ├── button_refresh.gif\n│   │   ├── button_restart.gif\n│   │   ├── button_stop.gif\n│   │   ├── icon.png\n│   │   ├── rule.gif\n│   │   ├── state0.gif\n│   │   ├── state1.gif\n│   │   ├── state2.gif\n│   │   ├── state3.gif\n│   │   └── supervisor.gif\n│   ├── status.html\n│   ├── stylesheets\n│   │   └── supervisor.css\n│   └── tail.html\n├── version.txt\n├── web.py\n└── xmlrpc.py\n```\n\n\n整体架构\n\n\n源码学习按上面的分块进行介绍\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/t4Mc7M.jpg)\n\n\n## supervisord\n先找到入口程序\n```python\n# Main program\ndef main(args=None, test=False):\n    assert os.name == \"posix\", \"This code makes Unix-specific assumptions\"\n    # if we hup, restart by making a new Supervisor()\n    first = True\n    while 1:\n        options = ServerOptions()\n        options.realize(args, doc=__doc__)\n        options.first = first\n        options.test = test\n        if options.profile_options:\n            sort_order, callers = options.profile_options\n            profile('go(options)', globals(), locals(), sort_order, callers)\n        else:\n            go(options)\n        options.close_httpservers()\n        options.close_logger()\n        first = False\n        if test or (options.mood < SupervisorStates.RESTARTING):\n            break\n\nif __name__ == \"__main__\": # pragma: no cover\n    main()\n```\n\n从上面看出， main()中有个死循环一直只工作。\n下面详细介绍，在循环中做了哪些工作？\n\n```python\n# Main program\ndef main(args=None, test=False):\n    assert os.name == \"posix\", \"This code makes Unix-specific assumptions\"\n    # if we hup, restart by making a new Supervisor()\n    first = True\n    while 1:\n        options = ServerOptions() // 配置\n        options.realize(args, doc=__doc__)\n        options.first = first\n        options.test = test\n        if options.profile_options:\n            sort_order, callers = options.profile_options\n            profile('go(options)', globals(), locals(), sort_order, callers)\n        else:\n            go(options) // 加载配置开始运行\n        options.close_httpservers()\n        options.close_logger()\n        first = False\n        if test or (options.mood < SupervisorStates.RESTARTING):\n            break\n\ndef go(options): # pragma: no cover\n    d = Supervisor(options) // 实例化一个Supervisor对象\n    try:\n    d.main()  // 运行main()函数\n    except asyncore.ExitNow:\n        pass\n```\n\n### `Supervisor`类的代码\n\n```python\nclass Supervisor:\n    stopping = False  # set after we detect that we are handling a stop request\n    lastshutdownreport = 0  # throttle for delayed process error reports at stop\n    process_groups = None  # map of process group name to process group object\n    stop_groups = None  # list used for priority ordered shutdown\n\n    def __init__(self, options): # 初始化\n        self.options = options # 配置\n        self.process_groups = {}\n        self.ticks = {}\n\n    def main(self):\n        if not self.options.first:\n            # prevent crash on libdispatch-based systems, at least for the\n            # first request\n            self.options.cleanup_fds()\n\n        self.options.set_uid_or_exit()\n\n        if self.options.first:\n            self.options.set_rlimits_or_exit()\n\n        # this sets the options.logger object\n        # delay logger instantiation until after setuid\n        self.options.make_logger()\n\n        if not self.options.nocleanup:\n            # clean up old automatic logs\n            self.options.clear_autochildlogdir()\n\n        self.run() # 运行\n\n    def run(self):\n        self.process_groups = {}  # clear\n        self.stop_groups = None  # clear\n        events.clear()\n        try:\n            # 根据配置进行添加process\n            for config in self.options.process_group_configs:\n                self.add_process_group(config)\n            # 进程环境\n            self.options.process_environment()\n            # 打开http web\n            self.options.openhttpservers(self)\n            # 用于捕获信号\n            self.options.setsignals()\n            # 主进程是否成为守护进程\n            if (not self.options.nodaemon) and self.options.first:\n                self.options.daemonize()\n            # writing pid file needs to come *after* daemonizing or pid\n            # will be wrong\n            self.options.write_pidfile()\n            # 运行异步io服务器\n            self.runforever()\n        finally:\n            # 异常退出，清理工作\n            self.options.cleanup()\n\n```\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/gPpFtg.jpg)\n\n\n上面代码只有 `self.runforever()` 是工作的\n\n```python\n    def runforever(self):\n       # 事件通知机制\n        events.notify(events.SupervisorRunningEvent())\n        timeout = 1  # this cannot be fewer than the smallest TickEvent (5)\n        # 获取已经注册的句柄\n        socket_map = self.options.get_socket_map()\n        \n        # 这里会一直 运行，相当于守护进程\n        while 1:\n            # 保存运行信息等\n            combined_map = {}\n            combined_map.update(socket_map)\n            combined_map.update(self.get_process_map())\n            \n            # 进程信息\n            pgroups = list(self.process_groups.values())\n            pgroups.sort()\n            \n            # 根据进程配置开启或关闭进程\n            if self.options.mood < SupervisorStates.RUNNING:\n                if not self.stopping:\n                    # first time, set the stopping flag, do a\n                    # notification and set stop_groups\n                    self.stopping = True\n                    self.stop_groups = pgroups[:]\n                    events.notify(events.SupervisorStoppingEvent())\n\n                self.ordered_stop_groups_phase_1()\n\n                if not self.shutdown_report():\n                    # if there are no unstopped processes (we're done\n                    # killing everything), it's OK to shutdown or reload\n                    raise asyncore.ExitNow\n                    \n            for fd, dispatcher in combined_map.items():\n                if dispatcher.readable():\n                    self.options.poller.register_readable(fd)\n                if dispatcher.writable():\n                    self.options.poller.register_writable(fd)\n            # poll操作\n            r, w = self.options.poller.poll(timeout)\n\n            for fd in r:\n                if fd in combined_map:\n                    try:\n                        dispatcher = combined_map[fd]\n                        self.options.logger.blather(\n                            'read event caused by %(dispatcher)r',\n                            dispatcher=dispatcher)\n                        dispatcher.handle_read_event()\n                        if not dispatcher.readable():\n                            self.options.poller.unregister_readable(fd)\n                    except asyncore.ExitNow:\n                        raise\n                    except:\n                        combined_map[fd].handle_error()\n            # 依次遍历注册的文件句柄\n            for fd in w:\n                if fd in combined_map:\n                    try:\n                        dispatcher = combined_map[fd]\n                        self.options.logger.blather(\n                            'write event caused by %(dispatcher)r',\n                            dispatcher=dispatcher)\n                        dispatcher.handle_write_event()\n                        if not dispatcher.writable():\n                            self.options.poller.unregister_writable(fd)\n                    except asyncore.ExitNow:\n                        raise\n                    except:\n                        combined_map[fd].handle_error()\n\n            for group in pgroups:\n                group.transition()\n\n            # 获取已经死亡的子进程信息\n            self.reap()\n            # 处理信号\n            self.handle_signal()\n            \n            # tick时钟\n            self.tick()\n\n            if self.options.mood < SupervisorStates.RUNNING:\n                self.ordered_stop_groups_phase_2()\n\n            if self.options.test:\n                break\n\n```\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/kJHHD0.jpg)\n\n\n### 管理process\n\n下面详细介绍一下如何管理一个process：\n下面图可以指导主要是\n\n\n\n```python\n\n    def add_process_group(self, config):\n        name = config.name\n        if name not in self.process_groups:\n            config.after_setuid()\n            \n            # 根据初始化后的配置文件生成相应的子进程实例\n            self.process_groups[name] = config.make_group()\n            # 添加事件通知\n            events.notify(events.ProcessGroupAddedEvent(name))\n            return True\n        return False\n      \n```\n在supervisor配置中，我们需要写上执行的文件以及执行环境env. 所以，我们围绕 `执行这个程序的逻辑就可以了`\n```python\n    def execve(self, filename, argv, env):\n        return os.execve(filename, argv, env)\n```\n\n作者将所有的process或event的配置 都绑定到 `options`的对象上， 包括执行的程序以及各种状态， 然后一个deamon程序一直在运行，去实时检查配置是否发生变化了。做对应的操作。\n\n\n\n### supervisorclt\n这个客户端功能：\n1. 需要有一个UI,实现是cli\n2. 与server通信\n\n```python\ndef main(args=None, options=None):\n    if options is None:\n       # 实例化对象\n        options = ClientOptions()\n\n    options.realize(args, doc=__doc__)\n    # 控制器\n    c = Controller(options)\n\n    if options.args:\n        c.onecmd(\" \".join(options.args))\n        sys.exit(c.exitstatus)\n    \n    # 如果是交互模式\n    if options.interactive:\n        # 一直loop, 图形编程常见操作模式\n        c.exec_cmdloop(args, options)\n        sys.exit(0)  # exitstatus always 0 for interactive mode\n```\n\n我们看交互式的逻辑，`exec_cmdloop`\n```python\n    # 控制器的method\n    def exec_cmdloop(self, args, options):\n        try:\n            import readline\n            delims = readline.get_completer_delims()\n            delims = delims.replace(':', '')  # \"group:process\" as one word\n            delims = delims.replace('*', '')  # \"group:*\" as one word\n            delims = delims.replace('-', '')  # names with \"-\" as one word\n            readline.set_completer_delims(delims)\n\n            if options.history_file:\n                try:\n                    readline.read_history_file(options.history_file)\n                except IOError:\n                    pass\n\n                def save():\n                    try:\n                        readline.write_history_file(options.history_file)\n                    except IOError:\n                        pass\n\n                import atexit\n                atexit.register(save)\n        except ImportError:\n            pass\n        try:\n            self.cmdqueue.append('status')\n            # cmdloop\n            self.cmdloop()\n        except KeyboardInterrupt:\n            self.output('')\n            pass\n       \n    # cmdloop method定义  \n    def cmdloop(self, intro=None):\n        \"\"\"Repeatedly issue a prompt, accept input, parse an initial prefix\n        off the received input, and dispatch to action methods, passing them\n        the remainder of the line as argument.\n\n        \"\"\"\n\n        self.preloop()\n        # 输入和快捷键\n        if self.use_rawinput and self.completekey:\n            try:\n                import readline\n                self.old_completer = readline.get_completer()\n                readline.set_completer(self.complete)\n                readline.parse_and_bind(self.completekey+\": complete\")\n            except ImportError:\n                pass\n        try:\n            if intro is not None:\n                self.intro = intro\n            if self.intro:\n                self.stdout.write(str(self.intro)+\"\\n\")\n            stop = None\n            while not stop:\n                if self.cmdqueue:\n                    line = self.cmdqueue.pop(0)\n                else:\n                    if self.use_rawinput:\n                        try:\n                            line = input(self.prompt)\n                        except EOFError:\n                            line = 'EOF'\n                    else:\n                        self.stdout.write(self.prompt)\n                        self.stdout.flush()\n                        line = self.stdin.readline()\n                        if not len(line):\n                            line = 'EOF'\n                        else:\n                            line = line.rstrip('\\r\\n')\n                line = self.precmd(line)\n                stop = self.onecmd(line)\n                stop = self.postcmd(stop, line)\n            self.postloop()\n        finally:\n            if self.use_rawinput and self.completekey:\n                try:\n                    import readline\n                    readline.set_completer(self.old_completer)\n                except ImportError:\n                    pass\n            \n```\n\n上面执行又会执行到`onecmd`\n\n```python\n    def onecmd(self, line):\n        \"\"\"Interpret the argument as though it had been typed in response\n        to the prompt.\n\n        This may be overridden, but should not normally need to be;\n        see the precmd() and postcmd() methods for useful execution hooks.\n        The return value is a flag indicating whether interpretation of\n        commands by the interpreter should stop.\n\n        \"\"\"\n        cmd, arg, line = self.parseline(line)\n        if not line:\n            return self.emptyline()\n        if cmd is None:\n            return self.default(line)\n        self.lastcmd = line\n        if line == 'EOF' :\n            self.lastcmd = ''\n        if cmd == '':\n            return self.default(line)\n        else:\n            try:\n                func = getattr(self, 'do_' + cmd)\n            except AttributeError:\n                return self.default(line)\n            return func(arg)\n```\n可以看出 会返回一个`func = getattr(self, 'do_' + cmd)`,函数调用，是以`do_开头的函数`\n在supervisorctl的源码文件中， 我们找一个示例\n```python\n    def do_start(self, arg):\n        if not self.ctl.upcheck():\n            return\n\n        names = arg.split()\n        # 连接supervisor服务的代理\n        supervisor = self.ctl.get_supervisor()\n\n        if not names:\n            self.ctl.output(\"Error: start requires a process name\")\n            self.ctl.exitstatus = LSBInitExitStatuses.INVALID_ARGS\n            self.help_start()\n            return\n        \n        # 开启所有\n        if 'all' in names:\n            # 调用startAllProcesses函数\n            results = supervisor.startAllProcesses()\n            for result in results:\n                self.ctl.output(self._startresult(result))\n                self.ctl.set_exitstatus_from_xmlrpc_fault(result['status'], xmlrpc.Faults.ALREADY_STARTED)\n        else:\n            # 逐个关闭\n            for name in names:\n                group_name, process_name = split_namespec(name)\n                if process_name is None:\n                    try:\n                        results = supervisor.startProcessGroup(group_name)\n                        for result in results:\n                            self.ctl.output(self._startresult(result))\n                            self.ctl.set_exitstatus_from_xmlrpc_fault(result['status'], xmlrpc.Faults.ALREADY_STARTED)\n                    except xmlrpclib.Fault as e:\n                        if e.faultCode == xmlrpc.Faults.BAD_NAME:\n                            error = \"%s: ERROR (no such group)\" % group_name\n                            self.ctl.output(error)\n                            self.ctl.exitstatus = LSBInitExitStatuses.INVALID_ARGS\n                        else:\n                            self.ctl.exitstatus = LSBInitExitStatuses.GENERIC\n                            raise\n                else:\n                    try:\n                        result = supervisor.startProcess(name)\n                    except xmlrpclib.Fault as e:\n                        error = {'status': e.faultCode,\n                                  'name': process_name,\n                                  'group': group_name,\n                                  'description': e.faultString}\n                        self.ctl.output(self._startresult(error))\n                        self.ctl.set_exitstatus_from_xmlrpc_fault(error['status'], xmlrpc.Faults.ALREADY_STARTED)\n                    else:\n                        name = make_namespec(group_name, process_name)\n                        self.ctl.output('%s: started' % name)\n\n\n\n```\n上面比较重要的就是远程通过rpc调用\n```python\nclass SupervisorNamespaceRPCInterface:\n    ....\n    def startProcessGroup(self, name, wait=True):\n        \"\"\" Start all processes in the group named 'name'\n\n        @param string name     The group name\n        @param boolean wait    Wait for each process to be fully started\n        @return array result   An array of process status info structs\n        \"\"\"\n        self._update('startProcessGroup')\n\n        group = self.supervisord.process_groups.get(name)\n\n        if group is None:\n            raise RPCError(Faults.BAD_NAME, name)\n\n        processes = list(group.processes.values())\n        processes.sort()\n        processes = [ (group, process) for process in processes ]\n\n        startall = make_allfunc(processes, isNotRunning, self.startProcess,\n                                wait=wait)\n\n        startall.delay = 0.05\n        startall.rpcinterface = self\n        return startall # deferred\n\n\n```\n\n\n### web UI\n\n```python\ndef make_http_servers(options, supervisord):\n    from supervisor.web import supervisor_ui_handler\n    uihandler = supervisor_ui_handler(supervisord)\n    \nclass supervisor_ui_handler:\n    IDENT = 'Supervisor Web UI HTTP Request Handler'\n\n    def __init__(self, supervisord):\n        self.supervisord = supervisord\n\n    def match(self, request):\n        if request.command not in ('POST', 'GET'):\n            return False\n\n        path, params, query, fragment = request.split_uri()\n\n        while path.startswith('/'):\n            path = path[1:]\n\n        if not path:\n            path = 'index.html'\n\n        for viewname in VIEWS.keys():\n            if viewname == path:\n                return True\n\n    def handle_request(self, request):\n        if request.command == 'POST':\n            request.collector = collector(self, request)\n        else:\n            self.continue_request('', request)\n\n    def continue_request (self, data, request):\n        form = {}\n        cgi_env = request.cgi_environment()\n        form.update(cgi_env)\n        if 'QUERY_STRING' not in form:\n            form['QUERY_STRING'] = ''\n\n        query = form['QUERY_STRING']\n\n        # we only handle x-www-form-urlencoded values from POSTs\n        form_urlencoded = parse_qsl(data)\n        query_data = parse_qs(query)\n\n        for k, v in query_data.items():\n            # ignore dupes\n            form[k] = v[0]\n\n        for k, v in form_urlencoded:\n            # ignore dupes\n            form[k] = v\n\n        form['SERVER_URL'] = request.get_server_url()\n\n        path = form['PATH_INFO']\n        # strip off all leading slashes\n        while path and path[0] == '/':\n            path = path[1:]\n        if not path:\n            path = 'index.html'\n\n        viewinfo = VIEWS.get(path)\n        if viewinfo is None:\n            # this should never happen if our match method works\n            return\n\n        response = {'headers': {}}\n\n        viewclass = viewinfo['view']\n        viewtemplate = viewinfo['template']\n        context = ViewContext(template=viewtemplate,\n                              request = request,\n                              form = form,\n                              response = response,\n                              supervisord=self.supervisord)\n        view = viewclass(context)\n        pushproducer = request.channel.push_with_producer\n        pushproducer(DeferredWebProducer(request, view))\n    \n\n```\n\n\n### RPC\n```python\nclass supervisor_xmlrpc_handler(xmlrpc_handler):\n    path = '/RPC2'\n    IDENT = 'Supervisor XML-RPC Handler'\n\n    unmarshallers = {\n        \"int\": lambda x: int(x.text),\n        \"i4\": lambda x: int(x.text),\n        \"boolean\": lambda x: x.text == \"1\",\n        \"string\": lambda x: x.text or \"\",\n        \"double\": lambda x: float(x.text),\n        \"dateTime.iso8601\": lambda x: make_datetime(x.text),\n        \"array\": lambda x: x[0].text,\n        \"data\": lambda x: [v.text for v in x],\n        \"struct\": lambda x: dict([(k.text or \"\", v.text) for k, v in x]),\n        \"base64\": lambda x: as_string(decodestring(as_bytes(x.text or \"\"))),\n        \"param\": lambda x: x[0].text,\n    }\n\n    def __init__(self, supervisord, subinterfaces):\n        self.rpcinterface = RootRPCInterface(subinterfaces)\n        self.supervisord = supervisord\n\n    def loads(self, data):\n        params = method = None\n        for action, elem in iterparse(StringIO(data)):\n            unmarshall = self.unmarshallers.get(elem.tag)\n            if unmarshall:\n                data = unmarshall(elem)\n                elem.clear()\n                elem.text = data\n            elif elem.tag == \"value\":\n                try:\n                    data = elem[0].text\n                except IndexError:\n                    data = elem.text or \"\"\n                elem.clear()\n                elem.text = data\n            elif elem.tag == \"methodName\":\n                method = elem.text\n            elif elem.tag == \"params\":\n                params = tuple([v.text for v in elem])\n        return params, method\n\n    def match(self, request):\n        return request.uri.startswith(self.path)\n\n    def continue_request(self, data, request):\n        logger = self.supervisord.options.logger\n\n        try:\n            try:\n                # on 2.x, the Expat parser doesn't like Unicode which actually\n                # contains non-ASCII characters. It's a bit of a kludge to\n                # do it conditionally here, but it's down to how underlying\n                # libs behave\n                if PY2:\n                    data = data.encode('ascii', 'xmlcharrefreplace')\n                params, method = self.loads(data)\n            except:\n                logger.error(\n                    'XML-RPC request data %r is invalid: unmarshallable' %\n                    (data,)\n                )\n                request.error(400)\n                return\n\n            # no <methodName> in the request or name is an empty string\n            if not method:\n                logger.error(\n                    'XML-RPC request data %r is invalid: no method name' %\n                    (data,)\n                )\n                request.error(400)\n                return\n\n            # we allow xml-rpc clients that do not send empty <params>\n            # when there are no parameters for the method call\n            if params is None:\n                params = ()\n\n            try:\n                logger.trace('XML-RPC method called: %s()' % method)\n                value = self.call(method, params)\n                logger.trace('XML-RPC method %s() returned successfully' %\n                             method)\n            except RPCError as err:\n                # turn RPCError reported by method into a Fault instance\n                value = xmlrpclib.Fault(err.code, err.text)\n                logger.trace('XML-RPC method %s() returned fault: [%d] %s' % (\n                    method,\n                    err.code, err.text))\n\n            if isinstance(value, types.FunctionType):\n                # returning a function from an RPC method implies that\n                # this needs to be a deferred response (it needs to block).\n                pushproducer = request.channel.push_with_producer\n                pushproducer(DeferredXMLRPCResponse(request, value))\n\n            else:\n                # if we get anything but a function, it implies that this\n                # response doesn't need to be deferred, we can service it\n                # right away.\n                body = as_bytes(xmlrpc_marshal(value))\n                request['Content-Type'] = 'text/xml'\n                request['Content-Length'] = len(body)\n                request.push(body)\n                request.done()\n\n        except:\n            tb = traceback.format_exc()\n            logger.critical(\n                \"Handling XML-RPC request with data %r raised an unexpected \"\n                \"exception: %s\" % (data, tb)\n            )\n            # internal error, report as HTTP server error\n            request.error(500)\n\n    def call(self, method, params):\n        return traverse(self.rpcinterface, method, params)\n```\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Hwfzfb.jpg)\n\n\n## 总结\npython是解释型语言 弱类型，看源码没有编译型语言清晰明了。这个源码不太容易看，我参考supervisor的设计写公司项目，一开始是看这个源码，发现很不容易理清楚，我是先看了go语言版的，然后在回头看python版的才看明白。可以直接看go版本的，那个更加清晰。\n","source":"_posts/supervisor.md","raw":"---\ntitle: supervisor源码解析\ndate: 2021-08-01 22:38:07\ntop: true\nhide: false\ncover: true\ntoc: true\nmathjax: false\nsummary: 通过源码介绍supervisor，学习一些通用的软件架构和技巧\nkeywords:\n-  go\n-  supervisor\n-  源码\n- python\n\ncategories: 技术\ntags:\n-  go\n-  supervisor\n-  源码\n- python\n---\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/mTUPK0.jpg)\n\n今天介绍一下supervisor的源码。 supervisor是python写的。如果你不懂python，我也介绍一下golang版的实现。 如果你不会，其他语言的实现，应该也有，github找一下。 自己读一下。实现原理应该都是一样的。\n\n[源码](https://github.com/Supervisor/supervisor)\n\n\n## supervisor的组件\n### 1. supervisord\n\n>服务器主进程名为supervisord。它负责在自己的调用中启动子程序，响应来自客户端的命令，重新启动崩溃或退出的子进程，记录其子进程stdout和stderr 输出，以及生成和处理与子进程生命周期中的点相对应的“事件”。\n\n服务器进程使用配置文件。这通常位于/etc/supervisord.conf中。此配置文件是“Windows-INI”样式配置文件。通过适当的文件系统权限保持此文件的安全非常重要，因为它可能包含未加密的用户名和密码。\n\n### 2. supervisorctl\n\n主进程的命令行客户端部分名为 supervisorctl。它为supervisord提供的功能提供了类似shell的界面。从 supervisorctl，用户可以连接到不同的 supervisord进程（一次一个），获取由子进程控制的状态，停止和启动子进程，并获取supervisord的运行进程列表。\n\n命令行客户机通过UNIX域套接字或internet (TCP)套接字与服务器通信。服务器可以断言客户机的用户应该在执行命令之前提供身份验证凭据。客户机进程通常使用与服务器相同的配置文件，但是其中包含[supervisorctl]部分的任何配置文件都可以工作。\n\n### 3. Web Server\n\n如果您针对internet套接字启动了adminord，那么可以通过浏览器访问具有与supervise orctl类似功能的(稀疏的)web用户界面。在激活配置文件的`[inet_http_server]`部分之后，访问服务器URL(例如`http://localhost:9001/`)，通过web界面查看和控制进程状态。\n\n### 4. XML-RPC Interface\n服务于web UI的同一个HTTP服务器提供一个XML-RPC接口，该接口可用于询问和控制管理器及其运行的程序。参见XML-RPC API文档。\n\n\n### 5. 目录结构\n\n整体看一下目录结构：\n\n```bash\n├── __init__.py\n├── childutils.py\n├── compat.py\n├── confecho.py\n├── datatypes.py\n├── dispatchers.py\n├── events.py\n├── http.py\n├── http_client.py\n├── loggers.py\n├── medusa\n│   ├── CHANGES.txt\n│   ├── LICENSE.txt\n│   ├── README.txt\n│   ├── TODO.txt\n│   ├── __init__.py\n│   ├── asynchat_25.py\n│   ├── asyncore_25.py\n│   ├── auth_handler.py\n│   ├── counter.py\n│   ├── default_handler.py\n│   ├── docs\n│   │   ├── README.html\n│   │   ├── async_blurbs.txt\n│   │   ├── composing_producers.gif\n│   │   ├── data_flow.gif\n│   │   ├── data_flow.html\n│   │   ├── producers.gif\n│   │   ├── programming.html\n│   │   ├── proxy_notes.txt\n│   │   ├── threads.txt\n│   │   └── tkinter.txt\n│   ├── filesys.py\n│   ├── http_date.py\n│   ├── http_server.py\n│   ├── logger.py\n│   ├── producers.py\n│   ├── util.py\n│   └── xmlrpc_handler.py\n├── options.py\n├── pidproxy.py\n├── poller.py\n├── process.py\n├── rpcinterface.py\n├── scripts\n│   ├── loop_eventgen.py\n│   ├── loop_listener.py\n│   ├── sample_commevent.py\n│   ├── sample_eventlistener.py\n│   └── sample_exiting_eventlistener.py\n├── skel\n│   └── sample.conf\n├── socket_manager.py\n├── states.py\n├── supervisorctl.py\n├── supervisord.py\n├── tests\n│   ├── __init__.py\n│   ├── base.py\n│   ├── fixtures\n│   │   ├── donothing.conf\n│   │   ├── example\n│   │   │   └── included.conf\n│   │   ├── hello.sh\n│   │   ├── include.conf\n│   │   ├── issue-1054.conf\n│   │   ├── issue-565.conf\n│   │   ├── issue-638.conf\n│   │   ├── issue-663.conf\n│   │   ├── issue-664.conf\n│   │   ├── issue-835.conf\n│   │   ├── issue-836.conf\n│   │   ├── listener.py\n│   │   ├── spew.py\n│   │   └── unkillable_spew.py\n│   ├── test_childutils.py\n│   ├── test_confecho.py\n│   ├── test_datatypes.py\n│   ├── test_dispatchers.py\n│   ├── test_end_to_end.py\n│   ├── test_events.py\n│   ├── test_http.py\n│   ├── test_http_client.py\n│   ├── test_loggers.py\n│   ├── test_options.py\n│   ├── test_poller.py\n│   ├── test_process.py\n│   ├── test_rpcinterfaces.py\n│   ├── test_socket_manager.py\n│   ├── test_states.py\n│   ├── test_supervisorctl.py\n│   ├── test_supervisord.py\n│   ├── test_web.py\n│   └── test_xmlrpc.py\n├── ui\n│   ├── images\n│   │   ├── button_refresh.gif\n│   │   ├── button_restart.gif\n│   │   ├── button_stop.gif\n│   │   ├── icon.png\n│   │   ├── rule.gif\n│   │   ├── state0.gif\n│   │   ├── state1.gif\n│   │   ├── state2.gif\n│   │   ├── state3.gif\n│   │   └── supervisor.gif\n│   ├── status.html\n│   ├── stylesheets\n│   │   └── supervisor.css\n│   └── tail.html\n├── version.txt\n├── web.py\n└── xmlrpc.py\n```\n\n\n整体架构\n\n\n源码学习按上面的分块进行介绍\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/t4Mc7M.jpg)\n\n\n## supervisord\n先找到入口程序\n```python\n# Main program\ndef main(args=None, test=False):\n    assert os.name == \"posix\", \"This code makes Unix-specific assumptions\"\n    # if we hup, restart by making a new Supervisor()\n    first = True\n    while 1:\n        options = ServerOptions()\n        options.realize(args, doc=__doc__)\n        options.first = first\n        options.test = test\n        if options.profile_options:\n            sort_order, callers = options.profile_options\n            profile('go(options)', globals(), locals(), sort_order, callers)\n        else:\n            go(options)\n        options.close_httpservers()\n        options.close_logger()\n        first = False\n        if test or (options.mood < SupervisorStates.RESTARTING):\n            break\n\nif __name__ == \"__main__\": # pragma: no cover\n    main()\n```\n\n从上面看出， main()中有个死循环一直只工作。\n下面详细介绍，在循环中做了哪些工作？\n\n```python\n# Main program\ndef main(args=None, test=False):\n    assert os.name == \"posix\", \"This code makes Unix-specific assumptions\"\n    # if we hup, restart by making a new Supervisor()\n    first = True\n    while 1:\n        options = ServerOptions() // 配置\n        options.realize(args, doc=__doc__)\n        options.first = first\n        options.test = test\n        if options.profile_options:\n            sort_order, callers = options.profile_options\n            profile('go(options)', globals(), locals(), sort_order, callers)\n        else:\n            go(options) // 加载配置开始运行\n        options.close_httpservers()\n        options.close_logger()\n        first = False\n        if test or (options.mood < SupervisorStates.RESTARTING):\n            break\n\ndef go(options): # pragma: no cover\n    d = Supervisor(options) // 实例化一个Supervisor对象\n    try:\n    d.main()  // 运行main()函数\n    except asyncore.ExitNow:\n        pass\n```\n\n### `Supervisor`类的代码\n\n```python\nclass Supervisor:\n    stopping = False  # set after we detect that we are handling a stop request\n    lastshutdownreport = 0  # throttle for delayed process error reports at stop\n    process_groups = None  # map of process group name to process group object\n    stop_groups = None  # list used for priority ordered shutdown\n\n    def __init__(self, options): # 初始化\n        self.options = options # 配置\n        self.process_groups = {}\n        self.ticks = {}\n\n    def main(self):\n        if not self.options.first:\n            # prevent crash on libdispatch-based systems, at least for the\n            # first request\n            self.options.cleanup_fds()\n\n        self.options.set_uid_or_exit()\n\n        if self.options.first:\n            self.options.set_rlimits_or_exit()\n\n        # this sets the options.logger object\n        # delay logger instantiation until after setuid\n        self.options.make_logger()\n\n        if not self.options.nocleanup:\n            # clean up old automatic logs\n            self.options.clear_autochildlogdir()\n\n        self.run() # 运行\n\n    def run(self):\n        self.process_groups = {}  # clear\n        self.stop_groups = None  # clear\n        events.clear()\n        try:\n            # 根据配置进行添加process\n            for config in self.options.process_group_configs:\n                self.add_process_group(config)\n            # 进程环境\n            self.options.process_environment()\n            # 打开http web\n            self.options.openhttpservers(self)\n            # 用于捕获信号\n            self.options.setsignals()\n            # 主进程是否成为守护进程\n            if (not self.options.nodaemon) and self.options.first:\n                self.options.daemonize()\n            # writing pid file needs to come *after* daemonizing or pid\n            # will be wrong\n            self.options.write_pidfile()\n            # 运行异步io服务器\n            self.runforever()\n        finally:\n            # 异常退出，清理工作\n            self.options.cleanup()\n\n```\n\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/gPpFtg.jpg)\n\n\n上面代码只有 `self.runforever()` 是工作的\n\n```python\n    def runforever(self):\n       # 事件通知机制\n        events.notify(events.SupervisorRunningEvent())\n        timeout = 1  # this cannot be fewer than the smallest TickEvent (5)\n        # 获取已经注册的句柄\n        socket_map = self.options.get_socket_map()\n        \n        # 这里会一直 运行，相当于守护进程\n        while 1:\n            # 保存运行信息等\n            combined_map = {}\n            combined_map.update(socket_map)\n            combined_map.update(self.get_process_map())\n            \n            # 进程信息\n            pgroups = list(self.process_groups.values())\n            pgroups.sort()\n            \n            # 根据进程配置开启或关闭进程\n            if self.options.mood < SupervisorStates.RUNNING:\n                if not self.stopping:\n                    # first time, set the stopping flag, do a\n                    # notification and set stop_groups\n                    self.stopping = True\n                    self.stop_groups = pgroups[:]\n                    events.notify(events.SupervisorStoppingEvent())\n\n                self.ordered_stop_groups_phase_1()\n\n                if not self.shutdown_report():\n                    # if there are no unstopped processes (we're done\n                    # killing everything), it's OK to shutdown or reload\n                    raise asyncore.ExitNow\n                    \n            for fd, dispatcher in combined_map.items():\n                if dispatcher.readable():\n                    self.options.poller.register_readable(fd)\n                if dispatcher.writable():\n                    self.options.poller.register_writable(fd)\n            # poll操作\n            r, w = self.options.poller.poll(timeout)\n\n            for fd in r:\n                if fd in combined_map:\n                    try:\n                        dispatcher = combined_map[fd]\n                        self.options.logger.blather(\n                            'read event caused by %(dispatcher)r',\n                            dispatcher=dispatcher)\n                        dispatcher.handle_read_event()\n                        if not dispatcher.readable():\n                            self.options.poller.unregister_readable(fd)\n                    except asyncore.ExitNow:\n                        raise\n                    except:\n                        combined_map[fd].handle_error()\n            # 依次遍历注册的文件句柄\n            for fd in w:\n                if fd in combined_map:\n                    try:\n                        dispatcher = combined_map[fd]\n                        self.options.logger.blather(\n                            'write event caused by %(dispatcher)r',\n                            dispatcher=dispatcher)\n                        dispatcher.handle_write_event()\n                        if not dispatcher.writable():\n                            self.options.poller.unregister_writable(fd)\n                    except asyncore.ExitNow:\n                        raise\n                    except:\n                        combined_map[fd].handle_error()\n\n            for group in pgroups:\n                group.transition()\n\n            # 获取已经死亡的子进程信息\n            self.reap()\n            # 处理信号\n            self.handle_signal()\n            \n            # tick时钟\n            self.tick()\n\n            if self.options.mood < SupervisorStates.RUNNING:\n                self.ordered_stop_groups_phase_2()\n\n            if self.options.test:\n                break\n\n```\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/kJHHD0.jpg)\n\n\n### 管理process\n\n下面详细介绍一下如何管理一个process：\n下面图可以指导主要是\n\n\n\n```python\n\n    def add_process_group(self, config):\n        name = config.name\n        if name not in self.process_groups:\n            config.after_setuid()\n            \n            # 根据初始化后的配置文件生成相应的子进程实例\n            self.process_groups[name] = config.make_group()\n            # 添加事件通知\n            events.notify(events.ProcessGroupAddedEvent(name))\n            return True\n        return False\n      \n```\n在supervisor配置中，我们需要写上执行的文件以及执行环境env. 所以，我们围绕 `执行这个程序的逻辑就可以了`\n```python\n    def execve(self, filename, argv, env):\n        return os.execve(filename, argv, env)\n```\n\n作者将所有的process或event的配置 都绑定到 `options`的对象上， 包括执行的程序以及各种状态， 然后一个deamon程序一直在运行，去实时检查配置是否发生变化了。做对应的操作。\n\n\n\n### supervisorclt\n这个客户端功能：\n1. 需要有一个UI,实现是cli\n2. 与server通信\n\n```python\ndef main(args=None, options=None):\n    if options is None:\n       # 实例化对象\n        options = ClientOptions()\n\n    options.realize(args, doc=__doc__)\n    # 控制器\n    c = Controller(options)\n\n    if options.args:\n        c.onecmd(\" \".join(options.args))\n        sys.exit(c.exitstatus)\n    \n    # 如果是交互模式\n    if options.interactive:\n        # 一直loop, 图形编程常见操作模式\n        c.exec_cmdloop(args, options)\n        sys.exit(0)  # exitstatus always 0 for interactive mode\n```\n\n我们看交互式的逻辑，`exec_cmdloop`\n```python\n    # 控制器的method\n    def exec_cmdloop(self, args, options):\n        try:\n            import readline\n            delims = readline.get_completer_delims()\n            delims = delims.replace(':', '')  # \"group:process\" as one word\n            delims = delims.replace('*', '')  # \"group:*\" as one word\n            delims = delims.replace('-', '')  # names with \"-\" as one word\n            readline.set_completer_delims(delims)\n\n            if options.history_file:\n                try:\n                    readline.read_history_file(options.history_file)\n                except IOError:\n                    pass\n\n                def save():\n                    try:\n                        readline.write_history_file(options.history_file)\n                    except IOError:\n                        pass\n\n                import atexit\n                atexit.register(save)\n        except ImportError:\n            pass\n        try:\n            self.cmdqueue.append('status')\n            # cmdloop\n            self.cmdloop()\n        except KeyboardInterrupt:\n            self.output('')\n            pass\n       \n    # cmdloop method定义  \n    def cmdloop(self, intro=None):\n        \"\"\"Repeatedly issue a prompt, accept input, parse an initial prefix\n        off the received input, and dispatch to action methods, passing them\n        the remainder of the line as argument.\n\n        \"\"\"\n\n        self.preloop()\n        # 输入和快捷键\n        if self.use_rawinput and self.completekey:\n            try:\n                import readline\n                self.old_completer = readline.get_completer()\n                readline.set_completer(self.complete)\n                readline.parse_and_bind(self.completekey+\": complete\")\n            except ImportError:\n                pass\n        try:\n            if intro is not None:\n                self.intro = intro\n            if self.intro:\n                self.stdout.write(str(self.intro)+\"\\n\")\n            stop = None\n            while not stop:\n                if self.cmdqueue:\n                    line = self.cmdqueue.pop(0)\n                else:\n                    if self.use_rawinput:\n                        try:\n                            line = input(self.prompt)\n                        except EOFError:\n                            line = 'EOF'\n                    else:\n                        self.stdout.write(self.prompt)\n                        self.stdout.flush()\n                        line = self.stdin.readline()\n                        if not len(line):\n                            line = 'EOF'\n                        else:\n                            line = line.rstrip('\\r\\n')\n                line = self.precmd(line)\n                stop = self.onecmd(line)\n                stop = self.postcmd(stop, line)\n            self.postloop()\n        finally:\n            if self.use_rawinput and self.completekey:\n                try:\n                    import readline\n                    readline.set_completer(self.old_completer)\n                except ImportError:\n                    pass\n            \n```\n\n上面执行又会执行到`onecmd`\n\n```python\n    def onecmd(self, line):\n        \"\"\"Interpret the argument as though it had been typed in response\n        to the prompt.\n\n        This may be overridden, but should not normally need to be;\n        see the precmd() and postcmd() methods for useful execution hooks.\n        The return value is a flag indicating whether interpretation of\n        commands by the interpreter should stop.\n\n        \"\"\"\n        cmd, arg, line = self.parseline(line)\n        if not line:\n            return self.emptyline()\n        if cmd is None:\n            return self.default(line)\n        self.lastcmd = line\n        if line == 'EOF' :\n            self.lastcmd = ''\n        if cmd == '':\n            return self.default(line)\n        else:\n            try:\n                func = getattr(self, 'do_' + cmd)\n            except AttributeError:\n                return self.default(line)\n            return func(arg)\n```\n可以看出 会返回一个`func = getattr(self, 'do_' + cmd)`,函数调用，是以`do_开头的函数`\n在supervisorctl的源码文件中， 我们找一个示例\n```python\n    def do_start(self, arg):\n        if not self.ctl.upcheck():\n            return\n\n        names = arg.split()\n        # 连接supervisor服务的代理\n        supervisor = self.ctl.get_supervisor()\n\n        if not names:\n            self.ctl.output(\"Error: start requires a process name\")\n            self.ctl.exitstatus = LSBInitExitStatuses.INVALID_ARGS\n            self.help_start()\n            return\n        \n        # 开启所有\n        if 'all' in names:\n            # 调用startAllProcesses函数\n            results = supervisor.startAllProcesses()\n            for result in results:\n                self.ctl.output(self._startresult(result))\n                self.ctl.set_exitstatus_from_xmlrpc_fault(result['status'], xmlrpc.Faults.ALREADY_STARTED)\n        else:\n            # 逐个关闭\n            for name in names:\n                group_name, process_name = split_namespec(name)\n                if process_name is None:\n                    try:\n                        results = supervisor.startProcessGroup(group_name)\n                        for result in results:\n                            self.ctl.output(self._startresult(result))\n                            self.ctl.set_exitstatus_from_xmlrpc_fault(result['status'], xmlrpc.Faults.ALREADY_STARTED)\n                    except xmlrpclib.Fault as e:\n                        if e.faultCode == xmlrpc.Faults.BAD_NAME:\n                            error = \"%s: ERROR (no such group)\" % group_name\n                            self.ctl.output(error)\n                            self.ctl.exitstatus = LSBInitExitStatuses.INVALID_ARGS\n                        else:\n                            self.ctl.exitstatus = LSBInitExitStatuses.GENERIC\n                            raise\n                else:\n                    try:\n                        result = supervisor.startProcess(name)\n                    except xmlrpclib.Fault as e:\n                        error = {'status': e.faultCode,\n                                  'name': process_name,\n                                  'group': group_name,\n                                  'description': e.faultString}\n                        self.ctl.output(self._startresult(error))\n                        self.ctl.set_exitstatus_from_xmlrpc_fault(error['status'], xmlrpc.Faults.ALREADY_STARTED)\n                    else:\n                        name = make_namespec(group_name, process_name)\n                        self.ctl.output('%s: started' % name)\n\n\n\n```\n上面比较重要的就是远程通过rpc调用\n```python\nclass SupervisorNamespaceRPCInterface:\n    ....\n    def startProcessGroup(self, name, wait=True):\n        \"\"\" Start all processes in the group named 'name'\n\n        @param string name     The group name\n        @param boolean wait    Wait for each process to be fully started\n        @return array result   An array of process status info structs\n        \"\"\"\n        self._update('startProcessGroup')\n\n        group = self.supervisord.process_groups.get(name)\n\n        if group is None:\n            raise RPCError(Faults.BAD_NAME, name)\n\n        processes = list(group.processes.values())\n        processes.sort()\n        processes = [ (group, process) for process in processes ]\n\n        startall = make_allfunc(processes, isNotRunning, self.startProcess,\n                                wait=wait)\n\n        startall.delay = 0.05\n        startall.rpcinterface = self\n        return startall # deferred\n\n\n```\n\n\n### web UI\n\n```python\ndef make_http_servers(options, supervisord):\n    from supervisor.web import supervisor_ui_handler\n    uihandler = supervisor_ui_handler(supervisord)\n    \nclass supervisor_ui_handler:\n    IDENT = 'Supervisor Web UI HTTP Request Handler'\n\n    def __init__(self, supervisord):\n        self.supervisord = supervisord\n\n    def match(self, request):\n        if request.command not in ('POST', 'GET'):\n            return False\n\n        path, params, query, fragment = request.split_uri()\n\n        while path.startswith('/'):\n            path = path[1:]\n\n        if not path:\n            path = 'index.html'\n\n        for viewname in VIEWS.keys():\n            if viewname == path:\n                return True\n\n    def handle_request(self, request):\n        if request.command == 'POST':\n            request.collector = collector(self, request)\n        else:\n            self.continue_request('', request)\n\n    def continue_request (self, data, request):\n        form = {}\n        cgi_env = request.cgi_environment()\n        form.update(cgi_env)\n        if 'QUERY_STRING' not in form:\n            form['QUERY_STRING'] = ''\n\n        query = form['QUERY_STRING']\n\n        # we only handle x-www-form-urlencoded values from POSTs\n        form_urlencoded = parse_qsl(data)\n        query_data = parse_qs(query)\n\n        for k, v in query_data.items():\n            # ignore dupes\n            form[k] = v[0]\n\n        for k, v in form_urlencoded:\n            # ignore dupes\n            form[k] = v\n\n        form['SERVER_URL'] = request.get_server_url()\n\n        path = form['PATH_INFO']\n        # strip off all leading slashes\n        while path and path[0] == '/':\n            path = path[1:]\n        if not path:\n            path = 'index.html'\n\n        viewinfo = VIEWS.get(path)\n        if viewinfo is None:\n            # this should never happen if our match method works\n            return\n\n        response = {'headers': {}}\n\n        viewclass = viewinfo['view']\n        viewtemplate = viewinfo['template']\n        context = ViewContext(template=viewtemplate,\n                              request = request,\n                              form = form,\n                              response = response,\n                              supervisord=self.supervisord)\n        view = viewclass(context)\n        pushproducer = request.channel.push_with_producer\n        pushproducer(DeferredWebProducer(request, view))\n    \n\n```\n\n\n### RPC\n```python\nclass supervisor_xmlrpc_handler(xmlrpc_handler):\n    path = '/RPC2'\n    IDENT = 'Supervisor XML-RPC Handler'\n\n    unmarshallers = {\n        \"int\": lambda x: int(x.text),\n        \"i4\": lambda x: int(x.text),\n        \"boolean\": lambda x: x.text == \"1\",\n        \"string\": lambda x: x.text or \"\",\n        \"double\": lambda x: float(x.text),\n        \"dateTime.iso8601\": lambda x: make_datetime(x.text),\n        \"array\": lambda x: x[0].text,\n        \"data\": lambda x: [v.text for v in x],\n        \"struct\": lambda x: dict([(k.text or \"\", v.text) for k, v in x]),\n        \"base64\": lambda x: as_string(decodestring(as_bytes(x.text or \"\"))),\n        \"param\": lambda x: x[0].text,\n    }\n\n    def __init__(self, supervisord, subinterfaces):\n        self.rpcinterface = RootRPCInterface(subinterfaces)\n        self.supervisord = supervisord\n\n    def loads(self, data):\n        params = method = None\n        for action, elem in iterparse(StringIO(data)):\n            unmarshall = self.unmarshallers.get(elem.tag)\n            if unmarshall:\n                data = unmarshall(elem)\n                elem.clear()\n                elem.text = data\n            elif elem.tag == \"value\":\n                try:\n                    data = elem[0].text\n                except IndexError:\n                    data = elem.text or \"\"\n                elem.clear()\n                elem.text = data\n            elif elem.tag == \"methodName\":\n                method = elem.text\n            elif elem.tag == \"params\":\n                params = tuple([v.text for v in elem])\n        return params, method\n\n    def match(self, request):\n        return request.uri.startswith(self.path)\n\n    def continue_request(self, data, request):\n        logger = self.supervisord.options.logger\n\n        try:\n            try:\n                # on 2.x, the Expat parser doesn't like Unicode which actually\n                # contains non-ASCII characters. It's a bit of a kludge to\n                # do it conditionally here, but it's down to how underlying\n                # libs behave\n                if PY2:\n                    data = data.encode('ascii', 'xmlcharrefreplace')\n                params, method = self.loads(data)\n            except:\n                logger.error(\n                    'XML-RPC request data %r is invalid: unmarshallable' %\n                    (data,)\n                )\n                request.error(400)\n                return\n\n            # no <methodName> in the request or name is an empty string\n            if not method:\n                logger.error(\n                    'XML-RPC request data %r is invalid: no method name' %\n                    (data,)\n                )\n                request.error(400)\n                return\n\n            # we allow xml-rpc clients that do not send empty <params>\n            # when there are no parameters for the method call\n            if params is None:\n                params = ()\n\n            try:\n                logger.trace('XML-RPC method called: %s()' % method)\n                value = self.call(method, params)\n                logger.trace('XML-RPC method %s() returned successfully' %\n                             method)\n            except RPCError as err:\n                # turn RPCError reported by method into a Fault instance\n                value = xmlrpclib.Fault(err.code, err.text)\n                logger.trace('XML-RPC method %s() returned fault: [%d] %s' % (\n                    method,\n                    err.code, err.text))\n\n            if isinstance(value, types.FunctionType):\n                # returning a function from an RPC method implies that\n                # this needs to be a deferred response (it needs to block).\n                pushproducer = request.channel.push_with_producer\n                pushproducer(DeferredXMLRPCResponse(request, value))\n\n            else:\n                # if we get anything but a function, it implies that this\n                # response doesn't need to be deferred, we can service it\n                # right away.\n                body = as_bytes(xmlrpc_marshal(value))\n                request['Content-Type'] = 'text/xml'\n                request['Content-Length'] = len(body)\n                request.push(body)\n                request.done()\n\n        except:\n            tb = traceback.format_exc()\n            logger.critical(\n                \"Handling XML-RPC request with data %r raised an unexpected \"\n                \"exception: %s\" % (data, tb)\n            )\n            # internal error, report as HTTP server error\n            request.error(500)\n\n    def call(self, method, params):\n        return traverse(self.rpcinterface, method, params)\n```\n![](https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Hwfzfb.jpg)\n\n\n## 总结\npython是解释型语言 弱类型，看源码没有编译型语言清晰明了。这个源码不太容易看，我参考supervisor的设计写公司项目，一开始是看这个源码，发现很不容易理清楚，我是先看了go语言版的，然后在回头看python版的才看明白。可以直接看go版本的，那个更加清晰。\n","slug":"supervisor","published":1,"updated":"2021-08-01T14:56:34.903Z","_id":"ckrtbjv7c0000pkuq7d5afpzc","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/mTUPK0.jpg\"></p>\n<p>今天介绍一下supervisor的源码。 supervisor是python写的。如果你不懂python，我也介绍一下golang版的实现。 如果你不会，其他语言的实现，应该也有，github找一下。 自己读一下。实现原理应该都是一样的。</p>\n<p><a href=\"https://github.com/Supervisor/supervisor\">源码</a></p>\n<h2 id=\"supervisor的组件\"><a href=\"#supervisor的组件\" class=\"headerlink\" title=\"supervisor的组件\"></a>supervisor的组件</h2><h3 id=\"1-supervisord\"><a href=\"#1-supervisord\" class=\"headerlink\" title=\"1. supervisord\"></a>1. supervisord</h3><blockquote>\n<p>服务器主进程名为supervisord。它负责在自己的调用中启动子程序，响应来自客户端的命令，重新启动崩溃或退出的子进程，记录其子进程stdout和stderr 输出，以及生成和处理与子进程生命周期中的点相对应的“事件”。</p>\n</blockquote>\n<p>服务器进程使用配置文件。这通常位于/etc/supervisord.conf中。此配置文件是“Windows-INI”样式配置文件。通过适当的文件系统权限保持此文件的安全非常重要，因为它可能包含未加密的用户名和密码。</p>\n<h3 id=\"2-supervisorctl\"><a href=\"#2-supervisorctl\" class=\"headerlink\" title=\"2. supervisorctl\"></a>2. supervisorctl</h3><p>主进程的命令行客户端部分名为 supervisorctl。它为supervisord提供的功能提供了类似shell的界面。从 supervisorctl，用户可以连接到不同的 supervisord进程（一次一个），获取由子进程控制的状态，停止和启动子进程，并获取supervisord的运行进程列表。</p>\n<p>命令行客户机通过UNIX域套接字或internet (TCP)套接字与服务器通信。服务器可以断言客户机的用户应该在执行命令之前提供身份验证凭据。客户机进程通常使用与服务器相同的配置文件，但是其中包含[supervisorctl]部分的任何配置文件都可以工作。</p>\n<h3 id=\"3-Web-Server\"><a href=\"#3-Web-Server\" class=\"headerlink\" title=\"3. Web Server\"></a>3. Web Server</h3><p>如果您针对internet套接字启动了adminord，那么可以通过浏览器访问具有与supervise orctl类似功能的(稀疏的)web用户界面。在激活配置文件的<code>[inet_http_server]</code>部分之后，访问服务器URL(例如<code>http://localhost:9001/</code>)，通过web界面查看和控制进程状态。</p>\n<h3 id=\"4-XML-RPC-Interface\"><a href=\"#4-XML-RPC-Interface\" class=\"headerlink\" title=\"4. XML-RPC Interface\"></a>4. XML-RPC Interface</h3><p>服务于web UI的同一个HTTP服务器提供一个XML-RPC接口，该接口可用于询问和控制管理器及其运行的程序。参见XML-RPC API文档。</p>\n<h3 id=\"5-目录结构\"><a href=\"#5-目录结构\" class=\"headerlink\" title=\"5. 目录结构\"></a>5. 目录结构</h3><p>整体看一下目录结构：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">├── __init__.py\n├── childutils.py\n├── compat.py\n├── confecho.py\n├── datatypes.py\n├── dispatchers.py\n├── events.py\n├── http.py\n├── http_client.py\n├── loggers.py\n├── medusa\n│   ├── CHANGES.txt\n│   ├── LICENSE.txt\n│   ├── README.txt\n│   ├── TODO.txt\n│   ├── __init__.py\n│   ├── asynchat_25.py\n│   ├── asyncore_25.py\n│   ├── auth_handler.py\n│   ├── counter.py\n│   ├── default_handler.py\n│   ├── docs\n│   │   ├── README.html\n│   │   ├── async_blurbs.txt\n│   │   ├── composing_producers.gif\n│   │   ├── data_flow.gif\n│   │   ├── data_flow.html\n│   │   ├── producers.gif\n│   │   ├── programming.html\n│   │   ├── proxy_notes.txt\n│   │   ├── threads.txt\n│   │   └── tkinter.txt\n│   ├── filesys.py\n│   ├── http_date.py\n│   ├── http_server.py\n│   ├── logger.py\n│   ├── producers.py\n│   ├── util.py\n│   └── xmlrpc_handler.py\n├── options.py\n├── pidproxy.py\n├── poller.py\n├── process.py\n├── rpcinterface.py\n├── scripts\n│   ├── loop_eventgen.py\n│   ├── loop_listener.py\n│   ├── sample_commevent.py\n│   ├── sample_eventlistener.py\n│   └── sample_exiting_eventlistener.py\n├── skel\n│   └── sample.conf\n├── socket_manager.py\n├── states.py\n├── supervisorctl.py\n├── supervisord.py\n├── tests\n│   ├── __init__.py\n│   ├── base.py\n│   ├── fixtures\n│   │   ├── donothing.conf\n│   │   ├── example\n│   │   │   └── included.conf\n│   │   ├── hello.sh\n│   │   ├── include.conf\n│   │   ├── issue-1054.conf\n│   │   ├── issue-565.conf\n│   │   ├── issue-638.conf\n│   │   ├── issue-663.conf\n│   │   ├── issue-664.conf\n│   │   ├── issue-835.conf\n│   │   ├── issue-836.conf\n│   │   ├── listener.py\n│   │   ├── spew.py\n│   │   └── unkillable_spew.py\n│   ├── test_childutils.py\n│   ├── test_confecho.py\n│   ├── test_datatypes.py\n│   ├── test_dispatchers.py\n│   ├── test_end_to_end.py\n│   ├── test_events.py\n│   ├── test_http.py\n│   ├── test_http_client.py\n│   ├── test_loggers.py\n│   ├── test_options.py\n│   ├── test_poller.py\n│   ├── test_process.py\n│   ├── test_rpcinterfaces.py\n│   ├── test_socket_manager.py\n│   ├── test_states.py\n│   ├── test_supervisorctl.py\n│   ├── test_supervisord.py\n│   ├── test_web.py\n│   └── test_xmlrpc.py\n├── ui\n│   ├── images\n│   │   ├── button_refresh.gif\n│   │   ├── button_restart.gif\n│   │   ├── button_stop.gif\n│   │   ├── icon.png\n│   │   ├── rule.gif\n│   │   ├── state0.gif\n│   │   ├── state1.gif\n│   │   ├── state2.gif\n│   │   ├── state3.gif\n│   │   └── supervisor.gif\n│   ├── status.html\n│   ├── stylesheets\n│   │   └── supervisor.css\n│   └── tail.html\n├── version.txt\n├── web.py\n└── xmlrpc.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>整体架构</p>\n<p>源码学习按上面的分块进行介绍</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/t4Mc7M.jpg\"></p>\n<h2 id=\"supervisord\"><a href=\"#supervisord\" class=\"headerlink\" title=\"supervisord\"></a>supervisord</h2><p>先找到入口程序</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Main program</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"posix\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This code makes Unix-specific assumptions\"</span>\n    <span class=\"token comment\"># if we hup, restart by making a new Supervisor()</span>\n    first <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        options <span class=\"token operator\">=</span> ServerOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>realize<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> doc<span class=\"token operator\">=</span>__doc__<span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> first\n        options<span class=\"token punctuation\">.</span>test <span class=\"token operator\">=</span> test\n        <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">.</span>profile_options<span class=\"token punctuation\">:</span>\n            sort_order<span class=\"token punctuation\">,</span> callers <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>profile_options\n            profile<span class=\"token punctuation\">(</span><span class=\"token string\">'go(options)'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">locals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sort_order<span class=\"token punctuation\">,</span> callers<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            go<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>close_httpservers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>close_logger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        first <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">if</span> test <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>mood <span class=\"token operator\">&lt;</span> SupervisorStates<span class=\"token punctuation\">.</span>RESTARTING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># pragma: no cover</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从上面看出， main()中有个死循环一直只工作。<br>下面详细介绍，在循环中做了哪些工作？</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Main program</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"posix\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This code makes Unix-specific assumptions\"</span>\n    <span class=\"token comment\"># if we hup, restart by making a new Supervisor()</span>\n    first <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        options <span class=\"token operator\">=</span> ServerOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> 配置\n        options<span class=\"token punctuation\">.</span>realize<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> doc<span class=\"token operator\">=</span>__doc__<span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> first\n        options<span class=\"token punctuation\">.</span>test <span class=\"token operator\">=</span> test\n        <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">.</span>profile_options<span class=\"token punctuation\">:</span>\n            sort_order<span class=\"token punctuation\">,</span> callers <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>profile_options\n            profile<span class=\"token punctuation\">(</span><span class=\"token string\">'go(options)'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">locals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sort_order<span class=\"token punctuation\">,</span> callers<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            go<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> 加载配置开始运行\n        options<span class=\"token punctuation\">.</span>close_httpservers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>close_logger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        first <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">if</span> test <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>mood <span class=\"token operator\">&lt;</span> SupervisorStates<span class=\"token punctuation\">.</span>RESTARTING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># pragma: no cover</span>\n    d <span class=\"token operator\">=</span> Supervisor<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> 实例化一个Supervisor对象\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    d<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span> 运行main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数\n    <span class=\"token keyword\">except</span> asyncore<span class=\"token punctuation\">.</span>ExitNow<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Supervisor类的代码\"><a href=\"#Supervisor类的代码\" class=\"headerlink\" title=\"Supervisor类的代码\"></a><code>Supervisor</code>类的代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Supervisor</span><span class=\"token punctuation\">:</span>\n    stopping <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># set after we detect that we are handling a stop request</span>\n    lastshutdownreport <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># throttle for delayed process error reports at stop</span>\n    process_groups <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># map of process group name to process group object</span>\n    stop_groups <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># list used for priority ordered shutdown</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 初始化</span>\n        self<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options <span class=\"token comment\"># 配置</span>\n        self<span class=\"token punctuation\">.</span>process_groups <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        self<span class=\"token punctuation\">.</span>ticks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># prevent crash on libdispatch-based systems, at least for the</span>\n            <span class=\"token comment\"># first request</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>cleanup_fds<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>set_uid_or_exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>set_rlimits_or_exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># this sets the options.logger object</span>\n        <span class=\"token comment\"># delay logger instantiation until after setuid</span>\n        self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>make_logger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>nocleanup<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># clean up old automatic logs</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>clear_autochildlogdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 运行</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>process_groups <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  <span class=\"token comment\"># clear</span>\n        self<span class=\"token punctuation\">.</span>stop_groups <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># clear</span>\n        events<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 根据配置进行添加process</span>\n            <span class=\"token keyword\">for</span> config <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>process_group_configs<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>add_process_group<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 进程环境</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>process_environment<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 打开http web</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>openhttpservers<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 用于捕获信号</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>setsignals<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 主进程是否成为守护进程</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>nodaemon<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>daemonize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># writing pid file needs to come *after* daemonizing or pid</span>\n            <span class=\"token comment\"># will be wrong</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>write_pidfile<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 运行异步io服务器</span>\n            self<span class=\"token punctuation\">.</span>runforever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 异常退出，清理工作</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>cleanup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/gPpFtg.jpg\"></p>\n<p>上面代码只有 <code>self.runforever()</code> 是工作的</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">runforever</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token comment\"># 事件通知机制</span>\n    events<span class=\"token punctuation\">.</span>notify<span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">.</span>SupervisorRunningEvent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># this cannot be fewer than the smallest TickEvent (5)</span>\n    <span class=\"token comment\"># 获取已经注册的句柄</span>\n    socket_map <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>get_socket_map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 这里会一直 运行，相当于守护进程</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 保存运行信息等</span>\n        combined_map <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        combined_map<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>socket_map<span class=\"token punctuation\">)</span>\n        combined_map<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>get_process_map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 进程信息</span>\n        pgroups <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>process_groups<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        pgroups<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 根据进程配置开启或关闭进程</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>mood <span class=\"token operator\">&lt;</span> SupervisorStates<span class=\"token punctuation\">.</span>RUNNING<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>stopping<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># first time, set the stopping flag, do a</span>\n                <span class=\"token comment\"># notification and set stop_groups</span>\n                self<span class=\"token punctuation\">.</span>stopping <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                self<span class=\"token punctuation\">.</span>stop_groups <span class=\"token operator\">=</span> pgroups<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n                events<span class=\"token punctuation\">.</span>notify<span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">.</span>SupervisorStoppingEvent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            self<span class=\"token punctuation\">.</span>ordered_stop_groups_phase_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>shutdown_report<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># if there are no unstopped processes (we're done</span>\n                <span class=\"token comment\"># killing everything), it's OK to shutdown or reload</span>\n                <span class=\"token keyword\">raise</span> asyncore<span class=\"token punctuation\">.</span>ExitNow\n                \n        <span class=\"token keyword\">for</span> fd<span class=\"token punctuation\">,</span> dispatcher <span class=\"token keyword\">in</span> combined_map<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> dispatcher<span class=\"token punctuation\">.</span>readable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>poller<span class=\"token punctuation\">.</span>register_readable<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> dispatcher<span class=\"token punctuation\">.</span>writable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>poller<span class=\"token punctuation\">.</span>register_writable<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># poll操作</span>\n        r<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>poller<span class=\"token punctuation\">.</span>poll<span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> fd <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> fd <span class=\"token keyword\">in</span> combined_map<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    dispatcher <span class=\"token operator\">=</span> combined_map<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n                    self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span>blather<span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">'read event caused by %(dispatcher)r'</span><span class=\"token punctuation\">,</span>\n                        dispatcher<span class=\"token operator\">=</span>dispatcher<span class=\"token punctuation\">)</span>\n                    dispatcher<span class=\"token punctuation\">.</span>handle_read_event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> dispatcher<span class=\"token punctuation\">.</span>readable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>poller<span class=\"token punctuation\">.</span>unregister_readable<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> asyncore<span class=\"token punctuation\">.</span>ExitNow<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">raise</span>\n                <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                    combined_map<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>handle_error<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 依次遍历注册的文件句柄</span>\n        <span class=\"token keyword\">for</span> fd <span class=\"token keyword\">in</span> w<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> fd <span class=\"token keyword\">in</span> combined_map<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    dispatcher <span class=\"token operator\">=</span> combined_map<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n                    self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span>blather<span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">'write event caused by %(dispatcher)r'</span><span class=\"token punctuation\">,</span>\n                        dispatcher<span class=\"token operator\">=</span>dispatcher<span class=\"token punctuation\">)</span>\n                    dispatcher<span class=\"token punctuation\">.</span>handle_write_event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> dispatcher<span class=\"token punctuation\">.</span>writable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>poller<span class=\"token punctuation\">.</span>unregister_writable<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> asyncore<span class=\"token punctuation\">.</span>ExitNow<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">raise</span>\n                <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                    combined_map<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>handle_error<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> group <span class=\"token keyword\">in</span> pgroups<span class=\"token punctuation\">:</span>\n            group<span class=\"token punctuation\">.</span>transition<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 获取已经死亡的子进程信息</span>\n        self<span class=\"token punctuation\">.</span>reap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 处理信号</span>\n        self<span class=\"token punctuation\">.</span>handle_signal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># tick时钟</span>\n        self<span class=\"token punctuation\">.</span>tick<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>mood <span class=\"token operator\">&lt;</span> SupervisorStates<span class=\"token punctuation\">.</span>RUNNING<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>ordered_stop_groups_phase_2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/kJHHD0.jpg\"></p>\n<h3 id=\"管理process\"><a href=\"#管理process\" class=\"headerlink\" title=\"管理process\"></a>管理process</h3><p>下面详细介绍一下如何管理一个process：<br>下面图可以指导主要是</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_process_group</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>name\n    <span class=\"token keyword\">if</span> name <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>process_groups<span class=\"token punctuation\">:</span>\n        config<span class=\"token punctuation\">.</span>after_setuid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 根据初始化后的配置文件生成相应的子进程实例</span>\n        self<span class=\"token punctuation\">.</span>process_groups<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>make_group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加事件通知</span>\n        events<span class=\"token punctuation\">.</span>notify<span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">.</span>ProcessGroupAddedEvent<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在supervisor配置中，我们需要写上执行的文件以及执行环境env. 所以，我们围绕 <code>执行这个程序的逻辑就可以了</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">execve</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>execve<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>作者将所有的process或event的配置 都绑定到 <code>options</code>的对象上， 包括执行的程序以及各种状态， 然后一个deamon程序一直在运行，去实时检查配置是否发生变化了。做对应的操作。</p>\n<h3 id=\"supervisorclt\"><a href=\"#supervisorclt\" class=\"headerlink\" title=\"supervisorclt\"></a>supervisorclt</h3><p>这个客户端功能：</p>\n<ol>\n<li>需要有一个UI,实现是cli</li>\n<li>与server通信</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> options <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n       <span class=\"token comment\"># 实例化对象</span>\n        options <span class=\"token operator\">=</span> ClientOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    options<span class=\"token punctuation\">.</span>realize<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> doc<span class=\"token operator\">=</span>__doc__<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 控制器</span>\n    c <span class=\"token operator\">=</span> Controller<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">:</span>\n        c<span class=\"token punctuation\">.</span>onecmd<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>exitstatus<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 如果是交互模式</span>\n    <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 一直loop, 图形编程常见操作模式</span>\n        c<span class=\"token punctuation\">.</span>exec_cmdloop<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># exitstatus always 0 for interactive mode</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们看交互式的逻辑，<code>exec_cmdloop</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 控制器的method</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">exec_cmdloop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">import</span> readline\n        delims <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span>get_completer_delims<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        delims <span class=\"token operator\">=</span> delims<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \"group:process\" as one word</span>\n        delims <span class=\"token operator\">=</span> delims<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \"group:*\" as one word</span>\n        delims <span class=\"token operator\">=</span> delims<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># names with \"-\" as one word</span>\n        readline<span class=\"token punctuation\">.</span>set_completer_delims<span class=\"token punctuation\">(</span>delims<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">.</span>history_file<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                readline<span class=\"token punctuation\">.</span>read_history_file<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>history_file<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> IOError<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">pass</span>\n\n            <span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    readline<span class=\"token punctuation\">.</span>write_history_file<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>history_file<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> IOError<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">pass</span>\n\n            <span class=\"token keyword\">import</span> atexit\n            atexit<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>cmdqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># cmdloop</span>\n        self<span class=\"token punctuation\">.</span>cmdloop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">pass</span>\n   \n<span class=\"token comment\"># cmdloop method定义  </span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmdloop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> intro<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Repeatedly issue a prompt, accept input, parse an initial prefix\n    off the received input, and dispatch to action methods, passing them\n    the remainder of the line as argument.\n\n    \"\"\"</span>\n\n    self<span class=\"token punctuation\">.</span>preloop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 输入和快捷键</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>use_rawinput <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>completekey<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">import</span> readline\n            self<span class=\"token punctuation\">.</span>old_completer <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span>get_completer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            readline<span class=\"token punctuation\">.</span>set_completer<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>complete<span class=\"token punctuation\">)</span>\n            readline<span class=\"token punctuation\">.</span>parse_and_bind<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>completekey<span class=\"token operator\">+</span><span class=\"token string\">\": complete\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> intro <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>intro <span class=\"token operator\">=</span> intro\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>intro<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>intro<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n        stop <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> stop<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>cmdqueue<span class=\"token punctuation\">:</span>\n                line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cmdqueue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>use_rawinput<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                        line <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>prompt<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">except</span> EOFError<span class=\"token punctuation\">:</span>\n                        line <span class=\"token operator\">=</span> <span class=\"token string\">'EOF'</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>prompt<span class=\"token punctuation\">)</span>\n                    self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        line <span class=\"token operator\">=</span> <span class=\"token string\">'EOF'</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\r\\n'</span><span class=\"token punctuation\">)</span>\n            line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>precmd<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n            stop <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>onecmd<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n            stop <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>postcmd<span class=\"token punctuation\">(</span>stop<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>postloop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>use_rawinput <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>completekey<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">import</span> readline\n                readline<span class=\"token punctuation\">.</span>set_completer<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>old_completer<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">pass</span>\n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面执行又会执行到<code>onecmd</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">onecmd</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Interpret the argument as though it had been typed in response\n    to the prompt.\n\n    This may be overridden, but should not normally need to be;\n    see the precmd() and postcmd() methods for useful execution hooks.\n    The return value is a flag indicating whether interpretation of\n    commands by the interpreter should stop.\n\n    \"\"\"</span>\n    cmd<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>parseline<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> line<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>emptyline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> cmd <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>lastcmd <span class=\"token operator\">=</span> line\n    <span class=\"token keyword\">if</span> line <span class=\"token operator\">==</span> <span class=\"token string\">'EOF'</span> <span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>lastcmd <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            func <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">'do_'</span> <span class=\"token operator\">+</span> cmd<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> AttributeError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看出 会返回一个<code>func = getattr(self, 'do_' + cmd)</code>,函数调用，是以<code>do_开头的函数</code><br>在supervisorctl的源码文件中， 我们找一个示例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">do_start</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>upcheck<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    names <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 连接supervisor服务的代理</span>\n    supervisor <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>get_supervisor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> names<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: start requires a process name\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>exitstatus <span class=\"token operator\">=</span> LSBInitExitStatuses<span class=\"token punctuation\">.</span>INVALID_ARGS\n        self<span class=\"token punctuation\">.</span>help_start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    \n    <span class=\"token comment\"># 开启所有</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">'all'</span> <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 调用startAllProcesses函数</span>\n        results <span class=\"token operator\">=</span> supervisor<span class=\"token punctuation\">.</span>startAllProcesses<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> result <span class=\"token keyword\">in</span> results<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_startresult<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>set_exitstatus_from_xmlrpc_fault<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> xmlrpc<span class=\"token punctuation\">.</span>Faults<span class=\"token punctuation\">.</span>ALREADY_STARTED<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 逐个关闭</span>\n        <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span>\n            group_name<span class=\"token punctuation\">,</span> process_name <span class=\"token operator\">=</span> split_namespec<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> process_name <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    results <span class=\"token operator\">=</span> supervisor<span class=\"token punctuation\">.</span>startProcessGroup<span class=\"token punctuation\">(</span>group_name<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">for</span> result <span class=\"token keyword\">in</span> results<span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_startresult<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>set_exitstatus_from_xmlrpc_fault<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> xmlrpc<span class=\"token punctuation\">.</span>Faults<span class=\"token punctuation\">.</span>ALREADY_STARTED<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> xmlrpclib<span class=\"token punctuation\">.</span>Fault <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span>faultCode <span class=\"token operator\">==</span> xmlrpc<span class=\"token punctuation\">.</span>Faults<span class=\"token punctuation\">.</span>BAD_NAME<span class=\"token punctuation\">:</span>\n                        error <span class=\"token operator\">=</span> <span class=\"token string\">\"%s: ERROR (no such group)\"</span> <span class=\"token operator\">%</span> group_name\n                        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n                        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>exitstatus <span class=\"token operator\">=</span> LSBInitExitStatuses<span class=\"token punctuation\">.</span>INVALID_ARGS\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>exitstatus <span class=\"token operator\">=</span> LSBInitExitStatuses<span class=\"token punctuation\">.</span>GENERIC\n                        <span class=\"token keyword\">raise</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    result <span class=\"token operator\">=</span> supervisor<span class=\"token punctuation\">.</span>startProcess<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> xmlrpclib<span class=\"token punctuation\">.</span>Fault <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                    error <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>faultCode<span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> process_name<span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'group'</span><span class=\"token punctuation\">:</span> group_name<span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'description'</span><span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>faultString<span class=\"token punctuation\">}</span>\n                    self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_startresult<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>set_exitstatus_from_xmlrpc_fault<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">[</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> xmlrpc<span class=\"token punctuation\">.</span>Faults<span class=\"token punctuation\">.</span>ALREADY_STARTED<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    name <span class=\"token operator\">=</span> make_namespec<span class=\"token punctuation\">(</span>group_name<span class=\"token punctuation\">,</span> process_name<span class=\"token punctuation\">)</span>\n                    self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token string\">'%s: started'</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面比较重要的就是远程通过rpc调用</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SupervisorNamespaceRPCInterface</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">startProcessGroup</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> wait<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Start all processes in the group named 'name'\n\n        @param string name     The group name\n        @param boolean wait    Wait for each process to be fully started\n        @return array result   An array of process status info structs\n        \"\"\"</span>\n        self<span class=\"token punctuation\">.</span>_update<span class=\"token punctuation\">(</span><span class=\"token string\">'startProcessGroup'</span><span class=\"token punctuation\">)</span>\n\n        group <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>supervisord<span class=\"token punctuation\">.</span>process_groups<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> group <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> RPCError<span class=\"token punctuation\">(</span>Faults<span class=\"token punctuation\">.</span>BAD_NAME<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\n        processes <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">.</span>processes<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        processes<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        processes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> process <span class=\"token keyword\">in</span> processes <span class=\"token punctuation\">]</span>\n\n        startall <span class=\"token operator\">=</span> make_allfunc<span class=\"token punctuation\">(</span>processes<span class=\"token punctuation\">,</span> isNotRunning<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>startProcess<span class=\"token punctuation\">,</span>\n                                wait<span class=\"token operator\">=</span>wait<span class=\"token punctuation\">)</span>\n\n        startall<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">=</span> <span class=\"token number\">0.05</span>\n        startall<span class=\"token punctuation\">.</span>rpcinterface <span class=\"token operator\">=</span> self\n        <span class=\"token keyword\">return</span> startall <span class=\"token comment\"># deferred</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"web-UI\"><a href=\"#web-UI\" class=\"headerlink\" title=\"web UI\"></a>web UI</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_http_servers</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> supervisord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> supervisor<span class=\"token punctuation\">.</span>web <span class=\"token keyword\">import</span> supervisor_ui_handler\n    uihandler <span class=\"token operator\">=</span> supervisor_ui_handler<span class=\"token punctuation\">(</span>supervisord<span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">supervisor_ui_handler</span><span class=\"token punctuation\">:</span>\n    IDENT <span class=\"token operator\">=</span> <span class=\"token string\">'Supervisor Web UI HTTP Request Handler'</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> supervisord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>supervisord <span class=\"token operator\">=</span> supervisord\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>command <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        path<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> fragment <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>split_uri<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">while</span> path<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> path<span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> <span class=\"token string\">'index.html'</span>\n\n        <span class=\"token keyword\">for</span> viewname <span class=\"token keyword\">in</span> VIEWS<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> viewname <span class=\"token operator\">==</span> path<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">handle_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>command <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n            request<span class=\"token punctuation\">.</span>collector <span class=\"token operator\">=</span> collector<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>continue_request<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">continue_request</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        form <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        cgi_env <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>cgi_environment<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        form<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>cgi_env<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">'QUERY_STRING'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> form<span class=\"token punctuation\">:</span>\n            form<span class=\"token punctuation\">[</span><span class=\"token string\">'QUERY_STRING'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n        query <span class=\"token operator\">=</span> form<span class=\"token punctuation\">[</span><span class=\"token string\">'QUERY_STRING'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># we only handle x-www-form-urlencoded values from POSTs</span>\n        form_urlencoded <span class=\"token operator\">=</span> parse_qsl<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        query_data <span class=\"token operator\">=</span> parse_qs<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> query_data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># ignore dupes</span>\n            form<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> form_urlencoded<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># ignore dupes</span>\n            form<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n\n        form<span class=\"token punctuation\">[</span><span class=\"token string\">'SERVER_URL'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>get_server_url<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        path <span class=\"token operator\">=</span> form<span class=\"token punctuation\">[</span><span class=\"token string\">'PATH_INFO'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># strip off all leading slashes</span>\n        <span class=\"token keyword\">while</span> path <span class=\"token keyword\">and</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> path<span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> <span class=\"token string\">'index.html'</span>\n\n        viewinfo <span class=\"token operator\">=</span> VIEWS<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> viewinfo <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># this should never happen if our match method works</span>\n            <span class=\"token keyword\">return</span>\n\n        response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'headers'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n        viewclass <span class=\"token operator\">=</span> viewinfo<span class=\"token punctuation\">[</span><span class=\"token string\">'view'</span><span class=\"token punctuation\">]</span>\n        viewtemplate <span class=\"token operator\">=</span> viewinfo<span class=\"token punctuation\">[</span><span class=\"token string\">'template'</span><span class=\"token punctuation\">]</span>\n        context <span class=\"token operator\">=</span> ViewContext<span class=\"token punctuation\">(</span>template<span class=\"token operator\">=</span>viewtemplate<span class=\"token punctuation\">,</span>\n                              request <span class=\"token operator\">=</span> request<span class=\"token punctuation\">,</span>\n                              form <span class=\"token operator\">=</span> form<span class=\"token punctuation\">,</span>\n                              response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">,</span>\n                              supervisord<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>supervisord<span class=\"token punctuation\">)</span>\n        view <span class=\"token operator\">=</span> viewclass<span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n        pushproducer <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">.</span>push_with_producer\n        pushproducer<span class=\"token punctuation\">(</span>DeferredWebProducer<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">supervisor_xmlrpc_handler</span><span class=\"token punctuation\">(</span>xmlrpc_handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    path <span class=\"token operator\">=</span> <span class=\"token string\">'/RPC2'</span>\n    IDENT <span class=\"token operator\">=</span> <span class=\"token string\">'Supervisor XML-RPC Handler'</span>\n\n    unmarshallers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"i4\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>text <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">or</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"double\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"dateTime.iso8601\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> make_datetime<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"array\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"struct\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">or</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> as_string<span class=\"token punctuation\">(</span>decodestring<span class=\"token punctuation\">(</span>as_bytes<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">or</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"param\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> supervisord<span class=\"token punctuation\">,</span> subinterfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>rpcinterface <span class=\"token operator\">=</span> RootRPCInterface<span class=\"token punctuation\">(</span>subinterfaces<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>supervisord <span class=\"token operator\">=</span> supervisord\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">loads</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        params <span class=\"token operator\">=</span> method <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">for</span> action<span class=\"token punctuation\">,</span> elem <span class=\"token keyword\">in</span> iterparse<span class=\"token punctuation\">(</span>StringIO<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            unmarshall <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>unmarshallers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> unmarshall<span class=\"token punctuation\">:</span>\n                data <span class=\"token operator\">=</span> unmarshall<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n                elem<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                elem<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> data\n            <span class=\"token keyword\">elif</span> elem<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">==</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    data <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text\n                <span class=\"token keyword\">except</span> IndexError<span class=\"token punctuation\">:</span>\n                    data <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">or</span> <span class=\"token string\">\"\"</span>\n                elem<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                elem<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> data\n            <span class=\"token keyword\">elif</span> elem<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">==</span> <span class=\"token string\">\"methodName\"</span><span class=\"token punctuation\">:</span>\n                method <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>text\n            <span class=\"token keyword\">elif</span> elem<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">==</span> <span class=\"token string\">\"params\"</span><span class=\"token punctuation\">:</span>\n                params <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> elem<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> params<span class=\"token punctuation\">,</span> method\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span>uri<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">continue_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        logger <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>supervisord<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>logger\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># on 2.x, the Expat parser doesn't like Unicode which actually</span>\n                <span class=\"token comment\"># contains non-ASCII characters. It's a bit of a kludge to</span>\n                <span class=\"token comment\"># do it conditionally here, but it's down to how underlying</span>\n                <span class=\"token comment\"># libs behave</span>\n                <span class=\"token keyword\">if</span> PY2<span class=\"token punctuation\">:</span>\n                    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'ascii'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'xmlcharrefreplace'</span><span class=\"token punctuation\">)</span>\n                params<span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">'XML-RPC request data %r is invalid: unmarshallable'</span> <span class=\"token operator\">%</span>\n                    <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                request<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n\n            <span class=\"token comment\"># no &lt;methodName&gt; in the request or name is an empty string</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> method<span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">'XML-RPC request data %r is invalid: no method name'</span> <span class=\"token operator\">%</span>\n                    <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                request<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n\n            <span class=\"token comment\"># we allow xml-rpc clients that do not send empty &lt;params&gt;</span>\n            <span class=\"token comment\"># when there are no parameters for the method call</span>\n            <span class=\"token keyword\">if</span> params <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                params <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>trace<span class=\"token punctuation\">(</span><span class=\"token string\">'XML-RPC method called: %s()'</span> <span class=\"token operator\">%</span> method<span class=\"token punctuation\">)</span>\n                value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n                logger<span class=\"token punctuation\">.</span>trace<span class=\"token punctuation\">(</span><span class=\"token string\">'XML-RPC method %s() returned successfully'</span> <span class=\"token operator\">%</span>\n                             method<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> RPCError <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># turn RPCError reported by method into a Fault instance</span>\n                value <span class=\"token operator\">=</span> xmlrpclib<span class=\"token punctuation\">.</span>Fault<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n                logger<span class=\"token punctuation\">.</span>trace<span class=\"token punctuation\">(</span><span class=\"token string\">'XML-RPC method %s() returned fault: [%d] %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>\n                    method<span class=\"token punctuation\">,</span>\n                    err<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> types<span class=\"token punctuation\">.</span>FunctionType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># returning a function from an RPC method implies that</span>\n                <span class=\"token comment\"># this needs to be a deferred response (it needs to block).</span>\n                pushproducer <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">.</span>push_with_producer\n                pushproducer<span class=\"token punctuation\">(</span>DeferredXMLRPCResponse<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># if we get anything but a function, it implies that this</span>\n                <span class=\"token comment\"># response doesn't need to be deferred, we can service it</span>\n                <span class=\"token comment\"># right away.</span>\n                body <span class=\"token operator\">=</span> as_bytes<span class=\"token punctuation\">(</span>xmlrpc_marshal<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                request<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'text/xml'</span>\n                request<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n                request<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n                request<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            tb <span class=\"token operator\">=</span> traceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            logger<span class=\"token punctuation\">.</span>critical<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"Handling XML-RPC request with data %r raised an unexpected \"</span>\n                <span class=\"token string\">\"exception: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> tb<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># internal error, report as HTTP server error</span>\n            request<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> traverse<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>rpcinterface<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Hwfzfb.jpg\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>python是解释型语言 弱类型，看源码没有编译型语言清晰明了。这个源码不太容易看，我参考supervisor的设计写公司项目，一开始是看这个源码，发现很不容易理清楚，我是先看了go语言版的，然后在回头看python版的才看明白。可以直接看go版本的，那个更加清晰。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/mTUPK0.jpg\"></p>\n<p>今天介绍一下supervisor的源码。 supervisor是python写的。如果你不懂python，我也介绍一下golang版的实现。 如果你不会，其他语言的实现，应该也有，github找一下。 自己读一下。实现原理应该都是一样的。</p>\n<p><a href=\"https://github.com/Supervisor/supervisor\">源码</a></p>\n<h2 id=\"supervisor的组件\"><a href=\"#supervisor的组件\" class=\"headerlink\" title=\"supervisor的组件\"></a>supervisor的组件</h2><h3 id=\"1-supervisord\"><a href=\"#1-supervisord\" class=\"headerlink\" title=\"1. supervisord\"></a>1. supervisord</h3><blockquote>\n<p>服务器主进程名为supervisord。它负责在自己的调用中启动子程序，响应来自客户端的命令，重新启动崩溃或退出的子进程，记录其子进程stdout和stderr 输出，以及生成和处理与子进程生命周期中的点相对应的“事件”。</p>\n</blockquote>\n<p>服务器进程使用配置文件。这通常位于/etc/supervisord.conf中。此配置文件是“Windows-INI”样式配置文件。通过适当的文件系统权限保持此文件的安全非常重要，因为它可能包含未加密的用户名和密码。</p>\n<h3 id=\"2-supervisorctl\"><a href=\"#2-supervisorctl\" class=\"headerlink\" title=\"2. supervisorctl\"></a>2. supervisorctl</h3><p>主进程的命令行客户端部分名为 supervisorctl。它为supervisord提供的功能提供了类似shell的界面。从 supervisorctl，用户可以连接到不同的 supervisord进程（一次一个），获取由子进程控制的状态，停止和启动子进程，并获取supervisord的运行进程列表。</p>\n<p>命令行客户机通过UNIX域套接字或internet (TCP)套接字与服务器通信。服务器可以断言客户机的用户应该在执行命令之前提供身份验证凭据。客户机进程通常使用与服务器相同的配置文件，但是其中包含[supervisorctl]部分的任何配置文件都可以工作。</p>\n<h3 id=\"3-Web-Server\"><a href=\"#3-Web-Server\" class=\"headerlink\" title=\"3. Web Server\"></a>3. Web Server</h3><p>如果您针对internet套接字启动了adminord，那么可以通过浏览器访问具有与supervise orctl类似功能的(稀疏的)web用户界面。在激活配置文件的<code>[inet_http_server]</code>部分之后，访问服务器URL(例如<code>http://localhost:9001/</code>)，通过web界面查看和控制进程状态。</p>\n<h3 id=\"4-XML-RPC-Interface\"><a href=\"#4-XML-RPC-Interface\" class=\"headerlink\" title=\"4. XML-RPC Interface\"></a>4. XML-RPC Interface</h3><p>服务于web UI的同一个HTTP服务器提供一个XML-RPC接口，该接口可用于询问和控制管理器及其运行的程序。参见XML-RPC API文档。</p>\n<h3 id=\"5-目录结构\"><a href=\"#5-目录结构\" class=\"headerlink\" title=\"5. 目录结构\"></a>5. 目录结构</h3><p>整体看一下目录结构：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">├── __init__.py\n├── childutils.py\n├── compat.py\n├── confecho.py\n├── datatypes.py\n├── dispatchers.py\n├── events.py\n├── http.py\n├── http_client.py\n├── loggers.py\n├── medusa\n│   ├── CHANGES.txt\n│   ├── LICENSE.txt\n│   ├── README.txt\n│   ├── TODO.txt\n│   ├── __init__.py\n│   ├── asynchat_25.py\n│   ├── asyncore_25.py\n│   ├── auth_handler.py\n│   ├── counter.py\n│   ├── default_handler.py\n│   ├── docs\n│   │   ├── README.html\n│   │   ├── async_blurbs.txt\n│   │   ├── composing_producers.gif\n│   │   ├── data_flow.gif\n│   │   ├── data_flow.html\n│   │   ├── producers.gif\n│   │   ├── programming.html\n│   │   ├── proxy_notes.txt\n│   │   ├── threads.txt\n│   │   └── tkinter.txt\n│   ├── filesys.py\n│   ├── http_date.py\n│   ├── http_server.py\n│   ├── logger.py\n│   ├── producers.py\n│   ├── util.py\n│   └── xmlrpc_handler.py\n├── options.py\n├── pidproxy.py\n├── poller.py\n├── process.py\n├── rpcinterface.py\n├── scripts\n│   ├── loop_eventgen.py\n│   ├── loop_listener.py\n│   ├── sample_commevent.py\n│   ├── sample_eventlistener.py\n│   └── sample_exiting_eventlistener.py\n├── skel\n│   └── sample.conf\n├── socket_manager.py\n├── states.py\n├── supervisorctl.py\n├── supervisord.py\n├── tests\n│   ├── __init__.py\n│   ├── base.py\n│   ├── fixtures\n│   │   ├── donothing.conf\n│   │   ├── example\n│   │   │   └── included.conf\n│   │   ├── hello.sh\n│   │   ├── include.conf\n│   │   ├── issue-1054.conf\n│   │   ├── issue-565.conf\n│   │   ├── issue-638.conf\n│   │   ├── issue-663.conf\n│   │   ├── issue-664.conf\n│   │   ├── issue-835.conf\n│   │   ├── issue-836.conf\n│   │   ├── listener.py\n│   │   ├── spew.py\n│   │   └── unkillable_spew.py\n│   ├── test_childutils.py\n│   ├── test_confecho.py\n│   ├── test_datatypes.py\n│   ├── test_dispatchers.py\n│   ├── test_end_to_end.py\n│   ├── test_events.py\n│   ├── test_http.py\n│   ├── test_http_client.py\n│   ├── test_loggers.py\n│   ├── test_options.py\n│   ├── test_poller.py\n│   ├── test_process.py\n│   ├── test_rpcinterfaces.py\n│   ├── test_socket_manager.py\n│   ├── test_states.py\n│   ├── test_supervisorctl.py\n│   ├── test_supervisord.py\n│   ├── test_web.py\n│   └── test_xmlrpc.py\n├── ui\n│   ├── images\n│   │   ├── button_refresh.gif\n│   │   ├── button_restart.gif\n│   │   ├── button_stop.gif\n│   │   ├── icon.png\n│   │   ├── rule.gif\n│   │   ├── state0.gif\n│   │   ├── state1.gif\n│   │   ├── state2.gif\n│   │   ├── state3.gif\n│   │   └── supervisor.gif\n│   ├── status.html\n│   ├── stylesheets\n│   │   └── supervisor.css\n│   └── tail.html\n├── version.txt\n├── web.py\n└── xmlrpc.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>整体架构</p>\n<p>源码学习按上面的分块进行介绍</p>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/t4Mc7M.jpg\"></p>\n<h2 id=\"supervisord\"><a href=\"#supervisord\" class=\"headerlink\" title=\"supervisord\"></a>supervisord</h2><p>先找到入口程序</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Main program</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"posix\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This code makes Unix-specific assumptions\"</span>\n    <span class=\"token comment\"># if we hup, restart by making a new Supervisor()</span>\n    first <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        options <span class=\"token operator\">=</span> ServerOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>realize<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> doc<span class=\"token operator\">=</span>__doc__<span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> first\n        options<span class=\"token punctuation\">.</span>test <span class=\"token operator\">=</span> test\n        <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">.</span>profile_options<span class=\"token punctuation\">:</span>\n            sort_order<span class=\"token punctuation\">,</span> callers <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>profile_options\n            profile<span class=\"token punctuation\">(</span><span class=\"token string\">'go(options)'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">locals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sort_order<span class=\"token punctuation\">,</span> callers<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            go<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>close_httpservers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>close_logger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        first <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">if</span> test <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>mood <span class=\"token operator\">&lt;</span> SupervisorStates<span class=\"token punctuation\">.</span>RESTARTING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># pragma: no cover</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从上面看出， main()中有个死循环一直只工作。<br>下面详细介绍，在循环中做了哪些工作？</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Main program</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> test<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"posix\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This code makes Unix-specific assumptions\"</span>\n    <span class=\"token comment\"># if we hup, restart by making a new Supervisor()</span>\n    first <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        options <span class=\"token operator\">=</span> ServerOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> 配置\n        options<span class=\"token punctuation\">.</span>realize<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> doc<span class=\"token operator\">=</span>__doc__<span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>first <span class=\"token operator\">=</span> first\n        options<span class=\"token punctuation\">.</span>test <span class=\"token operator\">=</span> test\n        <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">.</span>profile_options<span class=\"token punctuation\">:</span>\n            sort_order<span class=\"token punctuation\">,</span> callers <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>profile_options\n            profile<span class=\"token punctuation\">(</span><span class=\"token string\">'go(options)'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">locals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sort_order<span class=\"token punctuation\">,</span> callers<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            go<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> 加载配置开始运行\n        options<span class=\"token punctuation\">.</span>close_httpservers<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        options<span class=\"token punctuation\">.</span>close_logger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        first <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">if</span> test <span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>mood <span class=\"token operator\">&lt;</span> SupervisorStates<span class=\"token punctuation\">.</span>RESTARTING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># pragma: no cover</span>\n    d <span class=\"token operator\">=</span> Supervisor<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> 实例化一个Supervisor对象\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    d<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">//</span> 运行main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>函数\n    <span class=\"token keyword\">except</span> asyncore<span class=\"token punctuation\">.</span>ExitNow<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Supervisor类的代码\"><a href=\"#Supervisor类的代码\" class=\"headerlink\" title=\"Supervisor类的代码\"></a><code>Supervisor</code>类的代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Supervisor</span><span class=\"token punctuation\">:</span>\n    stopping <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>  <span class=\"token comment\"># set after we detect that we are handling a stop request</span>\n    lastshutdownreport <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># throttle for delayed process error reports at stop</span>\n    process_groups <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># map of process group name to process group object</span>\n    stop_groups <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># list used for priority ordered shutdown</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 初始化</span>\n        self<span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options <span class=\"token comment\"># 配置</span>\n        self<span class=\"token punctuation\">.</span>process_groups <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        self<span class=\"token punctuation\">.</span>ticks <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># prevent crash on libdispatch-based systems, at least for the</span>\n            <span class=\"token comment\"># first request</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>cleanup_fds<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>set_uid_or_exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>set_rlimits_or_exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># this sets the options.logger object</span>\n        <span class=\"token comment\"># delay logger instantiation until after setuid</span>\n        self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>make_logger<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>nocleanup<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># clean up old automatic logs</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>clear_autochildlogdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 运行</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>process_groups <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># clear</span>\n        self<span class=\"token punctuation\">.</span>stop_groups <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>  <span class=\"token comment\"># clear</span>\n        events<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 根据配置进行添加process</span>\n            <span class=\"token keyword\">for</span> config <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>process_group_configs<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>add_process_group<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 进程环境</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>process_environment<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 打开http web</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>openhttpservers<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 用于捕获信号</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>setsignals<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 主进程是否成为守护进程</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>nodaemon<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>daemonize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># writing pid file needs to come *after* daemonizing or pid</span>\n            <span class=\"token comment\"># will be wrong</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>write_pidfile<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># 运行异步io服务器</span>\n            self<span class=\"token punctuation\">.</span>runforever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 异常退出，清理工作</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>cleanup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/gPpFtg.jpg\"></p>\n<p>上面代码只有 <code>self.runforever()</code> 是工作的</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">runforever</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token comment\"># 事件通知机制</span>\n    events<span class=\"token punctuation\">.</span>notify<span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">.</span>SupervisorRunningEvent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    timeout <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># this cannot be fewer than the smallest TickEvent (5)</span>\n    <span class=\"token comment\"># 获取已经注册的句柄</span>\n    socket_map <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>get_socket_map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 这里会一直 运行，相当于守护进程</span>\n    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 保存运行信息等</span>\n        combined_map <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        combined_map<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>socket_map<span class=\"token punctuation\">)</span>\n        combined_map<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>get_process_map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 进程信息</span>\n        pgroups <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>process_groups<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        pgroups<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 根据进程配置开启或关闭进程</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>mood <span class=\"token operator\">&lt;</span> SupervisorStates<span class=\"token punctuation\">.</span>RUNNING<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>stopping<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># first time, set the stopping flag, do a</span>\n                <span class=\"token comment\"># notification and set stop_groups</span>\n                self<span class=\"token punctuation\">.</span>stopping <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                self<span class=\"token punctuation\">.</span>stop_groups <span class=\"token operator\">=</span> pgroups<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n                events<span class=\"token punctuation\">.</span>notify<span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">.</span>SupervisorStoppingEvent<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            self<span class=\"token punctuation\">.</span>ordered_stop_groups_phase_1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>shutdown_report<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># if there are no unstopped processes (we're done</span>\n                <span class=\"token comment\"># killing everything), it's OK to shutdown or reload</span>\n                <span class=\"token keyword\">raise</span> asyncore<span class=\"token punctuation\">.</span>ExitNow\n                \n        <span class=\"token keyword\">for</span> fd<span class=\"token punctuation\">,</span> dispatcher <span class=\"token keyword\">in</span> combined_map<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> dispatcher<span class=\"token punctuation\">.</span>readable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>poller<span class=\"token punctuation\">.</span>register_readable<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> dispatcher<span class=\"token punctuation\">.</span>writable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>poller<span class=\"token punctuation\">.</span>register_writable<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># poll操作</span>\n        r<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>poller<span class=\"token punctuation\">.</span>poll<span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> fd <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> fd <span class=\"token keyword\">in</span> combined_map<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    dispatcher <span class=\"token operator\">=</span> combined_map<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n                    self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span>blather<span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">'read event caused by %(dispatcher)r'</span><span class=\"token punctuation\">,</span>\n                        dispatcher<span class=\"token operator\">=</span>dispatcher<span class=\"token punctuation\">)</span>\n                    dispatcher<span class=\"token punctuation\">.</span>handle_read_event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> dispatcher<span class=\"token punctuation\">.</span>readable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>poller<span class=\"token punctuation\">.</span>unregister_readable<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> asyncore<span class=\"token punctuation\">.</span>ExitNow<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">raise</span>\n                <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                    combined_map<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>handle_error<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 依次遍历注册的文件句柄</span>\n        <span class=\"token keyword\">for</span> fd <span class=\"token keyword\">in</span> w<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> fd <span class=\"token keyword\">in</span> combined_map<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    dispatcher <span class=\"token operator\">=</span> combined_map<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span>\n                    self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span>blather<span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">'write event caused by %(dispatcher)r'</span><span class=\"token punctuation\">,</span>\n                        dispatcher<span class=\"token operator\">=</span>dispatcher<span class=\"token punctuation\">)</span>\n                    dispatcher<span class=\"token punctuation\">.</span>handle_write_event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> dispatcher<span class=\"token punctuation\">.</span>writable<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>poller<span class=\"token punctuation\">.</span>unregister_writable<span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> asyncore<span class=\"token punctuation\">.</span>ExitNow<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">raise</span>\n                <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                    combined_map<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>handle_error<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> group <span class=\"token keyword\">in</span> pgroups<span class=\"token punctuation\">:</span>\n            group<span class=\"token punctuation\">.</span>transition<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 获取已经死亡的子进程信息</span>\n        self<span class=\"token punctuation\">.</span>reap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 处理信号</span>\n        self<span class=\"token punctuation\">.</span>handle_signal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># tick时钟</span>\n        self<span class=\"token punctuation\">.</span>tick<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>mood <span class=\"token operator\">&lt;</span> SupervisorStates<span class=\"token punctuation\">.</span>RUNNING<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>ordered_stop_groups_phase_2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/kJHHD0.jpg\"></p>\n<h3 id=\"管理process\"><a href=\"#管理process\" class=\"headerlink\" title=\"管理process\"></a>管理process</h3><p>下面详细介绍一下如何管理一个process：<br>下面图可以指导主要是</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">add_process_group</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>name\n    <span class=\"token keyword\">if</span> name <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>process_groups<span class=\"token punctuation\">:</span>\n        config<span class=\"token punctuation\">.</span>after_setuid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 根据初始化后的配置文件生成相应的子进程实例</span>\n        self<span class=\"token punctuation\">.</span>process_groups<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>make_group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># 添加事件通知</span>\n        events<span class=\"token punctuation\">.</span>notify<span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">.</span>ProcessGroupAddedEvent<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在supervisor配置中，我们需要写上执行的文件以及执行环境env. 所以，我们围绕 <code>执行这个程序的逻辑就可以了</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">execve</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>execve<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>作者将所有的process或event的配置 都绑定到 <code>options</code>的对象上， 包括执行的程序以及各种状态， 然后一个deamon程序一直在运行，去实时检查配置是否发生变化了。做对应的操作。</p>\n<h3 id=\"supervisorclt\"><a href=\"#supervisorclt\" class=\"headerlink\" title=\"supervisorclt\"></a>supervisorclt</h3><p>这个客户端功能：</p>\n<ol>\n<li>需要有一个UI,实现是cli</li>\n<li>与server通信</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> options<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> options <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n       <span class=\"token comment\"># 实例化对象</span>\n        options <span class=\"token operator\">=</span> ClientOptions<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    options<span class=\"token punctuation\">.</span>realize<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> doc<span class=\"token operator\">=</span>__doc__<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 控制器</span>\n    c <span class=\"token operator\">=</span> Controller<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">:</span>\n        c<span class=\"token punctuation\">.</span>onecmd<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>exitstatus<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 如果是交互模式</span>\n    <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 一直loop, 图形编程常见操作模式</span>\n        c<span class=\"token punctuation\">.</span>exec_cmdloop<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># exitstatus always 0 for interactive mode</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>我们看交互式的逻辑，<code>exec_cmdloop</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 控制器的method</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">exec_cmdloop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">import</span> readline\n        delims <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span>get_completer_delims<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        delims <span class=\"token operator\">=</span> delims<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \"group:process\" as one word</span>\n        delims <span class=\"token operator\">=</span> delims<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># \"group:*\" as one word</span>\n        delims <span class=\"token operator\">=</span> delims<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># names with \"-\" as one word</span>\n        readline<span class=\"token punctuation\">.</span>set_completer_delims<span class=\"token punctuation\">(</span>delims<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> options<span class=\"token punctuation\">.</span>history_file<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                readline<span class=\"token punctuation\">.</span>read_history_file<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>history_file<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> IOError<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">pass</span>\n\n            <span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    readline<span class=\"token punctuation\">.</span>write_history_file<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>history_file<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> IOError<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">pass</span>\n\n            <span class=\"token keyword\">import</span> atexit\n            atexit<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>save<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>cmdqueue<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># cmdloop</span>\n        self<span class=\"token punctuation\">.</span>cmdloop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">pass</span>\n   \n<span class=\"token comment\"># cmdloop method定义  </span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">cmdloop</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> intro<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Repeatedly issue a prompt, accept input, parse an initial prefix\n    off the received input, and dispatch to action methods, passing them\n    the remainder of the line as argument.\n\n    \"\"\"</span>\n\n    self<span class=\"token punctuation\">.</span>preloop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 输入和快捷键</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>use_rawinput <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>completekey<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">import</span> readline\n            self<span class=\"token punctuation\">.</span>old_completer <span class=\"token operator\">=</span> readline<span class=\"token punctuation\">.</span>get_completer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            readline<span class=\"token punctuation\">.</span>set_completer<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>complete<span class=\"token punctuation\">)</span>\n            readline<span class=\"token punctuation\">.</span>parse_and_bind<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>completekey<span class=\"token operator\">+</span><span class=\"token string\">\": complete\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> intro <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>intro <span class=\"token operator\">=</span> intro\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>intro<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>intro<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n        stop <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> stop<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>cmdqueue<span class=\"token punctuation\">:</span>\n                line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>cmdqueue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>use_rawinput<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                        line <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>prompt<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">except</span> EOFError<span class=\"token punctuation\">:</span>\n                        line <span class=\"token operator\">=</span> <span class=\"token string\">'EOF'</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>prompt<span class=\"token punctuation\">)</span>\n                    self<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        line <span class=\"token operator\">=</span> <span class=\"token string\">'EOF'</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\r\\n'</span><span class=\"token punctuation\">)</span>\n            line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>precmd<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n            stop <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>onecmd<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n            stop <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>postcmd<span class=\"token punctuation\">(</span>stop<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>postloop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>use_rawinput <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>completekey<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">import</span> readline\n                readline<span class=\"token punctuation\">.</span>set_completer<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>old_completer<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">pass</span>\n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面执行又会执行到<code>onecmd</code></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">onecmd</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Interpret the argument as though it had been typed in response\n    to the prompt.\n\n    This may be overridden, but should not normally need to be;\n    see the precmd() and postcmd() methods for useful execution hooks.\n    The return value is a flag indicating whether interpretation of\n    commands by the interpreter should stop.\n\n    \"\"\"</span>\n    cmd<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>parseline<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> line<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>emptyline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> cmd <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>lastcmd <span class=\"token operator\">=</span> line\n    <span class=\"token keyword\">if</span> line <span class=\"token operator\">==</span> <span class=\"token string\">'EOF'</span> <span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>lastcmd <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">if</span> cmd <span class=\"token operator\">==</span> <span class=\"token string\">''</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            func <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">'do_'</span> <span class=\"token operator\">+</span> cmd<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> AttributeError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看出 会返回一个<code>func = getattr(self, &#39;do_&#39; + cmd)</code>,函数调用，是以<code>do_开头的函数</code><br>在supervisorctl的源码文件中， 我们找一个示例</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">do_start</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>upcheck<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    names <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 连接supervisor服务的代理</span>\n    supervisor <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>get_supervisor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> names<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: start requires a process name\"</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>exitstatus <span class=\"token operator\">=</span> LSBInitExitStatuses<span class=\"token punctuation\">.</span>INVALID_ARGS\n        self<span class=\"token punctuation\">.</span>help_start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    \n    <span class=\"token comment\"># 开启所有</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">'all'</span> <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 调用startAllProcesses函数</span>\n        results <span class=\"token operator\">=</span> supervisor<span class=\"token punctuation\">.</span>startAllProcesses<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> result <span class=\"token keyword\">in</span> results<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_startresult<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>set_exitstatus_from_xmlrpc_fault<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> xmlrpc<span class=\"token punctuation\">.</span>Faults<span class=\"token punctuation\">.</span>ALREADY_STARTED<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 逐个关闭</span>\n        <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span>\n            group_name<span class=\"token punctuation\">,</span> process_name <span class=\"token operator\">=</span> split_namespec<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> process_name <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    results <span class=\"token operator\">=</span> supervisor<span class=\"token punctuation\">.</span>startProcessGroup<span class=\"token punctuation\">(</span>group_name<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">for</span> result <span class=\"token keyword\">in</span> results<span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_startresult<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>set_exitstatus_from_xmlrpc_fault<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">[</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> xmlrpc<span class=\"token punctuation\">.</span>Faults<span class=\"token punctuation\">.</span>ALREADY_STARTED<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> xmlrpclib<span class=\"token punctuation\">.</span>Fault <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> e<span class=\"token punctuation\">.</span>faultCode <span class=\"token operator\">==</span> xmlrpc<span class=\"token punctuation\">.</span>Faults<span class=\"token punctuation\">.</span>BAD_NAME<span class=\"token punctuation\">:</span>\n                        error <span class=\"token operator\">=</span> <span class=\"token string\">\"%s: ERROR (no such group)\"</span> <span class=\"token operator\">%</span> group_name\n                        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n                        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>exitstatus <span class=\"token operator\">=</span> LSBInitExitStatuses<span class=\"token punctuation\">.</span>INVALID_ARGS\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>exitstatus <span class=\"token operator\">=</span> LSBInitExitStatuses<span class=\"token punctuation\">.</span>GENERIC\n                        <span class=\"token keyword\">raise</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    result <span class=\"token operator\">=</span> supervisor<span class=\"token punctuation\">.</span>startProcess<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">except</span> xmlrpclib<span class=\"token punctuation\">.</span>Fault <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n                    error <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>faultCode<span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> process_name<span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'group'</span><span class=\"token punctuation\">:</span> group_name<span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'description'</span><span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>faultString<span class=\"token punctuation\">&#125;</span>\n                    self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>_startresult<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>set_exitstatus_from_xmlrpc_fault<span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">[</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> xmlrpc<span class=\"token punctuation\">.</span>Faults<span class=\"token punctuation\">.</span>ALREADY_STARTED<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    name <span class=\"token operator\">=</span> make_namespec<span class=\"token punctuation\">(</span>group_name<span class=\"token punctuation\">,</span> process_name<span class=\"token punctuation\">)</span>\n                    self<span class=\"token punctuation\">.</span>ctl<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token string\">'%s: started'</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面比较重要的就是远程通过rpc调用</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SupervisorNamespaceRPCInterface</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">startProcessGroup</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> wait<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\" Start all processes in the group named 'name'\n\n        @param string name     The group name\n        @param boolean wait    Wait for each process to be fully started\n        @return array result   An array of process status info structs\n        \"\"\"</span>\n        self<span class=\"token punctuation\">.</span>_update<span class=\"token punctuation\">(</span><span class=\"token string\">'startProcessGroup'</span><span class=\"token punctuation\">)</span>\n\n        group <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>supervisord<span class=\"token punctuation\">.</span>process_groups<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> group <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> RPCError<span class=\"token punctuation\">(</span>Faults<span class=\"token punctuation\">.</span>BAD_NAME<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\n        processes <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">.</span>processes<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        processes<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        processes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> process <span class=\"token keyword\">in</span> processes <span class=\"token punctuation\">]</span>\n\n        startall <span class=\"token operator\">=</span> make_allfunc<span class=\"token punctuation\">(</span>processes<span class=\"token punctuation\">,</span> isNotRunning<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>startProcess<span class=\"token punctuation\">,</span>\n                                wait<span class=\"token operator\">=</span>wait<span class=\"token punctuation\">)</span>\n\n        startall<span class=\"token punctuation\">.</span>delay <span class=\"token operator\">=</span> <span class=\"token number\">0.05</span>\n        startall<span class=\"token punctuation\">.</span>rpcinterface <span class=\"token operator\">=</span> self\n        <span class=\"token keyword\">return</span> startall <span class=\"token comment\"># deferred</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"web-UI\"><a href=\"#web-UI\" class=\"headerlink\" title=\"web UI\"></a>web UI</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_http_servers</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> supervisord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> supervisor<span class=\"token punctuation\">.</span>web <span class=\"token keyword\">import</span> supervisor_ui_handler\n    uihandler <span class=\"token operator\">=</span> supervisor_ui_handler<span class=\"token punctuation\">(</span>supervisord<span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">supervisor_ui_handler</span><span class=\"token punctuation\">:</span>\n    IDENT <span class=\"token operator\">=</span> <span class=\"token string\">'Supervisor Web UI HTTP Request Handler'</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> supervisord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>supervisord <span class=\"token operator\">=</span> supervisord\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>command <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        path<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">,</span> fragment <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>split_uri<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">while</span> path<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> path<span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> <span class=\"token string\">'index.html'</span>\n\n        <span class=\"token keyword\">for</span> viewname <span class=\"token keyword\">in</span> VIEWS<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> viewname <span class=\"token operator\">==</span> path<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">handle_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>command <span class=\"token operator\">==</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">:</span>\n            request<span class=\"token punctuation\">.</span>collector <span class=\"token operator\">=</span> collector<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>continue_request<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">continue_request</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        form <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        cgi_env <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>cgi_environment<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        form<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>cgi_env<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">'QUERY_STRING'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> form<span class=\"token punctuation\">:</span>\n            form<span class=\"token punctuation\">[</span><span class=\"token string\">'QUERY_STRING'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n        query <span class=\"token operator\">=</span> form<span class=\"token punctuation\">[</span><span class=\"token string\">'QUERY_STRING'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># we only handle x-www-form-urlencoded values from POSTs</span>\n        form_urlencoded <span class=\"token operator\">=</span> parse_qsl<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n        query_data <span class=\"token operator\">=</span> parse_qs<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> query_data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># ignore dupes</span>\n            form<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> form_urlencoded<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># ignore dupes</span>\n            form<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n\n        form<span class=\"token punctuation\">[</span><span class=\"token string\">'SERVER_URL'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>get_server_url<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        path <span class=\"token operator\">=</span> form<span class=\"token punctuation\">[</span><span class=\"token string\">'PATH_INFO'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\"># strip off all leading slashes</span>\n        <span class=\"token keyword\">while</span> path <span class=\"token keyword\">and</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> path<span class=\"token punctuation\">:</span>\n            path <span class=\"token operator\">=</span> <span class=\"token string\">'index.html'</span>\n\n        viewinfo <span class=\"token operator\">=</span> VIEWS<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> viewinfo <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># this should never happen if our match method works</span>\n            <span class=\"token keyword\">return</span>\n\n        response <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'headers'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>\n\n        viewclass <span class=\"token operator\">=</span> viewinfo<span class=\"token punctuation\">[</span><span class=\"token string\">'view'</span><span class=\"token punctuation\">]</span>\n        viewtemplate <span class=\"token operator\">=</span> viewinfo<span class=\"token punctuation\">[</span><span class=\"token string\">'template'</span><span class=\"token punctuation\">]</span>\n        context <span class=\"token operator\">=</span> ViewContext<span class=\"token punctuation\">(</span>template<span class=\"token operator\">=</span>viewtemplate<span class=\"token punctuation\">,</span>\n                              request <span class=\"token operator\">=</span> request<span class=\"token punctuation\">,</span>\n                              form <span class=\"token operator\">=</span> form<span class=\"token punctuation\">,</span>\n                              response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">,</span>\n                              supervisord<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>supervisord<span class=\"token punctuation\">)</span>\n        view <span class=\"token operator\">=</span> viewclass<span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n        pushproducer <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">.</span>push_with_producer\n        pushproducer<span class=\"token punctuation\">(</span>DeferredWebProducer<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">supervisor_xmlrpc_handler</span><span class=\"token punctuation\">(</span>xmlrpc_handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    path <span class=\"token operator\">=</span> <span class=\"token string\">'/RPC2'</span>\n    IDENT <span class=\"token operator\">=</span> <span class=\"token string\">'Supervisor XML-RPC Handler'</span>\n\n    unmarshallers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"i4\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>text <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">or</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"double\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"dateTime.iso8601\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> make_datetime<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"array\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"struct\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">or</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> as_string<span class=\"token punctuation\">(</span>decodestring<span class=\"token punctuation\">(</span>as_bytes<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">or</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"param\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> supervisord<span class=\"token punctuation\">,</span> subinterfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>rpcinterface <span class=\"token operator\">=</span> RootRPCInterface<span class=\"token punctuation\">(</span>subinterfaces<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>supervisord <span class=\"token operator\">=</span> supervisord\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">loads</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        params <span class=\"token operator\">=</span> method <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">for</span> action<span class=\"token punctuation\">,</span> elem <span class=\"token keyword\">in</span> iterparse<span class=\"token punctuation\">(</span>StringIO<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            unmarshall <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>unmarshallers<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> unmarshall<span class=\"token punctuation\">:</span>\n                data <span class=\"token operator\">=</span> unmarshall<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n                elem<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                elem<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> data\n            <span class=\"token keyword\">elif</span> elem<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">==</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    data <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text\n                <span class=\"token keyword\">except</span> IndexError<span class=\"token punctuation\">:</span>\n                    data <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">or</span> <span class=\"token string\">\"\"</span>\n                elem<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                elem<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> data\n            <span class=\"token keyword\">elif</span> elem<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">==</span> <span class=\"token string\">\"methodName\"</span><span class=\"token punctuation\">:</span>\n                method <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>text\n            <span class=\"token keyword\">elif</span> elem<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">==</span> <span class=\"token string\">\"params\"</span><span class=\"token punctuation\">:</span>\n                params <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> elem<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> params<span class=\"token punctuation\">,</span> method\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span>uri<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">continue_request</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        logger <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>supervisord<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>logger\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># on 2.x, the Expat parser doesn't like Unicode which actually</span>\n                <span class=\"token comment\"># contains non-ASCII characters. It's a bit of a kludge to</span>\n                <span class=\"token comment\"># do it conditionally here, but it's down to how underlying</span>\n                <span class=\"token comment\"># libs behave</span>\n                <span class=\"token keyword\">if</span> PY2<span class=\"token punctuation\">:</span>\n                    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'ascii'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'xmlcharrefreplace'</span><span class=\"token punctuation\">)</span>\n                params<span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">'XML-RPC request data %r is invalid: unmarshallable'</span> <span class=\"token operator\">%</span>\n                    <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                request<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n\n            <span class=\"token comment\"># no &lt;methodName> in the request or name is an empty string</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> method<span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">'XML-RPC request data %r is invalid: no method name'</span> <span class=\"token operator\">%</span>\n                    <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                request<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n\n            <span class=\"token comment\"># we allow xml-rpc clients that do not send empty &lt;params></span>\n            <span class=\"token comment\"># when there are no parameters for the method call</span>\n            <span class=\"token keyword\">if</span> params <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                params <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                logger<span class=\"token punctuation\">.</span>trace<span class=\"token punctuation\">(</span><span class=\"token string\">'XML-RPC method called: %s()'</span> <span class=\"token operator\">%</span> method<span class=\"token punctuation\">)</span>\n                value <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n                logger<span class=\"token punctuation\">.</span>trace<span class=\"token punctuation\">(</span><span class=\"token string\">'XML-RPC method %s() returned successfully'</span> <span class=\"token operator\">%</span>\n                             method<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> RPCError <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># turn RPCError reported by method into a Fault instance</span>\n                value <span class=\"token operator\">=</span> xmlrpclib<span class=\"token punctuation\">.</span>Fault<span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n                logger<span class=\"token punctuation\">.</span>trace<span class=\"token punctuation\">(</span><span class=\"token string\">'XML-RPC method %s() returned fault: [%d] %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>\n                    method<span class=\"token punctuation\">,</span>\n                    err<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> types<span class=\"token punctuation\">.</span>FunctionType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># returning a function from an RPC method implies that</span>\n                <span class=\"token comment\"># this needs to be a deferred response (it needs to block).</span>\n                pushproducer <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>channel<span class=\"token punctuation\">.</span>push_with_producer\n                pushproducer<span class=\"token punctuation\">(</span>DeferredXMLRPCResponse<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token comment\"># if we get anything but a function, it implies that this</span>\n                <span class=\"token comment\"># response doesn't need to be deferred, we can service it</span>\n                <span class=\"token comment\"># right away.</span>\n                body <span class=\"token operator\">=</span> as_bytes<span class=\"token punctuation\">(</span>xmlrpc_marshal<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                request<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'text/xml'</span>\n                request<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n                request<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n                request<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n            tb <span class=\"token operator\">=</span> traceback<span class=\"token punctuation\">.</span>format_exc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            logger<span class=\"token punctuation\">.</span>critical<span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"Handling XML-RPC request with data %r raised an unexpected \"</span>\n                <span class=\"token string\">\"exception: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> tb<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># internal error, report as HTTP server error</span>\n            request<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> traverse<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>rpcinterface<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://raw.githubusercontent.com/jacksonyoudi/images/main/uPic/Hwfzfb.jpg\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>python是解释型语言 弱类型，看源码没有编译型语言清晰明了。这个源码不太容易看，我参考supervisor的设计写公司项目，一开始是看这个源码，发现很不容易理清楚，我是先看了go语言版的，然后在回头看python版的才看明白。可以直接看go版本的，那个更加清晰。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckrrtsc5f0001b6uq7r6l1grp","category_id":"ckrrtsc5j0003b6uq6dlfd74k","_id":"ckrrtsc5n0009b6uq1ybi5ltp"},{"post_id":"ckrrtsc5p000gb6uqdv3q86bi","category_id":"ckrrtsc5r000ib6uqg5as4zyq","_id":"ckrrtsc5w000nb6uq78y0hs11"},{"post_id":"ckrrtsc5r000kb6uqdy2x8714","category_id":"ckrrtsc5r000ib6uqg5as4zyq","_id":"ckrrtsc5w000pb6uq1yyebvj0"},{"post_id":"ckrsiz6m900006guq31qsg75h","category_id":"ckrsiz6ml00016guqd276gf34","_id":"ckrsiz6mp00046guq5jqo8nyy"},{"post_id":"ckrta5awx00000duq1xumgoao","category_id":"ckrrtsc5r000ib6uqg5as4zyq","_id":"ckrta5axc00020duq6orgfwcf"},{"post_id":"ckrtasa9h0000dbuqcr4h1xtm","category_id":"ckrtasa9n0001dbuq8cri3x1n","_id":"ckrtasa9q0004dbuq80ltbvmg"},{"post_id":"ckrtbjv7c0000pkuq7d5afpzc","category_id":"ckrrtsc5r000ib6uqg5as4zyq","_id":"ckrtbjv7n0002pkuqdfnz7bec"}],"PostTag":[{"post_id":"ckrrtsc5f0001b6uq7r6l1grp","tag_id":"ckrrtsc5l0004b6uqdgohh26a","_id":"ckrrtsc5o000cb6uq0buh96ge"},{"post_id":"ckrrtsc5f0001b6uq7r6l1grp","tag_id":"ckrrtsc5n0008b6uqb4kxb76w","_id":"ckrrtsc5o000db6uqd82mg664"},{"post_id":"ckrrtsc5f0001b6uq7r6l1grp","tag_id":"ckrrtsc5n000ab6uqd3n4bf4f","_id":"ckrrtsc5o000eb6uqfvsmcdbk"},{"post_id":"ckrrtsc5f0001b6uq7r6l1grp","tag_id":"ckrrtsc5n000bb6uqbfwwch47","_id":"ckrrtsc5o000fb6uq2krye0sd"},{"post_id":"ckrrtsc5p000gb6uqdv3q86bi","tag_id":"ckrrtsc5r000jb6uqheqz42o0","_id":"ckrrtsc5x000rb6uqht3l3c98"},{"post_id":"ckrrtsc5p000gb6uqdv3q86bi","tag_id":"ckrrtsc5t000mb6uq08r402od","_id":"ckrrtsc5x000sb6uq6wv4051t"},{"post_id":"ckrrtsc5p000gb6uqdv3q86bi","tag_id":"ckrrtsc5w000ob6uqbh3k8fn1","_id":"ckrrtsc5x000ub6uqgcdq0e9a"},{"post_id":"ckrrtsc5r000kb6uqdy2x8714","tag_id":"ckrrtsc5w000qb6uq5suobfjd","_id":"ckrrtsc5y000wb6uq65rh70g0"},{"post_id":"ckrrtsc5r000kb6uqdy2x8714","tag_id":"ckrrtsc5x000tb6uqa8vk2uwy","_id":"ckrrtsc5y000xb6uq907k6l8o"},{"post_id":"ckrrtsc5r000kb6uqdy2x8714","tag_id":"ckrrtsc5x000vb6uq127p6dx7","_id":"ckrrtsc5y000yb6uqfxyi0brb"},{"post_id":"ckrsiz6m900006guq31qsg75h","tag_id":"ckrsiz6mn00026guq77gb9pk7","_id":"ckrsiz6mp00066guq1aregr5u"},{"post_id":"ckrsiz6m900006guq31qsg75h","tag_id":"ckrsiz6mo00036guq59sme4jb","_id":"ckrsiz6mp00076guq0r27ghw3"},{"post_id":"ckrsiz6m900006guq31qsg75h","tag_id":"ckrsiz6mp00056guqfpyb4u2l","_id":"ckrsiz6mq00086guqcba19qho"},{"post_id":"ckrta5awx00000duq1xumgoao","tag_id":"ckrrtsc5w000qb6uq5suobfjd","_id":"ckrta5axc00030duq1dbh9pkk"},{"post_id":"ckrta5awx00000duq1xumgoao","tag_id":"ckrta5ax900010duqcpbyesqo","_id":"ckrta5axd00040duqf650b8sg"},{"post_id":"ckrta5awx00000duq1xumgoao","tag_id":"ckrrtsc5t000mb6uq08r402od","_id":"ckrta5axd00050duqct0p19ac"},{"post_id":"ckrta5awx00000duq1xumgoao","tag_id":"ckrrtsc5r000jb6uqheqz42o0","_id":"ckrta5axd00060duqcogzgc3i"},{"post_id":"ckrtasa9h0000dbuqcr4h1xtm","tag_id":"ckrtasa9p0002dbuq4htm3e2m","_id":"ckrtasa9r0006dbuq7cachskb"},{"post_id":"ckrtasa9h0000dbuqcr4h1xtm","tag_id":"ckrtasa9q0003dbuqc6rhconf","_id":"ckrtasa9r0007dbuq7fymc4xf"},{"post_id":"ckrtasa9h0000dbuqcr4h1xtm","tag_id":"ckrtasa9q0005dbuqejfp1gnj","_id":"ckrtasa9r0008dbuq7v0nc5nm"},{"post_id":"ckrtbjv7c0000pkuq7d5afpzc","tag_id":"ckrrtsc5w000qb6uq5suobfjd","_id":"ckrtbjv7p0005pkuqeuwy8vf9"},{"post_id":"ckrtbjv7c0000pkuq7d5afpzc","tag_id":"ckrtbjv7k0001pkuq3gr66kdv","_id":"ckrtbjv7p0006pkuqht0y6j9t"},{"post_id":"ckrtbjv7c0000pkuq7d5afpzc","tag_id":"ckrtbjv7n0003pkuq70gh6e2d","_id":"ckrtbjv7p0007pkuqail59f5g"},{"post_id":"ckrtbjv7c0000pkuq7d5afpzc","tag_id":"ckrtbjv7o0004pkuq0p30gmhp","_id":"ckrtbjv7p0008pkuq9p6rb5y5"}],"Tag":[{"name":"mac","_id":"ckrrtsc5l0004b6uqdgohh26a"},{"name":"zsh","_id":"ckrrtsc5n0008b6uqb4kxb76w"},{"name":"powerlevel10k","_id":"ckrrtsc5n000ab6uqd3n4bf4f"},{"name":"dracula","_id":"ckrrtsc5n000bb6uqbfwwch47"},{"name":"crawler","_id":"ckrrtsc5r000jb6uqheqz42o0"},{"name":"爬虫","_id":"ckrrtsc5t000mb6uq08r402od"},{"name":"robots","_id":"ckrrtsc5w000ob6uqbh3k8fn1"},{"name":"go","_id":"ckrrtsc5w000qb6uq5suobfjd"},{"name":"tool","_id":"ckrrtsc5x000tb6uqa8vk2uwy"},{"name":"language","_id":"ckrrtsc5x000vb6uq127p6dx7"},{"name":"spark","_id":"ckrsiz6mn00026guq77gb9pk7"},{"name":"es","_id":"ckrsiz6mo00036guq59sme4jb"},{"name":"大数据","_id":"ckrsiz6mp00056guqfpyb4u2l"},{"name":"colly","_id":"ckrta5ax900010duqcpbyesqo"},{"name":"java","_id":"ckrtasa9p0002dbuq4htm3e2m"},{"name":"package manager","_id":"ckrtasa9q0003dbuqc6rhconf"},{"name":"maven","_id":"ckrtasa9q0005dbuqejfp1gnj"},{"name":"supervisor","_id":"ckrtbjv7k0001pkuq3gr66kdv"},{"name":"源码","_id":"ckrtbjv7n0003pkuq70gh6e2d"},{"name":"python","_id":"ckrtbjv7o0004pkuq0p30gmhp"}]}}